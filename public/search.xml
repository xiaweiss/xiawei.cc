<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac 基本开发环境配置</title>
    <url>/art/2017/20171111-set-environment-of-mac/</url>
    <content><![CDATA[<blockquote>
<p>因为自己喜欢苹果产品的体验，还有可以提高工作效率<br>作为一只单身汪，下决心买了 Mac Air<br>用了几天里的零碎时间，配好了环境，分享过程给大家</p>
</blockquote>
<span id="more"></span>

<h2 id="1-快捷键符号"><a href="#1-快捷键符号" class="headerlink" title="1. 快捷键符号"></a>1. 快捷键符号</h2><p>⌃ Control<br>⌥ alt/option<br>⌘ command<br>⇧ shift<br>⇪ caps lock</p>
<h2 id="2-中文输入法设置"><a href="#2-中文输入法设置" class="headerlink" title="2. 中文输入法设置"></a>2. 中文输入法设置</h2><p>设置Spotlight 的快捷键与更换输入法的快捷键，不要占用<code>Control</code>键<code>^</code><br>在<code>System Preferences &gt; Keyboard &gt; Shortcuts</code>里设置</p>
<p>把 Spotlight 设置为 <code>⌥Space</code>，把更换输入法设置为 <code>⌘Space</code>；而 Spotlight 中，Show Finder Search Window 不使用快捷键；Input Sources 中，Select next source in Input menu 不使用快捷键</p>
<h2 id="3-命令行（Terminal-iTerm的基本设置）"><a href="#3-命令行（Terminal-iTerm的基本设置）" class="headerlink" title="3. 命令行（Terminal/iTerm的基本设置）"></a>3. 命令行（Terminal/iTerm的基本设置）</h2><p>请逐次拷贝粘贴以下命令行，而后再按回车键执行<br>(1)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure>
<p>(2)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.bash_profile</span><br></pre></td></tr></table></figure>
<p>(3)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.bash_prompt</span><br></pre></td></tr></table></figure>
<p>(4)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.aliases</span><br></pre></td></tr></table></figure>
<p>全部完成之后，重启 Terminal（就是关掉退出之后，再重新打开）。刚才的命令完成了很多事情，只不过现在你搞不懂，你能看到的就是命令行提示变得花花绿绿了，各种颜色有不同的意义。(实际上，相当于把大牛写好的配置文件存到了本地，来自<a href="https://github.com/donnemartin/dev-setup">donnemartin/dev-setup</a>)</p>
<p>接下来，要为 Terminal 换个皮肤<br><a href="https://github.com/tomislav/osx-terminal.app-colors-solarized">Solarized</a><br><a href="https://github.com/wtanna/Spacegray-OSX-Terminal-Theme">Spacegray</a><br>点 Clone and Download 下载到 <code>Spacegray.terminal</code> 文件，打开 terminal ，在工具栏打开偏好设置（快捷键<code>⌘,</code>）,打开Profiles，点下面小齿轮，点导入，选择文件 <code>Spacegray.terminal</code>，最后设置为默认</p>
<p> references &gt; Profiles &gt; Spacegray &gt; Text &gt; Font 可以设置字体大小</p>
<blockquote>
<p>还有，Mac OSX 其实还有很多快捷键可以设置，其中一个比较重要的是 New Terminal at Folder，在System Preferences &gt; Keyboard &gt; Shortcuts &gt; Services &gt; Files and Folders 里可以找到。我把它设置成了 ⌃⌥⌘T，以后在 Finder 里，用鼠标选中某个文件夹（或称“目录”），然后按 ⌃⌥⌘T，就可以呼出 Terminal 并且将工作目录转至这个文件夹内…… 很方便  </p>
</blockquote>
<p>PS: 这个设置快捷键的方法，并没有起作用，日后研究。</p>
<p>有三个 Mac OSX 系统自带的东西，工程师们会觉得不够用，进而造出更好的东西来替代，它们分别是：</p>
<ul>
<li>Terminal → <a href="https://www.iterm2.com/">iTerm</a>  <a href="https://www.zhihu.com/question/27447370">iterm2有什么酷功能？ - 知乎</a></li>
<li>Finder → <a href="https://totalfinder.binaryage.com/">TotalFinder is a better Finder</a> / <a href="https://cocoatech.com/">Path Finder</a></li>
<li>Spotlight → <a href="https://qsapp.com/">QuickSilver</a> / <a href="https://www.alfredapp.com/">Alfred</a></li>
</ul>
<p>下载 iTerm 之后，要为它更换皮肤，设置字体，设置字体大小……<br>iTerm 的颜色主题 <a href="https://github.com/christianbundy/spacegrey-iterm">iTerm Spacegray</a></p>
<p>字体推荐 Menlo</p>
<h2 id="4-命令行的使用"><a href="#4-命令行的使用" class="headerlink" title="4. 命令行的使用"></a>4. 命令行的使用</h2><p>常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls #罗列当前目录下的内容</span><br><span class="line">cd #更换工作目录</span><br><span class="line">pwd #现实当前完整工作目录</span><br><span class="line">touch #创建一个文件</span><br><span class="line">mv #移动/更名文件或目录</span><br><span class="line">rm #删除文件活目录</span><br><span class="line">nano #使用 nano 编辑纯文本文件</span><br><span class="line">open #打开一个文件，就好像你在 Finder 里双击那个文件图标一样</span><br><span class="line">clear #清空屏幕</span><br><span class="line">sudo #用管理员身份去执行一个命令</span><br></pre></td></tr></table></figure>

<p>学习快捷键的好去处:</p>
<blockquote>
<p><a href="https://github.com/0nn0/terminal-mac-cheatsheet">https://github.com/0nn0/terminal-mac-cheatsheet</a>  </p>
</blockquote>
<h2 id="5-安装必要开发环境"><a href="#5-安装必要开发环境" class="headerlink" title="5. 安装必要开发环境"></a>5. 安装必要开发环境</h2><h3 id="5-1-Xcode-Command-Line-Tool"><a href="#5-1-Xcode-Command-Line-Tool" class="headerlink" title="5.1 Xcode Command Line Tool"></a>5.1 Xcode Command Line Tool</h3><p>首先 在Terminal里敲命令时，系统会出来个提示框 要求安装 command line tools，点击安装即可<br>不需要安装 Xcode。</p>
<p>过去安装这个东西费劲死了，在需要翻山越岭的情况下下载两个多 G 的东西，唉…… Mac OSX EI Capitan 之后，终于可以在命令行工具（Terminal）下这样安装了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<h3 id="5-2-同意-xcode-许可"><a href="#5-2-同意-xcode-许可" class="headerlink" title="5.2 同意 xcode 许可"></a>5.2 同意 xcode 许可</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo xcodebuild -license</span><br></pre></td></tr></table></figure>
<p>输入 开机密码<br>反复按 <code>Space</code>翻页<br>然后输入 <code>agree</code> 按回车键 ⏎</p>
<h3 id="5-3-安装-Homebrew"><a href="#5-3-安装-Homebrew" class="headerlink" title="5.3 安装 Homebrew"></a>5.3 安装 Homebrew</h3><p>命令行工具中拷贝粘贴以下代码，而后按回车键 ⏎</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>
<p>随后再次在命令行工具中拷贝粘贴以下代码，而后按回车键 ⏎</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;/usr/local/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="5-4-安装-Git"><a href="#5-4-安装-Git" class="headerlink" title="5.4 安装 Git"></a>5.4 安装 Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<p>配置 git 按 tab 补全功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</span><br><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>按 i 键（注意不要使用中文出入法），将这行代码粘贴进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test -f ~/.git-completion.bash &amp;&amp; . $_</span><br></pre></td></tr></table></figure>
<p>按 <code>esc</code> 键，再按 <code>：</code>，然后输入 <code>wq</code> 按回车键 ⏎</p>
<h3 id="5-5-安装-rvm-与-Ruby-2-3-1"><a href="#5-5-安装-rvm-与-Ruby-2-3-1" class="headerlink" title="5.5 安装 rvm 与 Ruby 2.3.1"></a>5.5 安装 rvm 与 Ruby 2.3.1</h3><p>注意，以下是三行命令，要分别输入，每行都要按接回车键（⏎）执行。以后为了书写方便，经常会把一系列命令放到一个代码块中……</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line">rvm install 2.3.1</span><br><span class="line">rvm use 2.3.1</span><br></pre></td></tr></table></figure>

<p>如果以上命令安装失败，可以按<a href="https://rvm.io/">官网</a>方式安装：<br>先创建文件夹 include（为了以免安装gpg时<a href="https://stackoverflow.com/questions/14527521/brew-doctor-says-warning-usr-local-include-isnt-writable">报错</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /usr/local/include</span><br><span class="line">sudo chown -R $USER:admin /usr/local/include</span><br></pre></td></tr></table></figure>
<p>安装 gpg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install gnupg gnupg2</span><br></pre></td></tr></table></figure>
<p>安装 rvm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>

<p>最后根据安装后的提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>按 i 键（注意不要使用中文出入法），将<code>source ~/.profile</code>粘贴为单独的一行<br>按 <code>esc</code> 键，再按 <code>：</code>，然后输入 <code>wq</code> 按回车键 ⏎</p>
<p>rvm 是 Ruby 的版本管理工具，其作用是在系统中安装若干个不同版本的 Ruby，且不让它们之间发生冲突。你可以安装很多个版本的 Ruby，比如，刚刚安装了 2.3.1，随后你还可以安装 1.9.2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm install 1.9.2</span><br></pre></td></tr></table></figure>
<p>需要使用 1.9.2 版本的 Ruby 的时候，就可以用这个命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm use 1.9.2</span><br></pre></td></tr></table></figure>
<p>也可以随时用这个命令切换回 2.3.1</p>
<p>你也随时可以用这个命令查看自己都安装过哪些版本：</p>
<p>想要卸载哪个版本的 Ruby，你就用这样的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm uninstall 1.9.2</span><br></pre></td></tr></table></figure>
<p>下面要接着安装的 nvm，跟 rvm 一个原理，只不过 nvm 是 nodejs 的版本管理器</p>
<h3 id="5-6-安装-nvm-和-node-长期支持版本"><a href="#5-6-安装-nvm-和-node-长期支持版本" class="headerlink" title="5.6 安装 nvm 和 node 长期支持版本"></a>5.6 安装 nvm 和 node 长期支持版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure>
<p>这时会有提示，按提示执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ~/.nvm</span><br><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>按 i 键，将这两行代码粘贴进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">  . &quot;/usr/local/opt/nvm/nvm.sh&quot;</span><br></pre></td></tr></table></figure>
<p>按 <code>esc</code> 键，再按 <code>：</code>，然后输入 <code>wq</code> 按回车键 ⏎<br>关闭 Terminal / iTerm，重新打开</p>
<p>nodejs 有两个版本，一个叫 LTS（Long Term Support，提供长期支持的稳定版），一个叫 Current（提供最新功能的当下版，通常也不够稳定，尚需改进）。新手建议使用 LTS。<br>使用下面命令来安装最新的LTS版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure>
<p>也可以安装指定的版本号，写此文时LTS最新版是8.9.0，也可以这样安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 8.9.0</span><br></pre></td></tr></table></figure>
<p>然后启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 8.9.0</span><br></pre></td></tr></table></figure>

<p>升级 nvm 版本</p>
<p>使用 brew 安装的，使用 <code>brew upgrade nvm</code> 命令</p>
<p>其他情况使用命令 <a href="https://github.com/creationix/nvm/issues/127">issue</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.nvm &amp;&amp; git pull &amp;&amp; git checkout `git describe --abbrev=0 --tags`</span><br></pre></td></tr></table></figure>

<h3 id="5-7-设置自己的快捷命令"><a href="#5-7-设置自己的快捷命令" class="headerlink" title="5.7 设置自己的快捷命令"></a>5.7 设置自己的快捷命令</h3><p>Terminal/iTerm 里经常用到但较长的命令，可以通过别名alias的方式来缩写</p>
<p>比如 <code>git checkout master</code>, 设置后可以缩写为<code>gco master</code><br>接下来是具体设置方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .aliases</span><br></pre></td></tr></table></figure>
<p>按 <code>i</code>键进入编辑模式，粘贴下列代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias hs=&quot;hexo g &amp;&amp; hexo s&quot;</span><br><span class="line">alias hd=&quot;hexo g &amp;&amp; hexo d&quot;</span><br><span class="line"></span><br><span class="line">alias nr=&quot;npm run&quot;</span><br></pre></td></tr></table></figure>
<p>按 <code>esc</code> 键，再按 <code>：</code>，然后输入 <code>wq</code> 按回车键 ⏎<br>关闭 Terminal/iTerm，重新打开就可以使用这些简写了。</p>
<p>当然，你也可以根据自己的喜好来设置。不过不建议设置太多短命令，以免造成记忆负担。</p>
<p>而 git 快捷命令要在 git 全局配置文件里设置(否则会导致自动补全失效)，可以编辑 <code>~/.gitconfig</code> 文件，也可以使用命令来配置，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global alias.ll &quot;log -1 HEAD&quot;</span><br></pre></td></tr></table></figure>

<h3 id="5-8-修改主机名"><a href="#5-8-修改主机名" class="headerlink" title="5.8 修改主机名"></a>5.8 修改主机名</h3><p>终端 Terminal/iTerm 里，显示的“主机名”就是 HostName，也就是主机真正的名称<br>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $HOSTNAME</span><br></pre></td></tr></table></figure>
<p>修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo scutil --set HostName 新的主机名</span><br></pre></td></tr></table></figure>

<h3 id="5-9-设置同步盘（软链接、硬链接）"><a href="#5-9-设置同步盘（软链接、硬链接）" class="headerlink" title="5.9 设置同步盘（软链接、硬链接）"></a>5.9 设置同步盘（软链接、硬链接）</h3><p>为了数据安全，以及便于存储传输，常常会用到第三方的同步盘，比如腾讯微云</p>
<p>而问题是同步盘只能同步一个文件夹，而我们的数据是散落在多个文件夹里的</p>
<p>还有一个场景是，使用 hexo 时，修改了子仓库某个文件（比如 next 主题里的配置文件），但不想把子仓库一起打包进自己仓库里</p>
<p>这时，可以使用 软连接或硬链接来处理</p>
<p>所谓的软连接，类似于 windows 中的快捷方式，不同的是，这个文件是有数据的，它的数据始终与它指向的原文件一致。<br>假设同步盘目录是 <code>~/Cloud</code><br>要把<code>~/Project</code>目录下的 <code>xiaweiss</code> 文件夹加入同步盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/Project</span><br><span class="line">ln -s xiawess/ /Users/$USER/Cloud/xiaweiss</span><br></pre></td></tr></table></figure>
<p>语法是 <code>ln -s 原目录/原文件 目标目录/目标文件</code></p>
<p>-s 表示符号链接（软链接），注意目标建议绝对路径，因为目标文件移动后，可能会找不到原文件而失效。</p>
<p>软连接有点像分身，如果本体被干掉，分身也就不起作用了。</p>
<p>硬链接 没有-s 参数，语法为 <code>ln 原文件 目标文件</code>，可以写相对路径。</p>
<p>硬链接像一个本体分裂成了好多个，每一个都是本体，修改一个，相当于把每个都修改了。只有把所有的都删除了，才会真正被消灭。</p>
<p>二者区别主要是：硬链接不可以链接目录，软连接可以；硬链接文件可以拷贝出去使用，挪了位置也可以用，软连接不可以。</p>
<p>使用软连接、硬链接，看起来文件增多了，但并不会增加磁盘存储量。</p>
<h3 id="5-10-显示任何来源选项"><a href="#5-10-显示任何来源选项" class="headerlink" title="5.10 显示任何来源选项"></a>5.10 显示任何来源选项</h3><p>macOS Sierra系统隐私里默认不显示“任何来源”选项，这是一种增强型保护机制。<br>显示“任何来源”选项，在控制台中执行：<br><code>sudo spctl --master-disable</code><br>不显示“任何来源”选项，在控制台中执行：<br><code>sudo spctl --master-enable</code></p>
<h2 id="6-选装"><a href="#6-选装" class="headerlink" title="6. 选装"></a>6. 选装</h2><h3 id="6-1-redis"><a href="#6-1-redis" class="headerlink" title="6.1 redis"></a>6.1 redis</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>

<p>安装好后，会看到如下提示语：</p>
<p>To have launchd start redis now and restart at login:<br>  brew services start redis<br>Or, if you don’t want/need a background service you can just run:<br>  redis-server /usr/local/etc/redis.conf</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>也即是说官方提供两种启动方式：</p>
<p><strong>1. 常驻服务</strong> 重启电脑后 redis 依然在运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew services list //查看服务列表</span><br><span class="line">brew services start redis //启动 redis 服务</span><br><span class="line">brew services restart redis //重启 redis</span><br><span class="line">brew services stop redis //停止 redis</span><br></pre></td></tr></table></figure>

<p>常驻服务还有一种启动方式是使用 <code>launchctl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents //注册到启动项里</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist //启动 redis 服务</span><br><span class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist //停止 redis</span><br></pre></td></tr></table></figure>

<p><strong>2. 不需要后台服务，从配置文件启动</strong> 重启或关闭 Terminal 服务会停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server /usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure>

<pre><code>启动后可以看到界面，退出的话，同时按下 control键 c键 即可
</code></pre>
<h4 id="卸载-redis"><a href="#卸载-redis" class="headerlink" title="卸载 redis"></a>卸载 redis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew uninstall redis</span><br><span class="line">rm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</span><br></pre></td></tr></table></figure>

<h4 id="查看-redis"><a href="#查看-redis" class="headerlink" title="查看 redis"></a>查看 redis</h4><p>查看 redis 信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew info redis</span><br></pre></td></tr></table></figure>

<p>测试 redis 是否在运行，如果看到 <code>PONG</code> 说明正常运行中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure>





<h2 id="fin"><a href="#fin" class="headerlink" title="fin"></a>fin</h2><p>如此这般，最基础的开发环境算是完成了，随着使用的深入，还会逐渐补充完善。</p>
<p>关于更详细的开发环境设置，请参阅这两个 Github 项目：</p>
<ul>
<li><a href="https://github.com/nicolashery/mac-dev-setup">nicolashery/mac-dev-setup</a></li>
<li><a href="https://github.com/donnemartin/dev-setup">donnemartin/dev-setup</a></li>
</ul>
<p>ChangeLog</p>
<p>20190128 添加 5.6 升级 nvm 版本方法</p>
<p>参考资料：<br><a href="http://lixiaolai.com/2016/06/16/makecs-basic-dev-env-settup/">李笑来《基本开发环境设置》</a><br><a href="http://xiaosheng.me/2015/08/23/article5/">Mac修改主机名和计算机名 - 小昇的博客 | Xs Blog</a><br><a href="http://www.jianshu.com/p/32356677bdb5">在Mac下Git使用对于Tab键自动补全功能设置</a><br><a href="https://apple.stackexchange.com/questions/55875/git-auto-complete-for-branches-at-the-command-line">Terminal-git auto-complete</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html">理解 Linux 的硬链接与软链接</a><br><a href="https://medium.com/@petehouston/install-and-config-redis-on-mac-os-x-via-homebrew-eb8df9a4f298">Install and config Redis on Mac OS X via Homebrew</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 git hook 实现服务器代码自动部署</title>
    <url>/art/2017/20171114-set-git-hooks-to-update-server-code/</url>
    <content><![CDATA[<blockquote>
<p>前几天把 Hexo 博客部署到了阿里云服务器，但发现每次推送文章都需要去服务器同步代码。最终寻找到 git hook 来解决了这个问题</p>
</blockquote>
<span id="more"></span>

<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>在服务器，要建一个相当于 github 存放功能的裸仓库来存储代码。<br>之所以叫裸仓库，是因为这个仓库只是为了存代码用的，没有工作目录，不可以在它里面查看改写代码。</p>
<p>在网站文件夹下，会有一个工作目录来存放代码，这个目录的代码可以像clone github代码库一样，clone 服务器里的裸仓库。</p>
<p>当服务器里裸仓库收到提交进来的代码后，会触发 git hook 的 post-receive 事件，配置好的程序就可以自动去工作目录的仓库执行 git pull，服务器代码就自动更新了</p>
<h2 id="2-配置步骤："><a href="#2-配置步骤：" class="headerlink" title="2. 配置步骤："></a>2. 配置步骤：</h2><p>远程连接服务器，登录 root 账号</p>
<h3 id="2-1-设置用户"><a href="#2-1-设置用户" class="headerlink" title="2.1 设置用户"></a>2.1 设置用户</h3><p>新增用户xiawei，这里可以写你的名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd xiawei</span><br></pre></td></tr></table></figure>

<p>修改用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd xiawei</span><br></pre></td></tr></table></figure>
<p>输入新密码即可</p>
<p>给添加 sudo 权限 通过修改 /etc/sudoers</p>
<p>必须使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure>
<p>按 i 键进入, 找到 root ALL=(ALL) ALL 然后下面添加 xiawei ALL = (ALL) ALL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root ALL=(ALL) ALL</span><br><span class="line">xiawei ALL = (ALL) ALL</span><br></pre></td></tr></table></figure>

<h3 id="2-2-安装-git"><a href="#2-2-安装-git" class="headerlink" title="2.2 安装 git"></a>2.2 安装 git</h3><p>查看是否安装 git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>如果没有看到版本号，则继续安装 git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>
<p>设置 git 用户名邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-建立git裸仓库"><a href="#2-3-建立git裸仓库" class="headerlink" title="2.3 建立git裸仓库"></a>2.3 建立git裸仓库</h3><p>假设网站的在 /www/blog/ 目录下，创建裸仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /www</span><br><span class="line">sudo git init --bare blog.git</span><br></pre></td></tr></table></figure>
<p>更改所属用户和用户组，获得权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown -R xiawei:xiawei blog.git</span><br><span class="line">sudo chown -R xiawei:xiawei blog</span><br></pre></td></tr></table></figure>

<h3 id="2-4-建立工作目录-git-仓库"><a href="#2-4-建立工作目录-git-仓库" class="headerlink" title="2.4 建立工作目录 git 仓库"></a>2.4 建立工作目录 git 仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /www/blog</span><br><span class="line">git clone /www/blog.git</span><br></pre></td></tr></table></figure>

<p>如果此时 blog 文件夹不是空的，会不能 clone<br>按先定义仓库，再设置远端仓库地址即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /www/blog</span><br><span class="line">git init</span><br><span class="line">git remote add origin /www/blog.git</span><br></pre></td></tr></table></figure>
<p>注意这时要删除掉 index.html 等和本地待提交代码重复的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm index.html</span><br></pre></td></tr></table></figure>

<h3 id="2-5-设置-git-hooks"><a href="#2-5-设置-git-hooks" class="headerlink" title="2.5 设置 git hooks"></a>2.5 设置 git hooks</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /www/xiaweiss.git/hooks/</span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure>
<p>按 i 键，将下面这几行代码粘贴进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">unset GIT_DIR</span><br><span class="line">cd /www/blog</span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>
<p>（原来只使用的 git pull origin master 方式，代码冲突时，还需要手动登陆服务器解决 ）</p>
<p>赋予 post-receive 文件可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>

<h3 id="2-6-本地-配置"><a href="#2-6-本地-配置" class="headerlink" title="2.6 本地 配置"></a>2.6 本地 配置</h3><p>最后修改 Hexo 配置文件里 deploy项，每次发布代码会提交到这两个仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:xiaweiss/xiaweiss.github.io.git</span><br><span class="line">- type: git</span><br><span class="line">  repo: xiawei@xiaweiss.com:/www/blog.git</span><br></pre></td></tr></table></figure>
<p>如果是本地的其他项目，可以直接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone xiawei@xiaweiss.com:/www/blog.git</span><br></pre></td></tr></table></figure>
<p>修改代码后，提交即可</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>在centOS7 编译安装 php、apache</title>
    <url>/art/2017/20171115-install-php-and-apache-on-centos7/</url>
    <content><![CDATA[<blockquote>
<p>之前购买了阿里云服务器，为了运行自己的网站，需要 webServer<br>apache httpd + php 或者 nginx + php 都是不错的选择<br>新手还是推荐使用 宝塔面板，可以一键安装部署</p>
</blockquote>
<span id="more"></span>

<h2 id="0-安装图形界面（不建议）"><a href="#0-安装图形界面（不建议）" class="headerlink" title="0. 安装图形界面（不建议）"></a>0. 安装图形界面（不建议）</h2><p>不推荐安装，会降低服务器性能。但自己本地练习，可以考虑安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum group install &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;</span><br><span class="line">yum groupinstall &quot;Server with GUI&quot;</span><br></pre></td></tr></table></figure>
<p>默认启动图形界面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target</span><br></pre></td></tr></table></figure>
<p>命令行界面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ln -sf /lib/systemd/system/runlevel3.target /etc/systemd/system/default.target</span><br></pre></td></tr></table></figure>
<p>命令行界面下，启动图形界面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># startx</span><br></pre></td></tr></table></figure>

<h2 id="1-远程连接工具"><a href="#1-远程连接工具" class="headerlink" title="1. 远程连接工具"></a>1. 远程连接工具</h2><p>windows 使用 Xshell<br>Linux 和 mac 使用 Terminal 即可</p>
<h2 id="2-设置用户"><a href="#2-设置用户" class="headerlink" title="2. 设置用户"></a>2. 设置用户</h2><p>首先登录 root 账号</p>
<p>新增用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd xiawei</span><br></pre></td></tr></table></figure>
<p>修改用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd 新密码</span><br></pre></td></tr></table></figure>
<p>添加 sudo 权限<br>通过修改 /etc/sudoers</p>
<p>必须使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure>
<p>找到 root  ALL=(ALL)   ALL<br>然后添加 xiawei ALL = (ALL)  ALL</p>
<h2 id="3-准备工作"><a href="#3-准备工作" class="headerlink" title="3. 准备工作"></a>3. 准备工作</h2><p>源码目录：  <strong>~/source</strong><br>安装目录： <strong>/usr/local/soft</strong><br>网站目录： <strong>/usr/local/soft/web</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$mkdir source</span><br><span class="line">   $sudo mkdir /usr/local/soft</span><br><span class="line">   $sudo chown sxin:sxin /usr/local/soft/</span><br><span class="line">   $mkdir /usr/local/soft/web</span><br></pre></td></tr></table></figure>
<p>我们从官网下载Httpd和Php的源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$wget -P ~/source/ http://cn2.php.net/distributions/php-7.1.5.tar.gz</span><br><span class="line"> $wget -P ~/source/ http://archive.apache.org/dist/httpd/httpd-2.4.25.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cd ~/source</span><br><span class="line">$tar -zxvf php-7.1.5.tar.gz &amp;&amp; tar -zxvf httpd-2.4.25.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="4-安装Httpd-2-4"><a href="#4-安装Httpd-2-4" class="headerlink" title="4. 安装Httpd 2.4"></a>4. 安装Httpd 2.4</h2><p>Httpd Version 2.4 Compiling and Installing    <a href="http://httpd.apache.org/docs/2.4/install.html">http://httpd.apache.org/docs/2.4/install.html</a></p>
<h3 id="4-1-Requirements"><a href="#4-1-Requirements" class="headerlink" title="4.1 Requirements"></a>4.1 Requirements</h3><p>根据官网的文档。我们要先安装apr,apr-util和pcre</p>
<p>下载apr,apr-util,pcre源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$wget -P ~/source/ http://archive.apache.org/dist/apr/apr-1.5.2.tar.gz</span><br><span class="line">$wget -P ~/source/ http://archive.apache.org/dist/apr/apr-util-1.5.4.tar.gz</span><br><span class="line">$wget -P ~/source/ ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cd ~/source/ &amp;&amp; tar -zxvf apr-1.5.2.tar.gz &amp;&amp; tar -zxvf apr-util-1.5.4.tar.gz &amp;&amp; tar -zxvf pcre-8.39.tar.gz</span><br></pre></td></tr></table></figure>

<p>编译安装apr</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cd ~/source/apr-1.5.2/</span><br><span class="line">$./configure --prefix=/usr/local/soft/apr</span><br><span class="line">$make</span><br><span class="line">$make install</span><br></pre></td></tr></table></figure>

<p>编译安装apr-util</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cd ~/source/apr-util-1.5.4/</span><br><span class="line">$./configure --prefix=/usr/local/soft/apr-util --with-apr=/usr/local/soft/apr</span><br><span class="line">$make</span><br><span class="line">$make install</span><br></pre></td></tr></table></figure>

<p>编译安装pcre</p>
<blockquote>
<p>如果安装时出错 configure: error: You need a C++ compiler for C++ support<br>解决:安装 yum install -y gcc gcc-c++</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cd ~/source/pcre-8.39/</span><br><span class="line">$./configure --prefix=/usr/local/soft/pcre</span><br><span class="line">$make</span><br><span class="line">$make install</span><br></pre></td></tr></table></figure>

<h3 id="4-2-编译安装httpd"><a href="#4-2-编译安装httpd" class="headerlink" title="4.2 编译安装httpd"></a>4.2 编译安装httpd</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cd ~/source/httpd-2.4.25/</span><br><span class="line">$./configure --prefix=/usr/local/soft/httpd24 --with-apr=/usr/local/soft/apr --with-apr-util=/usr/local/soft/apr-util/ --with-pcre=/usr/local/soft/pcre --enable-so</span><br><span class="line">$make</span><br><span class="line">$make install</span><br></pre></td></tr></table></figure>
<p>注:如果编译过程中 遇到  “Did not find pcre-config script at”等类似的错误 说明 pcre版本下载错了。 下的是PCRE2 要下载PCRE. 8.X是PCRE 10.X是PCRE2</p>
<h2 id="5-安装PHP-7-1-5"><a href="#5-安装PHP-7-1-5" class="headerlink" title="5. 安装PHP 7.1.5"></a>5. 安装PHP 7.1.5</h2><p>官方文档：<br>  <a href="http://php.net/manual/en/install.unix.apache2.php">英文版</a><br>    <a href="http://php.net/manual/zh/install.unix.php">中文版</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cd ~/source/php-7.1.5</span><br><span class="line">$./configure --prefix=/usr/local/soft/php71 --with-config-file-path=/usr/local/soft/php71/conf --with-apxs2=/usr/local/soft/httpd24/bin/apxs</span><br><span class="line">$make</span><br><span class="line">$make install</span><br></pre></td></tr></table></figure>
<p>注:如果编译过程中 遇到  “xml2-config not found. Please check your libxml2 installation”等类似的错误<br>请执行”sudo yum install libxml2 libxml2-devel -y”<br>编译过程中会遇到很多warning . 这个可以忽略。不过后面用过相关库会报错。 可以直接yum安装 也可以编译安装.和上面apr类似.也可以 用到了在安装扩展</p>
<h2 id="6-配置"><a href="#6-配置" class="headerlink" title="6. 配置"></a>6. 配置</h2><h3 id="6-1-配置PHP（可选）"><a href="#6-1-配置PHP（可选）" class="headerlink" title="6.1 配置PHP（可选）"></a>6.1 配置PHP（可选）</h3><p>将 source php 文件夹里的配置文件拷贝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$mkdir /usr/local/soft/php71/conf</span><br><span class="line">$cp php.ini-development /usr/local/soft/php71/conf/php.ini</span><br><span class="line">$vim /usr/local/soft/php71/conf/php.ini</span><br></pre></td></tr></table></figure>
<p>定位到 include_path<br>输入/include_pah</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include_path = &quot;.:/usr/local/soft/php71/lib/php&quot;</span><br></pre></td></tr></table></figure>
<p>(Esc :wq)</p>
<h3 id="6-2-配置HTTP"><a href="#6-2-配置HTTP" class="headerlink" title="6.2 配置HTTP"></a>6.2 配置HTTP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$vim /usr/local/soft/httpd24/conf/httpd.conf</span><br></pre></td></tr></table></figure>
<p>整合PHP+HTTPD<br>定位到 LoadModule 附近[随便] (其实第一行 libphp7.so 已经有了)</p>
<p>LoadModule php7_module modules/libphp7.so<br>AddType application/x-httpd-php .php<br>AddType application/x-httpd-php-source .phps 监听端口 (没用80端口，80端口留给ngigx转发. 因为如果服务器有tomcat和httpd共存的话就只能其中一个用80端口)<br>Listen 1024 配置虚拟主机<br>运行用户[xxx 当前登录用户] User xxx<br>Group xxx</p>
<p>打开 Include conf/extra/httpd-vhosts.conf (最前面的#去掉)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$vim /usr/local/soft/httpd24/conf/extra/httpd-vhosts.conf</span><br><span class="line">$mkdir -p /usr/local/soft/web/lesson1</span><br></pre></td></tr></table></figure>
<p>写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:1024&gt;</span><br><span class="line">DocumentRoot /usr/local/soft/web/lesson1</span><br><span class="line">ServerName localhost:1024</span><br><span class="line">DirectoryIndex index.html index.php</span><br><span class="line">&lt;Directory &quot;/usr/local/soft/web/lesson1&quot;&gt;</span><br><span class="line">Options FollowSymLinks</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>


<h2 id="7-启动HTTPD"><a href="#7-启动HTTPD" class="headerlink" title="7. 启动HTTPD"></a>7. 启动HTTPD</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$/usr/local/soft/httpd24/bin/apachectl start</span><br></pre></td></tr></table></figure>
<p>如果出现 “AH00558: httpd: Could not reliably determine the server”s fully qualified domain name, using 127.0.0.1. Set the “ServerName” directive globally to suppress this message”<br>等提示信息 可以直接忽略或者去配置文件 把ServerName写上</p>
<p>通过 <code>ps -ef|grep httpd</code> 可以看服务是否启动成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$vim /usr/local/soft/web/lesson1/index.php</span><br><span class="line">&lt;?php echo &quot;hello jtthink&quot;;</span><br></pre></td></tr></table></figure>

<p>访问 localhost:1024/index.php 即可看到结果.</p>
<h2 id="8-配置-阿里云-安全组设置，开放端口"><a href="#8-配置-阿里云-安全组设置，开放端口" class="headerlink" title="8. 配置 阿里云 安全组设置，开放端口"></a>8. 配置 阿里云 安全组设置，开放端口</h2><p>阿里云设有安全拦截，必须开发端口才可以访问<br><a href="https://bbs.aliyun.com/read/320667.html?spm=0.0.0.0.c7jrks">阿里云文档</a></p>
<p>参考资料：<br><a href="http://www.itzgeek.com/how-tos/linux/centos-how-tos/install-gnome-gui-on-centos-7-rhel-7.html">Install Gnome GUI on CentOS 7 / RHEL 7 - ITzGeek</a><br><a href="http://b.jtthink.com/read.php?tid=195">Centos72下PHP71+Httpd24的 环境搭建（一） </a><br><a href="http://b.jtthink.com/read.php?tid=196">Centos72下PHP71+Httpd24的 环境搭建（二） </a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>apache</tag>
        <tag>centOS</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客搭建、进阶配置指南</title>
    <url>/art/2017/20171008-build-a-blog-with-hexo-on-github/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20171008.jpg"></p>
<blockquote>
<p>作为一个 web 程序员，当然也想有自己的自留地<br>于是就研究起了搭建博客，来记录自己的成长<br>了解之后，发现 github + hexo 是个门槛很低的，效果很好的方式<br>hexo 基于 markdown，意味着不需要关心文章排版，也不需要学习编程<br>github 提供了免费空间、域名以及代码管理的工具，解决了服务器问题</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>2018-12-03 更新 章节 6.13 设置 RSS 订阅源</p>
</blockquote>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-安装-chrome-浏览器，百度下载即可"><a href="#1-1-安装-chrome-浏览器，百度下载即可" class="headerlink" title="1.1 安装 chrome 浏览器，百度下载即可"></a>1.1 安装 chrome 浏览器，百度下载即可</h3><p><img data-src="https://xiawei.cc/images/20171008-download-chrome.png"></p>
<h3 id="1-2-注册一个-Github-账号"><a href="#1-2-注册一个-Github-账号" class="headerlink" title="1.2 注册一个 Github 账号"></a>1.2 注册一个 <a href="https://github.com/join?source=header-home">Github</a> 账号</h3><p>如果看不懂英语，可以点这个小按钮来全文翻译（失败的话可以多试几次，或使用其他翻译软件）</p>
<p><img data-src="https://xiawei.cc/images/20171008-chrome-translate.png"></p>
<h3 id="1-3-创建一个Repo"><a href="#1-3-创建一个Repo" class="headerlink" title="1.3 创建一个Repo"></a>1.3 创建一个Repo</h3><p>登录 Github（初次注册后会自动登录），点击右上角”+”，再点第一行 “新存储库”(New repository)</p>
<p>第一次要求验证邮箱，邮箱里会收到 Github 发来的邮件，点那个最长的链接就ok</p>
<p>存储库名称格式为 yourname.github.io。比如，我个人的 Github 账户用户名是 xiaweiss，所以，我的这个 Repo 的名称就是 xiaweiss.github.io</p>
<h3 id="1-4-本地安装好-git-和-npm"><a href="#1-4-本地安装好-git-和-npm" class="headerlink" title="1.4 本地安装好 git 和 npm"></a>1.4 本地安装好 git 和 npm</h3><p>下载自己系统对应的安装包，安装<br>windows 下载第一行的 msi 类型即可，位数按系统的位数即可，一般选64-bit</p>
<p><a href="https://git-scm.com/downloads">git下载地址</a> | <a href="https://nodejs.org/en/download">node下载地址</a></p>
<p>安装过程中，不用选择，一直点 next下一步即可<br>安装好之后，运行其他系统运行 terminal 命令行工具<br>windows 系统，在桌面或任意文件夹内，右击，运行 git bush here</p>
<p><img data-src="https://xiawei.cc/images/20171008-git-bush-here.png"></p>
<p>(下文的命令行中的命令，每行代表一个命令，行末必须按回车键Enter)</p>
<p>在命令行中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version 回车键Enter</span><br><span class="line">npm --version 回车键Enter</span><br></pre></td></tr></table></figure>
<p>如果看到版本号，则成功。否则重新安装</p>
<h3 id="1-5-安装好-Atom"><a href="#1-5-安装好-Atom" class="headerlink" title="1.5 安装好 Atom"></a>1.5 安装好 Atom</h3><p>进入 <a href="https://atom.io/">atom编辑器 官网</a>，下载安装它</p>
<p>启动 Atom 之后, 点击 Packages 安装插件</p>
<p>请搜索并安装以下 markdown 插件</p>
<p>markdown-writer<br>tool-bar<br>tool-bar-markdown-writer<br>markdown-scroll-sync<br>markdown-pdf</p>
<p>或者也可以使用其他你喜欢的 markdown 文件编辑工具</p>
<h2 id="2-本地搭建站点"><a href="#2-本地搭建站点" class="headerlink" title="2. 本地搭建站点"></a>2. 本地搭建站点</h2><h3 id="2-1-安装-hexo"><a href="#2-1-安装-hexo" class="headerlink" title="2.1 安装 hexo"></a>2.1 安装 hexo</h3><p>在命令行中继续输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm install hexo -g</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="2-2-初始化你的本地站点"><a href="#2-2-初始化你的本地站点" class="headerlink" title="2.2 初始化你的本地站点"></a>2.2 初始化你的本地站点</h3><p>去 Github 把你的 Repo 的 git 地址拷贝出来。<br>我的是 <a href="https://github.com/xiaweiss/xiaweiss.github.io.git">https://github.com/xiaweiss/xiaweiss.github.io.git</a><br>你的是 <a href="https://github.com/yourname/yourname.github.io.git">https://github.com/yourname/yourname.github.io.git</a> （其中，yourname 应该换乘你的 Github 用户名）</p>
<p>然后在 Terminal 面板里输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/Public  (windows中 cd /d)</span><br><span class="line">hexo init yourname.github.io</span><br><span class="line">cd yourname.github.io</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>这些完成之后，你就可以打开浏览器，在地址栏里输入： <code>localhost:4000</code>，在本地先看看网站是什么样子了。</p>
<h2 id="3-本地站点发布到-Github-上"><a href="#3-本地站点发布到-Github-上" class="headerlink" title="3. 本地站点发布到 Github 上"></a>3. 本地站点发布到 Github 上</h2><h3 id="3-1-修改-hexo-配置文件"><a href="#3-1-修改-hexo-配置文件" class="headerlink" title="3.1 修改 hexo 配置文件"></a>3.1 修改 hexo 配置文件</h3><p>关闭命令行，重新打开一个命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d/yourname.github.io</span><br><span class="line">atom . （注意符号点前面有空格）</span><br></pre></td></tr></table></figure>
<p>在 Atom 的左侧面板中，选择 _config.yml 文件，找到 deploy 那一部分（末尾的79行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type:</span><br><span class="line">  (空行)</span><br></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure>
<p>Ctrl+S 保存</p>
<h3 id="3-2-github-生成一个ssh-key配置"><a href="#3-2-github-生成一个ssh-key配置" class="headerlink" title="3.2 github 生成一个ssh-key配置"></a>3.2 github 生成一个ssh-key配置</h3><p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/</a><br>打开命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;your_email@example.com&quot;</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; (替换为你的GitHub电子邮件地址)</span><br></pre></td></tr></table></figure>
<p>接着会出现几次提示，如下图箭头处，直接按回车Enter键即可<br><img data-src="https://xiawei.cc/images/20171008-create-ssh-key.png"></p>
<h3 id="3-3-将ssh-key添加到-Github"><a href="#3-3-将ssh-key添加到-Github" class="headerlink" title="3.3 将ssh-key添加到 Github"></a>3.3 将ssh-key添加到 Github</h3><p>打开Github，点击右上角的头像，再点设置</p>
<p><img data-src="https://xiawei.cc/images/20171008-github-setting.png"></p>
<p>命令行中继续输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>然后可以看到一堆编码，见下图，把红框里的部分复制了。<br><img data-src="https://xiawei.cc/images/20171008-copy-ssh-key.png"></p>
<p>在用户设置侧栏中，单击 SSH and GPG Keys(SSH和GPG密钥)，然后单击右上角绿色的 New SSH key(新的SSH密钥)</p>
<p>然后可以看到这个界面，Title标题随意填。key密钥里，把刚刚复制好的编码粘贴进去，然后点下面 Add SSH key<br><img data-src="https://xiawei.cc/images/20171008-github-paste-ssh-keys.png"></p>
<p>出现这个界面，表示成功了<br><img data-src="https://xiawei.cc/images/20171008-github-add-ssh-key-ok.png"></p>
<p>最后一步，命令行中输入，就可以发布到 Github 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>打开 <a href="https://yourname.github.io/">https://yourname.github.io</a> 就可以看到博客了</p>
<h2 id="4-日常使用"><a href="#4-日常使用" class="headerlink" title="4. 日常使用"></a>4. 日常使用</h2><p>打开命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d/yourname.github.io</span><br><span class="line">atom .</span><br></pre></td></tr></table></figure>
<p>即可启动编辑器，并且打开项目目录</p>
<p><img data-src="https://xiawei.cc/images/20171008-atom-md-view.png"></p>
<p>使用 md 后缀的 markdown 格式，来写文章。语法请参考 <a href="http://www.jianshu.com/p/q81RER">《献给写作者的 Markdown 新手指南》</a></p>
<p>使用 atom 编辑器来 编辑md文件,打开md文件时 ctrl+shift+m 即可看到预览区域</p>
<p>_draft 文件夹用来存没写完的草稿<br>_posts 文件夹用来存要发布出去的文章<br>_images 文件夹用来存文章中的图片</p>
<p>以上文件夹下，直接放文章，不要放子文件夹<br>文件名命名格式推荐 20171008-file-name.md<br>文件名不要使用中文，中文不利于检索文件名</p>
<p>文章顶部 按模板的语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">date: 2017-10-08</span><br><span class="line">tags: 标签</span><br><span class="line">category: 分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>其中 date 是发布日期注意不要使用模板的 <code>&#123; date &#125;</code>写法，这种写法一旦标题改变或者数据文件 db.json 或 /public 丢失，发布日期会改变</p>
<p>多个标签或分类时，这样写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br></pre></td></tr></table></figure>

<p>图片 可以用 <code>![](/images/20171008-image-name.png)</code>语法来引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt; 表示预览区的分界线，主页面只会显示它之前的内容。</span><br></pre></td></tr></table></figure>


<p>写完文章后，本地网站查看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d/yourname.github.io</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>发布到 Github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d/yourname.github.io</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="5-备份本地代码-和-数据"><a href="#5-备份本地代码-和-数据" class="headerlink" title="5. 备份本地代码 和 数据"></a>5. 备份本地代码 和 数据</h2><h3 id="5-1-坚果云备份"><a href="#5-1-坚果云备份" class="headerlink" title="5.1 坚果云备份"></a>5.1 坚果云备份</h3><p>由于Github是开源的，备份到Github，别人容易下载拿走，考虑到私密性，推荐使用 <a href="https://www.jianguoyun.com/">坚果云</a> 来自动备份</p>
<p>找到 yourname.github.io 文件夹右击，选择<code>坚果云</code>，选择<code>同步到个人空间</code>，即可</p>
<p><img data-src="https://xiawei.cc/images/20171008-netstore.png"></p>
<h3 id="5-2-Github-备份"><a href="#5-2-Github-备份" class="headerlink" title="5.2 Github 备份"></a>5.2 Github 备份</h3><p>如果为了不引入其他工具，也可以使用 Github 来备份：</p>
<p>打开命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d/yourname.github.io</span><br><span class="line">git init</span><br><span class="line">git checkout -b source</span><br><span class="line">git add . (注意点前面有空格)</span><br><span class="line">git commit -m &quot;init&quot;</span><br><span class="line">git remote add origin  https://github.com/yourname/yourname.github.io.git</span><br><span class="line">git push -u origin source</span><br></pre></td></tr></table></figure>

<p>每次备份操作，打开命令行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d/yourname.github.io</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;本次备份的提示语&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>误删本地文件夹，从备份的代码恢复整个 yourname.github.io 文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d</span><br><span class="line">git clone https://github.com/yourname/yourname.github.io.git</span><br><span class="line">git checkout source</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>如果是在新的电脑恢复 整个 yourname.github.io 文件夹，<br>需要先重复步骤1 ~ 步骤2，并且其中以下步骤直接跳过，然后再执行上面命令<br>1.2 注册一个 Github 账号<br>1.3 创建一个Repo<br>2.2 初始化你的本地站点</p>
<h2 id="6-进阶优化配置"><a href="#6-进阶优化配置" class="headerlink" title="6. 进阶优化配置"></a>6. 进阶优化配置</h2><p>以下部分非新手向，只写要点，按需食用</p>
<h3 id="6-1-版本控制"><a href="#6-1-版本控制" class="headerlink" title="6.1 版本控制"></a>6.1 版本控制</h3><p>使用 git 来控制版本<br>为方便切换分支，<br>master分支添加 .gitignore 文件<br>master分支、source分支内容统一为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.idea/</span><br></pre></td></tr></table></figure>

<h3 id="6-2-主题更换"><a href="#6-2-主题更换" class="headerlink" title="6.2 主题更换"></a>6.2 主题更换</h3><p>使用 <a href="https://github.com/iissnan/hexo-theme-next">NexT.Pisces</a> 主题为例，<a href="http://theme-next.iissnan.com/">详细中文文档</a></p>
<p>注意当一个repo包含其他repo时，使用命令  <code>git submodule add</code> 来安装并且分开管理，而不是 <code>git clone</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>至于主题配置文件，可以保存一份副本到 themes 文件夹里提交到自己的仓库</p>
<p>注意切换主题后，如果显示不正常，运行 <code>hexo clean</code> 来清理数据<br>特别注意<code>hexo clean</code>同时会清除掉历史文章的发布日期，慎用！</p>
<p>clone 含有子repo 的项目后，子 repo 目录内没有内容，还需要执行下面两个命令来 clone 子repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>

<h3 id="6-3-文章末尾添加评论区"><a href="#6-3-文章末尾添加评论区" class="headerlink" title="6.3 文章末尾添加评论区"></a>6.3 文章末尾添加评论区</h3><p>目前由于国内审核机制，国内服务说不定哪天就关闭了。所以推荐国外的服务，比较稳定。使用国外的服务，需要代理上网访问国外，没有的用户则不显示评论区。</p>
<p><a href="http://www.jianshu.com/p/d68de067ea74">添加Disqus评论</a></p>
<h3 id="6-4-目录序号"><a href="#6-4-目录序号" class="headerlink" title="6.4 目录序号"></a>6.4 目录序号</h3><p>主题会自动给文章的标题和子标题生成目录，并且加上序号<br>如果要自己写序号，不需要主题自带序号，修改主题配置文件 _config.yml 里的 toc 后面的 member 配置为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">156行 number: false</span><br></pre></td></tr></table></figure>

<h3 id="6-5-图片引用"><a href="#6-5-图片引用" class="headerlink" title="6.5 图片引用"></a>6.5 图片引用</h3><p>推荐不使用图床，直接把统一图片存在本地文件夹</p>
<p>目前不支持 atom markdown预览 和 本地网站里同时正常预览图片</p>
<p>建议编辑时使用 <code>![](../images/xxx.png)</code></p>
<p>发布时用atom ctrl+f 统一把 <code>../</code> 替换为 <code>/</code> 即可</p>
<h3 id="6-6-统计"><a href="#6-6-统计" class="headerlink" title="6.6 统计"></a>6.6 统计</h3><p>阅读量统计可以使用 LeanCloud 计数，注意主题配置文件里有两处 LeanCloud，要配置<code>leancloud_visitors</code></p>
<p>或者直接使用 不蒜子统计 即可，可同时实现阅读量统计、PV、UV功能。</p>
<p>个人建议，LeanCloud统计阅读量，不蒜子统计PV、UV</p>
<p><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html">LeanCloud 配置</a><br><a href="http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi">不蒜子配置</a></p>
<h3 id="6-7-修改样式"><a href="#6-7-修改样式" class="headerlink" title="6.7 修改样式"></a>6.7 修改样式</h3><p>next 主题使用 <a href="http://stylus-lang.com/">stylus</a> 预编译样式语言</p>
<p>可以在 <code>themes\next\source\css\_custom\custom.styl</code> 文件里写自己的 stylus 样式</p>
<p>例如：首行缩进，添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p</span><br><span class="line">  text-indent 2em</span><br></pre></td></tr></table></figure>

<h3 id="6-8-显示更新日期"><a href="#6-8-显示更新日期" class="headerlink" title="6.8 显示更新日期"></a>6.8 显示更新日期</h3><p>修改主题配置文件 _config.yml，找到 updated_at,修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updated_at: true</span><br></pre></td></tr></table></figure>
<p>然后就会显示更新的日期了</p>
<p>如果需要手动设置，可以在文章的标签里加入 <code>updated</code>，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用 Hexo 为自己在 Github 上建一个静态 Blog博客 站点</span><br><span class="line">date: 2017-10-08</span><br><span class="line">updated: 2017-11-11</span><br><span class="line">file-title: &#123;&#123; title &#125;&#125;</span><br><span class="line">tags: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="6-9-底部添加备案信息、或者其他文字"><a href="#6-9-底部添加备案信息、或者其他文字" class="headerlink" title="6.9 底部添加备案信息、或者其他文字"></a>6.9 底部添加备案信息、或者其他文字</h3><p>在主题配置文件里找到 custom_text 这行，修改一下即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#custom_text: Hosted by &lt;a target=&quot;_blank&quot; href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;</span><br><span class="line">custom_text: Xiaweiss.com 京ICP备17057895号</span><br></pre></td></tr></table></figure>
<p>或者在主题配置文件里找到 copyright: 这行,修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># If not defined, will be used `author` from Hexo main config.</span><br><span class="line">copyright: &lt;a href=&quot;http://xiaweiss.com&quot;&gt;Xiaweiss.com&lt;/a&gt; 京ICP备17057895号</span><br></pre></td></tr></table></figure>

<h3 id="6-10-设置搜索服务"><a href="#6-10-设置搜索服务" class="headerlink" title="6.10 设置搜索服务"></a>6.10 设置搜索服务</h3><p>使用免费的 local search<br>npm 安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>next 主题配置文件里，修改配置文件<br>top_n_per_article 指正文的搜索结果，显示几条。 -1 代表全部显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 3</span><br></pre></td></tr></table></figure>

<h3 id="6-11-添加分类、标签页"><a href="#6-11-添加分类、标签页" class="headerlink" title="6.11 添加分类、标签页"></a>6.11 添加分类、标签页</h3><p>可以按官方文档设置<br><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2">创建分类页面</a><br><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2">创建标签云页面</a></p>
<p>但以上设置会导致多出2个文件夹，而且以后不会在里面放其他文件，所以我个人推荐这样设置<br>在 source 目录下:<br>新建 文件 categories.md：里面写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>新建 文件 tags.md：里面写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>然后修改主题配置文件，menu设置里的 categories、tags</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories.html || th</span><br><span class="line">  tags: /tags.html || tags</span><br></pre></td></tr></table></figure>

<h3 id="6-12-设置滚动"><a href="#6-12-设置滚动" class="headerlink" title="6.12 设置滚动"></a>6.12 设置滚动</h3><p>主题配置文件里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scroll_to_more: true</span><br></pre></td></tr></table></figure>
<p>表示从主页进去文章后，直接自动滚动到文章中 more 标签的位置，可以看到网址里多了#more<br>如果需要去掉，设置为false即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save_scroll: false</span><br></pre></td></tr></table></figure>
<p>表示在本地存储阅读的进度（滚动到的位置），刷新或再次打开页面时，可以接着读。<br>建议打开这个功能，设置为true即可</p>
<h3 id="6-13-设置-RSS-订阅源"><a href="#6-13-设置-RSS-订阅源" class="headerlink" title="6.13 设置 RSS 订阅源"></a>6.13 设置 RSS 订阅源</h3><p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>
<p>项目配置文件里添加配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># RSS</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: false</span><br><span class="line">  hub:</span><br><span class="line">  order_by: -updated</span><br></pre></td></tr></table></figure>
<p>主题配置文件里找到 rss 配置，设置为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure>
<p>rss 阅读器推荐使用 <a href="https://www.inoreader.com/">inoreader</a></p>
<h2 id="7-界面美化"><a href="#7-界面美化" class="headerlink" title="7. 界面美化"></a>7. 界面美化</h2><h3 id="7-1-右下角-live2d-小人"><a href="#7-1-右下角-live2d-小人" class="headerlink" title="7.1 右下角 live2d 小人"></a>7.1 右下角 live2d 小人</h3><p>中文文档 <a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">EYHN/hexo-helper-live2d</a></p>
<p>下面是我目前旧版2.1.5的使用方式，最新版请参考hexo-helper-live2d 中文文档</p>
<p>旧版配置方式：</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd yourname.github.io</span><br><span class="line">npm install hexo-helper-live2d@2.1.5</span><br></pre></td></tr></table></figure>

<p>在 yourname.github.io 的 hexo 配置文件 <code>_config.yml</code> 里添加配置项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  model: koharu # 模型名称 默认值: z16</span><br><span class="line">  width: 150 # 宽度 默认值: 150</span><br><span class="line">  height: 300 # 高度 默认值: 300</span><br><span class="line">  scaling: 1 # 分辨率缩放倍率 默认值: 2</span><br><span class="line">  opacityDefault: 1 # 初始的透明度 默认值: 1</span><br><span class="line">  #opacityHover: 1 # 鼠标悬浮时的透明度 默认值: 1</span><br><span class="line">  mobileShow: true # 是否在移动设备上显示 默认值: true</span><br><span class="line">  mobileScaling: 0.5 # 移动设备缩放倍率 默认值: 0.5</span><br><span class="line">  position: right # 模型左右侧放置位置 默认值: right</span><br><span class="line">  horizontalOffset: 0 # 元素的水平偏移 默认值: 0</span><br><span class="line">  verticalOffset: -20 # 元素的底部偏移 默认值: -20</span><br><span class="line">  className: live2d # 元素的类名 默认值: live2d</span><br><span class="line">  id: live2dcanvas # 元素的id 默认值: live2dcanvas</span><br></pre></td></tr></table></figure>
<p>我自己使用的是 koharu，如果需要其他的，改为相应的名字即可<br>旧版所有小人请看作者大大博客 <a href="https://huaji8.top/post/live2d-plugin-2.0/">hexo live2d插件 2.0 !</a></p>
<p>接下来，在 <code>next/layout/_layout.swig</code> 文件里，找到 <code>&lt;/body&gt;</code>,在它前面的行添加代码<br>像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; live2d() &#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-配置网站顶部背景颜色、二级标题字色"><a href="#7-2-配置网站顶部背景颜色、二级标题字色" class="headerlink" title="7.2 配置网站顶部背景颜色、二级标题字色"></a>7.2 配置网站顶部背景颜色、二级标题字色</h3><p>参照 6.1，添加配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.headband</span><br><span class="line">  background: #0095EE;</span><br><span class="line">.site-meta</span><br><span class="line">  background: #0095EE;</span><br><span class="line">.site-subtitle</span><br><span class="line">  color: white;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-其他"><a href="#7-3-其他" class="headerlink" title="7.3 其他"></a>7.3 其他</h3><p>界面的优化需要掌握一定的 css 知识，这里不再赘述<br>可以参考 <a href="https://qianling.pw/hexo-optimization/">千灵《Hexo 优化汇总》</a><br>以及我博客源码里 themes 文件夹下文件的的相关注释</p>
<p>概括来说</p>
<ol>
<li>修改预设好的值，在 <code>next/source/css/_variables/custom.styl</code> 添加变量即可</li>
</ol>
<p>例如 <code>base.styl</code> 可以看到代码 <code>$blue = #0684bd</code><br>要把所有预设好的蓝色改为白色，<code>custom.styl</code> 里添加 <code>$red = #fff</code> 即可</p>
<ol start="2">
<li><p>添加或修改 样式，可以在 <code>next/source/css/_custom/custom.styl</code> 写入 css</p>
</li>
<li><p>修改首页，添加 js，修改文字符号等，修改 <code>next/layout/_layout.swig</code> 即可<br>文章页请修改 <code>next/layout/_macro/post.swig</code></p>
</li>
</ol>
<h2 id="8-高级设定"><a href="#8-高级设定" class="headerlink" title="8.高级设定"></a>8.高级设定</h2><h3 id="8-1-next-主题版本更新或回滚"><a href="#8-1-next-主题版本更新或回滚" class="headerlink" title="8.1 next 主题版本更新或回滚"></a>8.1 next 主题版本更新或回滚</h3><p>进入 next 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git fetch</span><br><span class="line">git tag</span><br></pre></td></tr></table></figure>
<p>即可看到当前可用版本列表，使用下面命令即可切换到指定版本，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout v5.1.4</span><br></pre></td></tr></table></figure>

<p>切换过程中会有文件冲突<br>可以切换前执行 git stash，切换后执行 git stash pop，然后修改文件即可</p>
<p>或者使用软链接的方式，把修改的文件放在 next 文件夹外时，只需要修改文件，重新软链接即可</p>
<p>感谢阅读，最后附上<a href="https://github.com/xiaweiss/xiaweiss-site">博客源码</a></p>
<p>参考资料：<br><a href="http://lixiaolai.com/2016/06/22/makecs-build-a-blog-with-hexo-on-github/">李笑来《使用 Hexo 为自己在 Github 上建一个静态 Blog 站点》</a><br><a href="https://qianling.pw/hexo-optimization/">千灵《Hexo 优化汇总》</a><br><a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a><br><a href="http://theme-next.iissnan.com/">NexT 主题文档</a></p>
<blockquote>
<p>图片来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=40872946">https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=40872946</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 入门指南</title>
    <url>/art/2017/20171205-vue-note/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20171205.jpg"></p>
<span id="more"></span>

<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h2><p>注意本笔记使用的版本为当时的最新稳定版</p>
<ul>
<li>Vue 2.x</li>
<li>webpack 2</li>
<li>node 8.9.0</li>
<li>npm 5.6.0</li>
</ul>
<h3 id="1-1-使用到的技术文档"><a href="#1-1-使用到的技术文档" class="headerlink" title="1.1 使用到的技术文档"></a>1.1 使用到的技术文档</h3><ul>
<li><a href="https://nodejs.org/en/">node</a></li>
<li><a href="https://webpack.js.org/configuration/">webpack</a></li>
<li><a href="https://babeljs.io/">babel</a></li>
<li><a href="https://github.com/jantimon/html-webpack-plugin">html-webpack-plugin</a></li>
<li><a href="https://cn.vuejs.org/">vue</a></li>
<li><a href="https://router.vuejs.org/">vue-router</a></li>
<li><a href="https://github.com/axios/axios">axios</a></li>
<li><a href="https://vuex.vuejs.org/">vuex</a></li>
</ul>
<h3 id="1-2-需要安装的相关依赖，未来不一定正确，以官方文档为准"><a href="#1-2-需要安装的相关依赖，未来不一定正确，以官方文档为准" class="headerlink" title="1.2 需要安装的相关依赖，未来不一定正确，以官方文档为准"></a>1.2 需要安装的相关依赖，未来不一定正确，以官方文档为准</h3><p>首先需要安装 node, 然后使用命令 <code>npm install 依赖名称</code> 来安装</p>
<ul>
<li>babel-core</li>
<li>babel-loader</li>
<li>babel-preset-env</li>
<li>babel-preset-stage-2 (使用 <code>import()</code> 时才需要)</li>
<li>css-loader</li>
<li>html-webpack-plugin</li>
<li>style-loader</li>
<li>vue</li>
<li>vue-loader</li>
<li>vue-template-compiler</li>
<li>webpack</li>
<li>webpack-dev-server</li>
<li>vue-router</li>
<li>axios</li>
<li>vuex（选用）</li>
</ul>
<h3 id="1-3-webpack-配置项简介"><a href="#1-3-webpack-配置项简介" class="headerlink" title="1.3 webpack 配置项简介"></a>1.3 webpack 配置项简介</h3><p>项目根目录下，创建 <code>webpack.config.js</code> 配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">//node 内置模块</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 用于在 html 页面里自动插入资源引用的标签</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">//使用 webpack 内置的插件时，需要引入 webpack</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: <span class="string">&#x27;./src/index.js&#x27;</span> <span class="comment">// 入口文件</span></span><br><span class="line">    <span class="comment">// bbb: &#x27;./src/bbb.js&#x27; // 可以多个入口文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(<span class="string">&#x27;./dist&#x27;</span>), <span class="comment">// 输出路径,必须是绝对路径.path.resolve是nodeJS模块方法,把相对路径转为绝对路径</span></span><br><span class="line">    <span class="comment">// 或者使用语法__dirname +&#x27;/dist&#x27; 或  path.join(__dirname,&#x27;dist&#x27;)</span></span><br><span class="line">    <span class="comment">// __dirname 表示当前模块的目录的绝对路径(并非全局变量，等价于path.dirname(__filename))</span></span><br><span class="line">    <span class="comment">// path.join用于处理连接路径时，统一不同系统路径符\和/问题。</span></span><br><span class="line">    <span class="comment">// publicPath: &#x27;/assets/&#x27;, // 发布路径,填写此项后,打包后文件路径不再是相对路径，而是基于服务器根目录的路径，</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/[name].js&#x27;</span>, <span class="comment">// [name] 表示块的名称，输出文件名，可以包含路径</span></span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&#x27;js/[name].js&#x27;</span> <span class="comment">//webpack 分割后的文件，[id] 表示块的编号。[name] 表示块的名称，没有名称时会自动使用编号</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="attr">vue$</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span> <span class="comment">// 默认是运行时构建，这里使用了template，必须用运行+编译时构建</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, exclude: <span class="regexp">/node_modules/</span>, loader: <span class="string">&#x27;babel-loader&#x27;</span> &#125;, <span class="comment">//使用 babel 对 js 转译</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader!vue-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 先使用 vue-loader对 vue 文件转译</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, loader: <span class="string">&#x27;style-loader!css-loader&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">// 输出文件名，可以包含路径</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;src/index.html&#x27;</span>, <span class="comment">// 模板文件位置</span></span><br><span class="line">      <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>, <span class="comment">//插入位置，也可以写 head</span></span><br><span class="line">      <span class="attr">hash</span>: <span class="literal">true</span>, <span class="comment">// 在文件名后面加 hash 值，默认false</span></span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&#x27;index&#x27;</span>] <span class="comment">// 表示插入的块，对应 webpack 入口文件中的 index，不写会插入所有的入口文件</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">//如果 devServer 的配置项里 hot:true ,则需要配置此项</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span> <span class="comment">//打包时排除 vue，vue内容不会被写入js。</span></span><br><span class="line">    <span class="comment">//注意左边的 vue 是模块名，右边的 Vue 是不使用构建工具时的标准变量名,必须是Vue,与import的变量名无关</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&#x27;./dist/&#x27;</span>, <span class="comment">//表示静态资源（非webpack编译产生）文件的目录位置，</span></span><br><span class="line">    <span class="comment">//这个目录的资源会被放到同样当成服务器根目录去</span></span><br><span class="line">    <span class="comment">//遇到同名文件，webpack编译后产生的文件优先级更高</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">//是否压缩</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>, <span class="comment">//端口号</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="comment">//默认是localhost，如果想被外部访问，这样设置</span></span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">//当使用 history 模式路由时，设置为true，404页面会被重定向到主页,</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span> <span class="comment">// 热替换，可以在不刷新页面的情况下更新修改后数据，也可以配置在package.json 的 scripts 里，加 --hot参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>项目根目录下，创建 <code>.babelrc</code> 配置文件</p>
<p><code>babel-preset-env</code> 相当于 es2015 ，es2016 ，es2017 及最新版本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-运行"><a href="#1-4-运行" class="headerlink" title="1.4 运行"></a>1.4 运行</h3><p>package.json 文件里添加配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...其他参数</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用 <code>npm run dev</code> 来启动 server 使用 <code>npm run build</code> 来打包输出</p>
<p>这里的 build 是自己起的。写为 <code>&quot;build&quot;: &quot;webpack -p&quot;</code>, 打包后时压缩代码</p>
<h3 id="1-5-webpack-dev-server-热替换"><a href="#1-5-webpack-dev-server-热替换" class="headerlink" title="1.5 webpack-dev-server 热替换"></a>1.5 webpack-dev-server 热替换</h3><p>热替换指，在不刷新页面的状态下，把修改后的结果更新到页面上</p>
<p>有两种配置方式</p>
<ul>
<li>webpack CLI 方式：</li>
</ul>
<p>package.json 文件里添加配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --hot&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>webpack 配置方式：</li>
</ul>
<p>webpack.config.js 文件里添加配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 其他配置...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 其他配置...</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 其他配置...</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>package.json 文件里依然是 <code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code></p>
<h2 id="2-vue-语法"><a href="#2-vue-语法" class="headerlink" title="2. vue 语法"></a>2. vue 语法</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> param = &#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hello vue&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//注意这里的 data 也可以使用这种语法</span></span><br><span class="line">  <span class="comment">//data() &#123;</span></span><br><span class="line">  <span class="comment">//   return &#123;name:&#x27;hello vue&#x27;&#125;</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Vue(param);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-基本的组件"><a href="#2-2-基本的组件" class="headerlink" title="2.2 基本的组件"></a>2.2 基本的组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-name</span>&gt;</span><span class="tag">&lt;/<span class="name">my-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 这是一个组件</span></span><br><span class="line"><span class="keyword">let</span> meName = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span>, <span class="comment">// 组件的模板，渲染后会替换掉 &lt;my-name&gt;&lt;/my-name&gt;</span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;xiawei&#x27;</span></span><br><span class="line">    &#125;; <span class="comment">// 组件中 data 必须是函数，数据 return 出去，不可以写为 data:&#123;name:&#x27;xiawei&#x27;&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;.container&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;my-name&#x27;</span>: meName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-vue-文件形式的组件"><a href="#2-3-vue-文件形式的组件" class="headerlink" title="2.3 vue 文件形式的组件"></a>2.3 vue 文件形式的组件</h3><p>为了方便，可以使用 vue 文件 来封装组件，可以认为一个 vue 文件是一个组件，子组件继续使用其他 vue 文件 引入。</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> myname <span class="keyword">from</span> <span class="string">&#x27;./components/myname.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;.container&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;my-name&#x27;</span>: myname</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>myname.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>: <span class="string">&#x27;xiawei&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;css&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>template 里，必须用一个 div 或者一个其他标签，包裹住所有的 html 标签</p>
<p>默认 lang=”css” 可以省略，需要使用 sass 时，可以写 lang=”scss” 等</p>
<p>scoped 是 vue 提供的属性 表示这里的样式只能在本组件内生效</p>
<h3 id="2-4-组件通讯"><a href="#2-4-组件通讯" class="headerlink" title="2.4 组件通讯"></a>2.4 组件通讯</h3><h4 id="2-4-1-使用-props-给组件传参"><a href="#2-4-1-使用-props-给组件传参" class="headerlink" title="2.4.1 使用 props 给组件传参"></a>2.4.1 使用 props 给组件传参</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">myname</span> <span class="attr">value</span>=<span class="string">&quot;xiawei&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">myname</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;value&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>:[<span class="string">&#x27;value&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-访问其他组件，获取参数"><a href="#2-4-2-访问其他组件，获取参数" class="headerlink" title="2.4.2 访问其他组件，获取参数"></a>2.4.2 访问其他组件，获取参数</h4><p>可以通过 <code>$parent</code> 访问父组件，<code>$children</code> 访问子组件</p>
<p>user-login 有三个子组件，部分代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user-name</span>&gt;</span><span class="tag">&lt;/<span class="name">user-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user-pass</span>&gt;</span><span class="tag">&lt;/<span class="name">user-pass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user-submit</span>&gt;</span><span class="tag">&lt;/<span class="name">user-submit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时在 user-submit 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- v-on:click=&quot;test&quot; 表示点击事件时，触发 test 函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$parent.$children[<span class="number">0</span>] <span class="comment">//访问 user-name 组件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$parent.$children[<span class="number">1</span>] <span class="comment">//访问 user-pass 组件</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//获取 user-name 组件 data 中 username 的值</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$parent.$children[<span class="number">0</span>].username</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要区分子组件是第几个，并不方便，可以使用 <code>ref</code> 来解决这个问题</p>
<p>相关代码修改为以下即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-name</span> <span class="attr">ref</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user-pass</span> <span class="attr">ref</span>=<span class="string">&quot;upass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-pass</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取 user-name 组件 data 中 username 的值</span></span><br><span class="line"><span class="built_in">this</span>.$parent.$refs.uname.username;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-3-父子组件自定义事件通讯"><a href="#2-4-3-父子组件自定义事件通讯" class="headerlink" title="2.4.3 父子组件自定义事件通讯"></a>2.4.3 父子组件自定义事件通讯</h4><p>父组件 user-login.vue 里，给子组件 user-name 设置自定义事件 <code>updateUserName</code></p>
<p>这个事件是绑定在 user-name 组件上的，在 <code>组件对象 .$listeners</code>里可以查看到，可以用 <code>组件对象 .$emit</code> 来触发</p>
<p>$emit 触发时，参数 1 是事件名，后几个参数可以传给事件对象（类似 jQuery 的trigger 方法）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user-name</span> <span class="attr">ref</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">v-on:updateUserName</span>=<span class="string">&quot;setUserName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> username <span class="keyword">from</span> <span class="string">&#x27;./user/user-name.vue&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">&#x27;user-name&#x27;</span>: username</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setUserName</span>(<span class="params">uname</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.username = uname;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件 user-name.vue，当输入框内容改变，触发 <code>change</code> 事件</p>
<p>然后执行了 <code>$emit</code> 来触发 <code>updateUserName</code>事件，<code>this.username</code> 作为参数传给了<code>updateUserName</code> 事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-on:change</span>=<span class="string">&quot;userNameChange&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">userNameChange</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;updateUserName&#x27;</span>, <span class="built_in">this</span>.username);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-v-if，路由原理"><a href="#2-5-v-if，路由原理" class="headerlink" title="2.5 v-if，路由原理"></a>2.5 v-if，路由原理</h3><p>v-if 主要用于渲染模板，下面代码</p>
<p>当变量 <code>isadmin</code> 为 true 时，只显示 <code>Admin Login</code></p>
<p>反之，只显示<code>User Login</code></p>
<p>注意，程序依据 <code>isadmin == true</code> 的结果来判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isadmin&quot;</span>&gt;</span>Admin Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>User Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 index.js 添加下面代码</p>
<p>当浏览器路径 hash 部分（<code>#</code>号及其后面的部分）变化时，会触发 <code>hashchange</code> 事件</p>
<p>判断 hash 的值，各种值走自己的业务逻辑，就可以切换页面、改变数据，这就是路由原理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.location.hash === <span class="string">&#x27;#admin&#x27;</span>) &#123;</span><br><span class="line">    myvue.$children[<span class="number">0</span>].$data.isadmin = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    myvue.$children[<span class="number">0</span>].$data.isadmin = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>相关需要掌握的还有 <code>v-for</code>，参见<a href="https://cn.vuejs.org/v2/guide/list.html#%E7%94%A8v-for%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%AF%B9%E5%BA%94%E4%B8%BA%E4%B8%80%E7%BB%84%E5%85%83%E7%B4%A0">官方文档</a></p>
<h3 id="2-6-计算属性-computed"><a href="#2-6-计算属性-computed" class="headerlink" title="2.6 计算属性 computed"></a>2.6 计算属性 computed</h3><p>计算属性和 data 里的普通属性调用时相同的，但定义时不同</p>
<p>计算属性使用函数定义，return 的值，就是计算属性的值</p>
<p>当计算属性内的其他变量的值发生变化时，函数就会执行，运算得到新的值</p>
<p>所以计算属性的值是依赖其他变量的，它没有初始值，不可以在 data 里声明</p>
<p>下面的例子，通过计算属性比对输入的值来筛选 <code>fav.class2</code></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter 数组方法</a> 返回通过筛选条件的新数组，当 <code>return true</code> 时符合条件被选入。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">indexOf 字符串方法</a> 返回符合条件的字符串序号，如果找不到时，会返回数字 <code>-1</code>，可以用来匹配字符串类似的方法，还有 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">indexOf 数组方法</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputText&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">          type 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">          type 2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;fav in getFavs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; fav.class1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; fav.class2 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">favs</span>: [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">class1</span>: <span class="string">&#x27;web&#x27;</span>, <span class="attr">class2</span>: <span class="string">&#x27;js&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">class1</span>: <span class="string">&#x27;pro&#x27;</span>, <span class="attr">class2</span>: <span class="string">&#x27;java&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">      <span class="attr">inputText</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">isShow</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> !(<span class="built_in">this</span>.inputText == <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getFavs</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.favs.filter(<span class="function"><span class="params">abc</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> abc.class2.indexOf(<span class="built_in">this</span>.inputText) &gt;= <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6-1-计算属性配合过滤方法"><a href="#2-6-1-计算属性配合过滤方法" class="headerlink" title="2.6.1 计算属性配合过滤方法"></a>2.6.1 计算属性配合过滤方法</h4><p>vue 2.x 的<a href="https://cn.vuejs.org/v2/guide/filters.html">过滤器方法</a>，与 vue 1.x 语法不同，并不适合和 <code>v-for</code> 配合使用，计算属性配合过滤方法来实现。</p>
<p>上节的例子，更复杂一点，数组的情况 ( 和上面重复的部分没写出来，完整代码请查看github)</p>
<p><code>getFavs</code> 决定展示第几条数据，<code>filterClass2</code> 负责对展示出来的数据筛选</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;fav in getFavs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; fav.class1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-for</span>=<span class="string">&quot;code in filterClass2(fav.class2)&quot;</span>&gt;</span>&#123;&#123; code &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">favs</span>: [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">class1</span>: <span class="string">&#x27;web&#x27;</span>, <span class="attr">class2</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;jssdk&#x27;</span>] &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">class1</span>: <span class="string">&#x27;pro&#x27;</span>, <span class="attr">class2</span>: [<span class="string">&#x27;java&#x27;</span>] &#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">filterClass2</span>(<span class="params">class2</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> class2.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v.indexOf(<span class="built_in">this</span>.inputText) &gt;= <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getFavs</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.favs.filter(<span class="function"><span class="params">abc</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> abc.class2.filter(<span class="function"><span class="params">code</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> code.indexOf(<span class="built_in">this</span>.inputText) &gt;= <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        &#125;).length &gt; <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-7-路由"><a href="#2-7-路由" class="headerlink" title="2.7 路由"></a>2.7 路由</h3><h4 id="2-7-1-路由的基本使用"><a href="#2-7-1-路由的基本使用" class="headerlink" title="2.7.1 路由的基本使用"></a>2.7.1 路由的基本使用</h4><p>首先 npm 安装依赖官方的路由插件 <code>vue-router</code></p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">page-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">page-nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>; <span class="comment">// 引入插件</span></span><br><span class="line">Vue.use(VueRouter); <span class="comment">// 使用插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pagenav <span class="keyword">from</span> <span class="string">&#x27;./components/page-nav.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> newslist <span class="keyword">from</span> <span class="string">&#x27;./components/news-list.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> userlogin <span class="keyword">from</span> <span class="string">&#x27;./components/user-login.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routerConfig = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/news&#x27;</span>, <span class="attr">component</span>: newslist &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: userlogin &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册公共组件（也可以像原先注册子组件的方式来做）</span></span><br><span class="line">Vue.component(<span class="string">&#x27;page-nav&#x27;</span>, pagenav);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myvue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;.container&#x27;</span>,</span><br><span class="line">  <span class="attr">router</span>: routerConfig</span><br><span class="line">  <span class="comment">// 路由中引入过子组件了，所以此处不需要再引入子组件</span></span><br><span class="line">  <span class="comment">// components: &#123;</span></span><br><span class="line">  <span class="comment">//   &#x27;page-nav&#x27;: pagenav,</span></span><br><span class="line">  <span class="comment">//   &#x27;user-login&#x27;: userlogin</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>page-nav.vue 的部分代码</p>
<p>推荐使用 <code>router-link</code> 语法作为切换按钮，它默认会渲染成 <code>a</code> 标签也可以使用 a 标签来做</p>
<p>当某个 <code>router-link</code> 被点击选中时，vue 会给它的 html 标签添加上 class <code>router-link-active</code></p>
<p>可以通过给 <code>.router-link-active</code>写 css 样式， 来给选中的 <code>router-link</code> 添加样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-7-2-axios-的基本使用"><a href="#2-7-2-axios-的基本使用" class="headerlink" title="2.7.2 axios 的基本使用"></a>2.7.2 axios 的基本使用</h4><p>引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>如需全局引入，可以再加上下面这句，组件内调用时使用 <code>this.$axios</code> 即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure>

<p>get 请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get(<span class="string">&#x27;http://localhost:8000/test.php&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    alert(response.data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>post 请求参数 axios 默认转为 json 格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(<span class="string">&#x27;http://localhost:8000/test.php&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;xiawei&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    alert(response.data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>键值对方式（php 用 <code>$_POST</code> 可以取到值）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;http://localhost:8000/test.php&#x27;</span>, <span class="string">&#x27;name=xiawei&amp;age=20&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>也可以使用 node 内置模块来转换格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> querystring <span class="keyword">from</span> <span class="string">&#x27;querystring&#x27;</span>;</span><br><span class="line">axios.post(</span><br><span class="line">  <span class="string">&#x27;http://localhost:8000/test.php&#x27;</span>,</span><br><span class="line">  querystring.stringifyname(&#123; <span class="attr">name</span>: <span class="string">&#x27;xiawei&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>这部分的 php 代码，是放置在项目根目录的 test.php 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">//指定允许其他域名访问</span></span><br><span class="line">  header(<span class="string">&#x27;Access-Control-Allow-Origin:*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//响应类型</span></span><br><span class="line">  header(<span class="string">&#x27;Access-Control-Allow-Methods:GET,POST,PUT&#x27;</span>);</span><br><span class="line">  header(<span class="string">&#x27;Access-Control-Allow-Headers:x-requested-with,content-type&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);<span class="comment">//显示接收到的原始数据</span></span><br><span class="line">  var_export(<span class="variable">$_POST</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;hello php&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>Mac 内置了 php，直接启动 php 内置服务：到项目根目录下，Terminal 里执行下面命令即可</p>
<p>windows 下载 php 后，把 php 目录添加到系统环境变量 PATH 里后，同样执行下面命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -S 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<h4 id="2-7-3-动态加载新闻详细页"><a href="#2-7-3-动态加载新闻详细页" class="headerlink" title="2.7.3 动态加载新闻详细页"></a>2.7.3 动态加载新闻详细页</h4><p>在新闻列表页，点击标题跳转到新闻详细页，动态加载新闻内容</p>
<p>index.js 部分代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line"></span><br><span class="line">const routerConfig = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#x27;/&#x27;, component: newslist &#125;,// 设置首页</span><br><span class="line">    &#123; path: &#x27;/news&#x27;, component: newslist, name: &#x27;newslist&#x27; &#125;,// 可以给路由设置别名 name</span><br><span class="line">    &#123; path: &#x27;/news/:newsid&#x27;, component: newsdetail, name: &#x27;newsdetail&#x27; &#125;,// 如果需要参数，使用冒号的来做占位符</span><br><span class="line">    &#123; path: &#x27;/login&#x27;, component: userlogin, name: &#x27;userlogin&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>new-list.vue 部分代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;news in newslist&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;newsdetail&#x27;, params: &#123;newsid: news.newsid&#125; &#125;&quot;</span>&gt;</span>&#123;&#123;news.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;news.pubtime&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的 newsdetail 以及 params 里左边的 newsid 是和路由定义时的相关参数对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;news.desc&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>news-detail.vue 部分代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123; newstTitle &#125;&#125; <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123; newsDate &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; newsContent &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 生命周期，组件被创建时执行</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$axios</span></span><br><span class="line"><span class="javascript">      .get(<span class="string">&#x27;http://localhost:8000/news.php?newsid=&#x27;</span>+ <span class="built_in">this</span>.$route.params.newsid)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 可以通过全局变量 $route.params 来访问路由里的变量获取到新闻编号101</span></span></span><br><span class="line"><span class="javascript">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.newstTitle = response.data.title;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.newsDate = response.data.pubtime;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.newsContent = response.data.desc;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过全局变量 $route 来访问路由里的各种数据</p>
<p>例如 <code>$route.params.newsid</code> 可以获得路由占位符 <code>:newsid</code> 处的新闻编号值 <code>101</code></p>
<h3 id="2-8-异步加载和-webpack-代码分割"><a href="#2-8-异步加载和-webpack-代码分割" class="headerlink" title="2.8 异步加载和 webpack 代码分割"></a>2.8 异步加载和 webpack 代码分割</h3><p>当项目比较大的时候，可以使用异步加载组件的方式来按需加载，而不是一次性加载全部组件。</p>
<p>还可以配合 webpack 代码分割功能，把打包后的 js，分割成多个 js 文件，做到按需引用。</p>
<p>之前的引入组件的方式是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> userlogin <span class="keyword">from</span> <span class="string">&#x27;./components/user-login.vue&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用 vue 异步加载的方式引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userlogin = <span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="built_in">require</span>(<span class="string">&#x27;./components/user-login.vue&#x27;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用 ES2015 语法，并且简化参数名，可以写为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userlogin = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  r(<span class="built_in">require</span>(<span class="string">&#x27;./components/user-login.vue&#x27;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结合 webpack 代码分割功能后</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userlogin = <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    r(<span class="built_in">require</span>(<span class="string">&#x27;./components/user-login.vue&#x27;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果需要把某几个组件打包为一组，给它们的 <code>require.ensure()</code> (<a href="https://webpack.github.io/docs/code-splitting.html">文档1</a>、<a href="https://webpack.js.org/api/module-methods/#require-ensure">文档2</a>)添加最后一个参数(例如<code>&#39;aaa&#39;</code>),且值相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  r(<span class="built_in">require</span>(<span class="string">&#x27;./components/user-login.vue&#x27;</span>));</span><br><span class="line">&#125;,<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>也可以使用 webpack + ES2015 语法来进行代码分割</p>
<p><code>import()</code> (<a href="https://webpack.js.org/api/module-methods/#import">文档</a>) 是 ES2015 草案的语法，所以使用时需要 babel 转译</p>
<p>babel 配置里需要添加草案语法的转译 presets <code>stage-2</code> ，npm 安装依赖 <code>babel-preset-stage-2</code></p>
<p><code>.babel</code> 文件，注意配置的数组里，presets 解析的顺序是从右到左的，先执行 <code>stage-2</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;env&quot;</span>, <span class="string">&quot;stage-2&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userlogin = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/user-login.vue&#x27;</span>);</span><br><span class="line"><span class="comment">// 也就是 function() &#123; return import(&#x27;./components/user-login.vue&#x27;)&#125;;</span></span><br></pre></td></tr></table></figure>

<p>把某几个文件打包为一组时，使用这个语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userlogin = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;aaa&quot; */</span><span class="string">&#x27;./components/user-login.vue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>最后分割后的文件名，可以在 webpack 配置里 output 配置项里添加 <code>chunkFilename</code> 配置项来控制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;js/[name].js&#x27;</span>, <span class="comment">// [name] 表示块的名称，输出文件名，可以包含路径</span></span><br><span class="line">  <span class="attr">chunkFilename</span>: <span class="string">&#x27;js/[name].js&#x27;</span></span><br><span class="line">  <span class="comment">//webpack 分割后的文件，[id] 表示块的编号。[name] 表示块的名称，没有名称时会自动使用编号</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="2-9-开发插件"><a href="#2-9-开发插件" class="headerlink" title="2.9 开发插件"></a>2.9 开发插件</h3><p>有时现有的插件并不能满足自己的业务需求，这时需要自己开发插件</p>
<h4 id="2-9-1-自定义指令"><a href="#2-9-1-自定义指令" class="headerlink" title="2.9.1 自定义指令"></a>2.9.1 自定义指令</h4><p>在 src 文件夹下新建一个 js 文件，比如命名为 <code>plugin.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加实例方法</span></span><br><span class="line">    Vue.prototype.$name = <span class="string">&#x27;xiawei&#x27;</span>;<span class="comment">// 可以在组件内使用 this.$name 取到值 &#x27;xiawei&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里添加时方法来检测用户名是否合法，6~20位合法，否则显示提示</span></span><br><span class="line">    Vue.prototype.checkUserName = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/\w&#123;6,20&#125;/</span>.test(value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 可以在组件内使用 this.checkUserName(’‘’)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加全局自定义指令 v-uname</span></span><br><span class="line">    Vue.directive(<span class="string">&#x27;uname&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">bind</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;begin&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">update</span>(<span class="params">el, binding, vnode</span>)</span> &#123;</span><br><span class="line">        vnode.context[binding.expression] = !<span class="regexp">/\w&#123;6,20&#125;/</span>.test(el.value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>directive</code> (<a href="https://cn.vuejs.org/v2/guide/custom-directive.html">文档</a>) 里的生命周期里的三个参数：</p>
<ul>
<li>el 参数表示指令所绑定的元素，可以用来直接操作 dom</li>
<li>binding 参数表示绑定对象，binding.expression 取到传入的表达式，binding.value 可以取到表达式的值<br>这里的表达式也可以是函数名，取到的值是函数体，binding.oldValue</li>
<li>vnode 参数表示 Vue 编译生成的虚拟节点</li>
</ul>
<p>关于<a href="https://cn.vuejs.org/v2/guide/plugins.html">官方文档</a>里，添加全局方法或属性 <code>Vue.myGlobalMethod</code> 和添加实例方法和属性 <code>Vue.prototype.$myMethod</code> 二者区别</p>
<p>全局方法或属性使用 <code>Vue.名称</code> 来调用，而实例方法和属性使用 <code>(实例化后的 Vue 对象).名称</code> 来调用，也就是组件内的常见 <code>this.名称</code> 来调用，即使看起来名称一样的<code>Vue.aaa</code>和<code>Vue.prototype.aaa</code>也是两个不同的变量</p>
<p>具体可以参见这篇文章：<a href="http://www.jianshu.com/p/bedefecffa22">js里面的实例方法和静态方法</a></p>
<p>index.js 内加载插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plugin <span class="keyword">from</span> <span class="string">&#x27;./plugin.js&#x27;</span>;</span><br><span class="line">Vue.use(plugin);</span><br></pre></td></tr></table></figure>

<p>user-name.vue 添加 <code>v-uname</code> 和 label 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-uname</span>=<span class="string">&quot;showErrorLabel&quot;</span> <span class="attr">v-on:change</span>=<span class="string">&quot;userNameChange&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">v-if</span>=<span class="string">&quot;showErrorLabel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;label label-danger&quot;</span>&gt;</span>Please check your username and try again<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-9-2-手动挂载子组件"><a href="#2-9-2-手动挂载子组件" class="headerlink" title="2.9.2 手动挂载子组件"></a>2.9.2 手动挂载子组件</h4><p>上面只是控制变量，并不是很方便，可以通过插件动态插入移除提示框</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建变量，定义初始值</span></span><br><span class="line">    Vue.errorLabel = <span class="literal">null</span>;</span><br><span class="line">    Vue.hasErrorLabel = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 这个全局变量来标记是否插入了 label，给初始值时必须放在 update 外面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加全局自定义指令 v-uname</span></span><br><span class="line">    Vue.directive(<span class="string">&#x27;uname&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">bind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> error = Vue.extend(&#123;</span><br><span class="line">          <span class="attr">template</span>:</span><br><span class="line">            <span class="string">&#x27;&lt;label class=&quot;label label-danger&quot;&gt;Please check your username and try again&lt;/label&gt;&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Vue.errorLabel = (<span class="keyword">new</span> error()).$mount().$el;</span><br><span class="line">        <span class="comment">// $mount() 方法不填参数时，表示把 vm 实例对象变成一个可以挂载的状态，这时就可以访问到 $el 获取到元素了</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">update</span>(<span class="params">el, binding, vnode</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里每次 update 是从组建原始的状态 update 的，所以不会重复插入多个</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\w&#123;6,20&#125;/</span>.test(el.value)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (Vue.hasErrorLabel) &#123;</span><br><span class="line">            el.parentNode.removeChild(Vue.errorLabel);</span><br><span class="line">            Vue.hasErrorLabel = !Vue.hasErrorLabel;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!Vue.hasErrorLabel) &#123;</span><br><span class="line">            el.parentNode.appendChild(Vue.errorLabel);</span><br><span class="line">            Vue.hasErrorLabel = !Vue.hasErrorLabel;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>user-name.vue 组件里，这时不需要写 label 元素，只需要写入 <code>v-uname</code> 即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-uname</span> <span class="attr">v-on:change</span>=<span class="string">&quot;userNameChange&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-9-3-插件里包含子组件"><a href="#2-9-3-插件里包含子组件" class="headerlink" title="2.9.3 插件里包含子组件"></a>2.9.3 插件里包含子组件</h4><p>上一小节的代码，当有多个 input 元素时，就会出现其他元素显示不正常的情况，原因是多个标签共用了同一个 <code>Vue.hasErrorLabel</code></p>
<p>所以当插件不仅仅处理数据时，还需要独立的处理 dom 元素时，使用子组件的方式更加合理，它们是互相独立的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span> &#123;</span><br><span class="line">    Vue.component(<span class="string">&#x27;p-username&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;input class=&quot;form-control&quot; type=&quot;text&quot; v-model=&quot;textValue&quot; /&gt;</span></span><br><span class="line"><span class="string">          &lt;label class=&quot;label label-danger&quot; v-if=&quot;showErrorLabel&quot;&gt;Please check your username and try again&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">        <span class="comment">// 这里使用了 ES2015 的模板字符串语法</span></span><br><span class="line">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">textValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">showErrorLabel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> !(<span class="regexp">/\w&#123;6,20&#125;/</span>.test(<span class="built_in">this</span>.textValue) || <span class="built_in">this</span>.textValue == <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中，为了方便 template 里使用了 ES2015 的模板字符串语法（<a href="http://es6.ruanyifeng.com/#docs/string#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2">参考文档</a>）</p>
<p>user-name.vue 文件（不需要写 input 元素)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p-username</span>&gt;</span><span class="tag">&lt;/<span class="name">p-username</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-10-全局状态管理-vuex"><a href="#2-10-全局状态管理-vuex" class="headerlink" title="2.10 全局状态管理 vuex"></a>2.10 全局状态管理 vuex</h3><p>应遵循以下规则</p>
<ul>
<li>应用级的状态集中放在 store 中</li>
<li>计算属性使用 getters</li>
<li>改变状态的方式是提交 mutations，这是个同步的事务</li>
<li>异步逻辑应该封装在 action 中</li>
</ul>
<p>也即是与组件的概念相对应的<br>store -&gt; data<br>getters -&gt; computed<br>mutations/actions -&gt; methods</p>
<h4 id="2-10-1-vuex-基本使用"><a href="#2-10-1-vuex-基本使用" class="headerlink" title="2.10.1 vuex 基本使用"></a>2.10.1 vuex 基本使用</h4><p>npm 安装依赖 vuex</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vuex_store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user_name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">showUserName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      alert(state.user_name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>赋值：user-name.vue 组件中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;news in $store.state.newslist&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.state.user_name = <span class="built_in">this</span>.username;</span><br></pre></td></tr></table></figure>

<p>触发：user-submit.vue 组件中使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;showUserName&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>即可完成简单的输入用户名，点提交按钮后 alert 出用户名</p>
<h4 id="2-10-2-vuex-计算属性"><a href="#2-10-2-vuex-计算属性" class="headerlink" title="2.10.2 vuex 计算属性"></a>2.10.2 vuex 计算属性</h4><p>vuex 里的计算属性使用的是 <code>getters</code>，用法和 组件里的计算属性 <code>computed</code> 类似，只是被触发的时机不同</p>
<p>从数据里展示没有删除的新闻展示</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vuex_store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user_name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">newslist</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">showUserName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      alert(state.user_name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">getNews</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.newslist.filter(<span class="function"><span class="params">news</span> =&gt;</span> !news.isdeleted);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>news-list.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;news in $store.getters.getNews&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$store.state.newslist.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$axios.get(<span class="string">&#x27;http://localhost:8000/news.php&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$store.state.newslist = response.data;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-10-3-actions"><a href="#2-10-3-actions" class="headerlink" title="2.10.3 actions"></a>2.10.3 actions</h4><p>mutations 是同步执行的，里面不能放异步执行的东西<br>actions 里放异步执行的，异步执行完后，去手动触发 mutations</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    increment (context,param) &#123;</span><br><span class="line">      <span class="comment">// 异步业务 param -&gt; param2</span></span><br><span class="line">      context.commit(<span class="string">&#x27;increment&#x27;</span>,param2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件内触发</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;increment&#x27;</span>,param);</span><br></pre></td></tr></table></figure>

<h4 id="2-10-4-把业务按模块分类"><a href="#2-10-4-把业务按模块分类" class="headerlink" title="2.10.4 把业务按模块分类"></a>2.10.4 把业务按模块分类</h4><p>之前写的 index.js 是这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vuex_store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user_name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">newslist</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">showUserName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      alert(state.user_name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">getNews</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.newslist.filter(<span class="function"><span class="params">news</span> =&gt;</span> !news.isdeleted);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>按模块分离后</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> news_module <span class="keyword">from</span> <span class="string">&#x27;./store/news.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> users_module <span class="keyword">from</span> <span class="string">&#x27;./store/users.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vuex_store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">news</span>: news_module,</span><br><span class="line">    <span class="attr">users</span>: users_module</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>news.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">newslist</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">getNews</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.newslist.filter(<span class="function"><span class="params">news</span> =&gt;</span> !news.isdeleted);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>users.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user_name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">showUserName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      alert(state.user_name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分离后，注意相关模块里的 <code>this.$store.state</code></p>
<p>按业务模块名分别改为 <code>this.$store.state.news</code>、<code>this.$store.state.users</code></p>
<p>注意不同业务模块里，getters 里函数重名了会报错， mutations 里函数重名了会两边都执行</p>
<blockquote>
<p>图片来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=63737968">https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=63737968</a><br>推荐课程：<a href="http://www.jtthink.com/course/40">VUE.JS+PHP 前后端分离实战视频电商网站</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>萧秋水《进阶》：关于成长的思考</title>
    <url>/art/2017/20171210-book-%E8%90%A7%E7%A7%8B%E6%B0%B4-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20171210.png"></p>
<blockquote>
<p>前不久看到 <code>秋叶大叔</code> 公众号推送，入手了这本标题有点鸡汤，但并不鸡汤的书<br>作为读完书的成果，来写我的第一篇书评，如有纰漏，请轻拍指正，谢啦~</p>
</blockquote>
<span id="more"></span>

<p><a href="https://www.douban.com/people/qsxiao/">萧秋水</a>是一位立足于知识管理，从事咨询的自由职业者。<a href="https://book.douban.com/subject/27135370/">《进阶》</a>这本书的精华用一句话来说，就是封面上写道的</p>
<blockquote>
<p>不断升级的秘诀： 掌控时间，调节情绪，完善知识体系，完成蜕变。</p>
</blockquote>
<p>整本书从围绕秘诀，从解决问题的能力、对待个人生活的态度、学习方法、人际关系、接受适应能力这五个方面入手。通过分享自己感悟的方式，来谈自己的想法，从而启发读者的思考。书里的每篇文章，并没有循规蹈矩地论点123，就像一个朋友在谈她的生活、看法，然后自己在倾听中得到自己结论和启发。</p>
<p>作为一本讲道理的书，行文的随性给了读者一种慢下来的感觉。本书随性到没有序和拔，建设性意见散落在文章各处。各个章节虽然各有侧重，但却是相辅相成，不可分离。整本书看似散落，其实有着逻辑主线，层层递进时，又不失各篇文章的独立性。</p>
<p>成长首先是要不焦虑，拿出勇气，明确目标。这些都需要独立思考，和以自身实力为根基的自信。而做到这些，需要关注自己，考虑他人意见，但不盲从。</p>
<p>接下来，成长是为了得到更好的生活。那么就不应该为了未来的生活而放弃现在。珍惜好当下，未来会变得更加美好。而这一切生活，都是自己的，所以过好自己想要的生活，就不要被他人左右。积累的能力是独立的强大后盾。而且好的心情也会带来好运。</p>
<p>那么就开始学习吧。学习知识的方法，书中提出3个核心：</p>
<ul>
<li>适合自己的，才是最好的</li>
<li>认清学习的主体</li>
<li>合理用人，别把人往死里用</li>
</ul>
<p>当然学到知识，还有另一种途径，那就是自己思考和总结，平时多思考解决问题的办法，重要的事情要有预案。</p>
<p>至于怎么才算真正学到了呢，那就是必须用输出成果来验证。不功利，多付出，多考虑带给他人的价值。</p>
<p>对于知识的输出和应用，萧秋水给出了精辟的类比：</p>
<blockquote>
<p>输出，就是看到了一个菜谱，自己抄了一遍，或者分享给他人。<br>应用，就是照着菜谱做了一道菜。<br>知识不是一道菜，不是别人端上来，吃了就饱了。</p>
</blockquote>
<p>学习篇的最后，书中介绍了筛选信息的方法：较强目的性、了解局部、清醒觉知（即专注目标）</p>
<br>

<p>最后两章介绍了时间管理。本质上来说，时间的流逝是客观存在、不可控制的，所以能够管理的其实是时间的投入，也就是精力。时间管理用一个词来总结就是“专注”，用一句话总结就是：减少不必要的投入，避免把时间浪费在无意义的人和事。</p>
<p>重要的是，清醒意识到 “时间精力有限”</p>
<p>对外：给人际关系做减法</p>
<ul>
<li>由情绪化走向理性化</li>
<li>并不需要时时顾及他人感受</li>
<li>对于某些关系，需要做切割</li>
<li>没事别乱指导别人的人生（不要瞎操心）</li>
<li>站在成长的角度，不见得非要合群</li>
</ul>
<p>对内：学会放眼现在和未来</p>
<ul>
<li>我们没有那么多时间陷溺在过去</li>
<li>对于无能为力的事，“大不了”就好</li>
<li>真正的成长始于学会放手</li>
<li>不要为了未来，总是牺牲现在</li>
</ul>
<p>其中这几句写的很好，值得细细品味：</p>
<ul>
<li>关于人脉管理：</li>
</ul>
<blockquote>
<p>人脉管理的核心，是自己的能力，如果连这个能力都不保证，就算看上去拥有很多人脉，也可能是虚假的。<br>人脉不是不重要，但要选择。优秀的人会懂得尊重你的时间和习惯，相处中不会有太多麻烦。</p>
</blockquote>
<ul>
<li>关于情绪管理：</li>
</ul>
<blockquote>
<p>引发情绪失控的，普遍都是“自己觉得是大事，别人看来是小事”<br>人经历的事多了，渐渐就会懂得，很多事都是小事，不值得动用情绪。很多事无能为力，也不值得动用情绪。<br>情绪管理就是：站得高了，见得多了，也就容易忽略琐屑小事，抓大，放小。</p>
</blockquote>
<ul>
<li>关于沟通：</li>
</ul>
<blockquote>
<p>沟通，往往是基于需要，往往是在感觉到不满、愤怒的时候。此时往往会有情绪，所以注意，口吻不要含有挖苦、讽刺、指责，而要采取理性、克制的态度。要冷静，要清楚和明确地描述自己为什么不开心，然后一起寻找解决方案。</p>
</blockquote>
<blockquote>
<p>真诚不见得是好事。很多人是以真诚为名，行伤害之实。</p>
</blockquote>
<blockquote>
<p>如果不愿意赞美，至少可以不说。<br>说了，别人也有不听、不照做的权利。</p>
</blockquote>
<blockquote>
<p>弄不清楚该不该说话、怎么说话的时候，不说也许更好。</p>
</blockquote>
<ul>
<li>关于相处：</li>
</ul>
<blockquote>
<p>成年后尤其是工作后，和家庭保持一定的距离。<br>爱父母家人，但不要被操纵。不啃老，用自己的能力赚钱，坚定自我的信念，明白想要的生活。可以咨询父母的意见，但不接受不符合自己目标和三观的指点。对婆家也是如此。</p>
</blockquote>
<blockquote>
<p>和爱人之间也是。如果爱人不喜欢逛街，不要勉强，一如爱人喜欢看球，不用勉强相陪。各自有各自的喜好，分开去做。也有共同的喜好，一起去做，共同交流。</p>
</blockquote>
<p>看过赛车动画《头文字D》的人都知道，把车开快，最重要的是学会踩刹车。</p>
<p>书中最后一章也做了类似的解读，作为书评结语甚好：</p>
<blockquote>
<p>超越自己，并非指全力以赴地拼搏，不管不顾地燃烧自己，而是奋斗有度、享受及时。克服自己对“成功”的渴望，不为遥远的未来的安逸而牺牲当下，好好爱惜自己，尽情体验更丰富盛大的生活，深入生命的肌理。</p>
</blockquote>
<hr>
<p>最后摘录书中我喜欢的一些句子：</p>
<blockquote>
<p>活在世间，我们最应守护的人，应当是自我。拥有了这个能力，才可以兼济他人。失去自我固然可以成全他人，但失去自我的人，其实并不能称为“独立的”人，只是一个附庸罢了。</p>
</blockquote>
<blockquote>
<p>一个强大的人。并不会因为守护自我而失去别人的保护。在愿意保护他（她）的人心中，他（她）是值得的，一味示弱反而存在危险。</p>
</blockquote>
<blockquote>
<p>不管是诗与远方，还是眼前的生活，如果愿意把我好每一个瞬间，如果多谢创意、多些主动制造的快乐，一切就会变得不一样。</p>
</blockquote>
<blockquote>
<p>现代社会的生存法则，需要强壮、强大，需要对坏人恶事的深入了解，有时，需要适度的强硬。</p>
</blockquote>
<blockquote>
<p>很多人之所以内心不够强大，是因为太急于求成。真正强大的内心，首先要懂得区分青红皂白、是非曲直，有自己的独立思考、独立人格，不附庸于任何的人事物，宁愿膝盖被打折，也不会主动跪下去。他们不会盲从别人的意见，也不接受指导人生的各种提议。</p>
</blockquote>
<blockquote>
<p>去爱人们，去付出，不要只是索取，也不要拥有了爱而不懂感恩。</p>
</blockquote>
<blockquote>
<p>减少不必要的形式上的学习，专注于吸收和转化，会体现在行动上。</p>
</blockquote>
<blockquote>
<p>强大的人，不需要（测试），因为并不需要所有人的认可作为证明，有些人就算不是天天联络也不会失去，有些人，沟通多了、了解多了反而产生裂痕。</p>
</blockquote>
<blockquote>
<p>唯有独立（经济独立、生活独立、精神独立）的人才懂得制造快乐、拥有自内而外的幸福。<br>唯有自己快乐的人，才会带给他人快乐，才会懂得照顾自己，也兼济他人。</p>
</blockquote>
<blockquote>
<p>世界可以慌忙，我们却要不断探索出自己的节奏。不要被人潮裹挟着前进，不要忽略了自己内心的声音，不要淹没了快乐，不要让自己的幸福，由外界定义。</p>
</blockquote>
<blockquote>
<p>最好的解决方法，应该是自己给出。不靠外界靠自己，也许会有损失，但相比要做成的事，成本不是最重要的，目标才是。</p>
</blockquote>
<blockquote>
<p>接受所有的丧失，甚至是主动的离弃，因为，要放手，应该在合适的时刻，不是到了非离不可。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>萧秋水</tag>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础知识</title>
    <url>/art/2018/20180101-fontend-baseinfo/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180222.jpg"></p>
<span id="more"></span>

<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="1-html-5-新特性"><a href="#1-html-5-新特性" class="headerlink" title="1. html 5 新特性"></a>1. html 5 新特性</h3><p>用于绘画的 canvas 元素</p>
<p>用于媒介回放的 video 和 audio 元素</p>
<p>对本地离线存储的更好的支持<br>localStorage、sessionStorage 不同浏览器容量不同，容量 4.98M。但注意 javascript 使用 utf-16 编码，所以最多有2.5M<br><a href="http://dev-test.nemikor.com/web-storage/support-test/">http://dev-test.nemikor.com/web-storage/support-test/</a></p>
<p>Cookie不同浏览器容量不同， 最多容量4M ，50条数据。</p>
<p>新的特殊内容元素，比如 article、footer、header、nav、section</p>
<p>新的表单控件，比如 calendar、date、time、email、url、search</p>
<h3 id="2-同源策略"><a href="#2-同源策略" class="headerlink" title="2. 同源策略"></a>2. 同源策略</h3><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br>同协议，同端口，同域名（一级二级域名是不同域名）</p>
<p>如果非同源，共有三种行为受到限制。</p>
<p>（1） Cookie、LocalStorage 和 IndexDB 无法读取。</p>
<p>（2） DOM 无法获得。</p>
<p>（3） AJAX 请求不能发送</p>
<h3 id="3-跨域"><a href="#3-跨域" class="headerlink" title="3. 跨域"></a>3. 跨域</h3><p>JSONP 它的基本思想是，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>
<p>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<h3 id="4-标签语义化"><a href="#4-标签语义化" class="headerlink" title="4. 标签语义化"></a>4. 标签语义化</h3><p>通过标签判断内容语义，例如根据h1标签判断出内容是标题，根据<code>&lt;p&gt;</code>判断内容是段落、<code>&lt;input&gt;</code>标签是输入框等。</p>
<p>判断标签是否语义化：去掉样式，看网页结构是否组织良好有序，是否仍然有很好的可读性。</p>
<p>为什么标签要语义化</p>
<ol>
<li>搜索引擎友好。</li>
<li>更容易让屏幕阅读器读出网页内容。</li>
<li>去掉或样式丢失的时候能让页面呈现清晰的结构。</li>
<li>便于团队开发和维护。</li>
</ol>
<p>标题使用<code>&lt;h2&gt;</code>而不是<code>&lt;div class=&quot;h2&quot;&gt;</code>,段落使用<code>&lt;p&gt;</code>标签，锚点使用<code>&lt;a&gt;</code>。</p>
<h2 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h2><p>1** 信息<br>2** 成功  200<br>3** 重定向  304 (未修改)<br>4** 客户端错误<br>5** 服务器错误</p>
<h2 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h2><p>选择器 [attribute^=value]  :nth-of-type(n) :nth-child(n)<br>盒模型 -&gt; box-sizing:content-box border-box<br>背景和边框-&gt; 圆角边框/背景图<br>文本效果<br>2D/3D 转换 -&gt; 移动translate、缩放scale、转动rotate、拉长或拉伸skew  六个值的矩阵matrix<br>过渡 -&gt; transition<br>动画  CSS3 动画属性<br>多列布局<br>弹性盒子(Flex Box)</p>
<h2 id="javascript特性"><a href="#javascript特性" class="headerlink" title="javascript特性"></a>javascript特性</h2><h3 id="1-类型"><a href="#1-类型" class="headerlink" title="1 类型"></a>1 类型</h3><p>基本类型 number、boolean、string、null、undefined<br>复杂类型 array、function、object</p>
<h3 id="2-类型的困惑"><a href="#2-类型的困惑" class="headerlink" title="2 类型的困惑"></a>2 类型的困惑</h3><p>尽量避免用 new</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> []   <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>条件表达式里 null、undefined、’’ 会被判定为 false</p>
<h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3 函数"></a>3 函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="string">&#x27;function&#x27;</span> == <span class="keyword">typeof</span> a <span class="comment">//true，这里的 a 是前面那个 var a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-函数的参数变量"><a href="#4-函数的参数变量" class="headerlink" title="4 函数的参数变量"></a>4 函数的参数变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = fuction (b,c) &#123;&#125;</span><br><span class="line">a.length <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h3 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5 闭包"></a>5 闭包</h3><p>在某个作用域中定义的变量只能在该作用域或其内部作用域中才能访问到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">woot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a==<span class="number">5</span>;<span class="comment">//false</span></span><br><span class="line">  <span class="built_in">console</span>.log(a==<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    a==<span class="number">6</span>;<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">console</span>.log(a==<span class="number">6</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  test();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">woot();</span><br></pre></td></tr></table></figure>

<p>自执行函数，通过声明调用匿名函数，定义新的作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">a == <span class="number">3</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="6-类"><a href="#6-类" class="headerlink" title="6 类"></a>6 类</h3><p>类通过函数定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.getName() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-深浅拷贝"><a href="#7-深浅拷贝" class="headerlink" title="7 深浅拷贝"></a>7 深浅拷贝</h3><p>属性的可枚举性和所有权 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties</a></p>
<p><code>for...in</code> 可以循环出 可枚举属性，自身对象及其原型链。再使用 hasOwnProperty 判断，得到自身属性</p>
<h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><h3 id="1-let-const"><a href="#1-let-const" class="headerlink" title="1. let, const"></a>1. let, const</h3><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>
<p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>
<p>不允许重复声明</p>
<p>暂时性死区<br>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p>
<p>但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的</p>
<h3 id="2-块级作用域"><a href="#2-块级作用域" class="headerlink" title="2. 块级作用域"></a>2. 块级作用域</h3><p>ES5 只有全局作用域和函数作用域<br>ES6 的块级作用域 {}</p>
<h3 id="3-es7"><a href="#3-es7" class="headerlink" title="3. es7"></a>3. es7</h3><p>Array.prototype.includes  -&gt; 代替 indexOf，返回true或false，还可以参数规定从第几位开始<br>求冥运算（次方）</p>
<h2 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h2><p>冒泡捕获<br>先捕获再冒泡</p>
<p>阻止传播 e.stopPropagation();</p>
<p>事件委托</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">&quot;child&quot;</span>);</span><br><span class="line">parent.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.target.id == <span class="string">&quot;child&quot;</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;您点击了child元素&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h2><p><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>
<p>getderivedstatefromprops</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom Packages（插件）推荐</title>
    <url>/art/2018/20180103-atom-useful-packages/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180103.jpg"></p>
<blockquote>
<p>自从看了李笑来的<a href="http://lixiaolai.com/2016/06/17/makecs-atom-advanced">那篇博文</a>后，尝试使用 atom 编辑器后，喜欢上了清爽的界面和可定制化的功能<br>webstorm 很强大，但启动速度比较慢，对 markdown 的支持界面不是很友好<br>sublime 也很方便，但大部分是深色主题，新手不自己安装插件几乎无法使用<br>atom 不装插件也 ok 的，但为了有更好的体验，推荐一些自己在用的好用插件</p>
</blockquote>
<span id="more"></span>
<p>注：目前涉及到的主要是前端相关的</p>
<p>各插件的官方页面，统一使用 <a href="https://atom.io/packages/%E6%8F%92%E4%BB%B6%E5%90%8D">https://atom.io/packages/插件名</a> 即可检索到<br>如果想安装全部的，可以使用 sync-settings 一键克隆我的配置<code>^_^</code></p>
<h3 id="Atom-设置备份同步（重要）"><a href="#Atom-设置备份同步（重要）" class="headerlink" title="Atom 设置备份同步（重要）"></a>Atom 设置备份同步（重要）</h3><p>首先这个插件是最重要的，可以保存 atom 包含插件在内的所有配置</p>
<p><a href="sync-settings">sync-settings</a></p>
<p>数据时保存在 github 里的 gist 里的，首次使用时需要按<a href="https://atom.io/packages/sync-settings">文档</a>的介绍配置插件里的 personal access token 和 gist id</p>
<ol>
<li><a href="https://github.com/settings/tokens/new">创建 personal access token</a>，权限必须勾选 <code>gist</code></li>
<li>创建一个新的 <a href="https://gist.github.com/">gist</a>，文件名 Filename 填写 package.json，描述和文件内容随意填点什么</li>
<li>从右上角 copy 链接，其中的这段数字就是 <code>gist id</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://gist.github.com/xiaweiss/051f5e8f98d6836a5465fcb195fcae8b.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用时，按 <code>cmd + shift + p</code> 来打开 atom 的命令窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sync-settings:backup  备份</span><br><span class="line">sync-settings:restore 恢复</span><br><span class="line">sync-settings:view-backup 查看所有的备份，会打开 gist</span><br><span class="line">sync-settings:check-backup 本地设置和 gist 最新备份是否相同</span><br><span class="line">sync-settings:fork 输入 gist id 来 fork 他人的配置</span><br></pre></td></tr></table></figure>
<p>我的是 gist id： <code>051f5e8f98d6836a5465fcb195fcae8b</code></p>
<h3 id="编辑器优化"><a href="#编辑器优化" class="headerlink" title="编辑器优化"></a>编辑器优化</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/atom-clock">atom-clock</a></td>
<td>显示时间</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/autosave-onchange">autosave-onchange</a></td>
<td>自动保存</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/file-icons">file-icons</a></td>
<td>按不同文件类型显示图标</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/highlight-selected">highlight-selected</a></td>
<td>双击高亮显示所有这个单词出现的地方</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/js-hyperclick">js-hyperclick</a></td>
<td>点击跳转到定义的位置</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/move-cursor-improved">move-cursor-improved</a></td>
<td>光标移动的修正：有东亚字符（日语、汉字时），按上下箭头时使光标可以垂直移动</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/pigments">pigments</a></td>
<td>显示色值的颜色</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/platformio-ide-terminal">platformio-ide-terminal</a></td>
<td>编辑器内的命令行工具，但只能使用系统默认的 terminal</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/regex-railroad-diagram">regex-railroad-diagram</a></td>
<td>使用图形显示正则表达式</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/sort-lines">sort-lines</a></td>
<td>排序/删除重复行。选中要排序的区域，按 F5 即可</td>
</tr>
<tr>
<td><a href="https://github.com/alibaba/structure-view">structure-view</a></td>
<td>默使用 ctrl + O（字母） 文件结构</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/todo-show">todo-show</a></td>
<td>可以在项目里找到特定的注释，TODO、NOTE、REVIEW 等等，使用快捷键 ctrl+shift+t 打开列表</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/tree-view-copy-relative-path">tree-view-copy-relative-path</a></td>
<td>文件目录里复制的相对路径</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/tree-view-panes">tree-view-panes</a></td>
<td>文件目录里显示打开的文件</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/tree-view-search-bar">tree-view-search-bar</a></td>
<td>文件目录搜索栏</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/tree-view-sort">tree-view-sort</a></td>
<td>排序文件目录，可以选择各种方式来排序左侧文件树</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/wordcount">wordcount</a></td>
<td>字数统计</td>
</tr>
</tbody></table>
<h3 id="minimap-缩略图滚动条"><a href="#minimap-缩略图滚动条" class="headerlink" title="minimap 缩略图滚动条"></a>minimap 缩略图滚动条</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/minimap">minimap</a></td>
<td>类似 sublime 右侧代码缩略图的功能，好处是加宽了滚动条，适合拖拽</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/minimap-highlight-selected">minimap-highlight-selected</a></td>
<td>高亮选中词</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/minimap-pigments">minimap-pigments</a></td>
<td>显示色值的颜色</td>
</tr>
</tbody></table>
<h3 id="git-版本控制"><a href="#git-版本控制" class="headerlink" title="git 版本控制"></a>git 版本控制</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/git-log">git-log</a></td>
<td>查看整个项目的分支树</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/git-time-machine">git-time-machine</a></td>
<td>查看对比当前文件的历史版本，使用 alt+t 打开面板</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/split-diff">split-diff</a></td>
<td>显示修改的地方，并且可以对比，甚至选择其中一方</td>
</tr>
</tbody></table>
<p><a href="https://atom.io/packages/split-diff">split-diff</a> 使用 ctrl+alt+t 开启对比<br>ctrl-alt-n 跳转到下一处（next）<br>ctrl-alt-p 跳转到上一处（prev）<br>ctrl-alt-. 把左边的应用到右边去（&gt; 取左边）<br>ctrl-alt-, 把右边的应用到左边来（&lt; 取右边）</p>
<h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p>配置请见 <a href="http://xiaweiss.com/art/20180726-javascript-code-format/">JavaScript 代码格式化</a></p>
<table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/editorconfig">editorconfig</a></td>
<td>统一编辑器格式</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/linter-eslint">linter-eslint</a></td>
<td>eslint 代码检查、格式化</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/linter-js-standard">linter-js-standard</a></td>
<td>standard 代码检查</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/prettier-atom">prettier-atom</a></td>
<td>prettier 格式化</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/standard-formatter">standard-formatter</a></td>
<td>standard 格式化</td>
</tr>
</tbody></table>
<h3 id="html、css、less-语法支持"><a href="#html、css、less-语法支持" class="headerlink" title="html、css、less 语法支持"></a>html、css、less 语法支持</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/autoclose-html">autoclose-html</a></td>
<td>输入 <code>&gt;</code> 时补全标签</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/less-compiler">less-compiler</a></td>
<td>只需要在 less 文件开头加一行注释，保存时就会自动编译为新文件</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/px-rem-tooltip">px-rem-tooltip</a></td>
<td>查看转换前的单位</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/px2rem-plus">px2rem-plus</a></td>
<td>px转rem</td>
</tr>
</tbody></table>
<h3 id="markdown-支持"><a href="#markdown-支持" class="headerlink" title="markdown 支持"></a>markdown 支持</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>[markdown-table-editor][]</td>
<td>使用 Tab 键自动格式化表格格式，使用户可以在源文件里清晰看到表格</td>
</tr>
<tr>
<td>[markdown-preview-enhanced][]</td>
<td>最好的 markdown 插件，使用前请关闭 markdown-preview</td>
</tr>
<tr>
<td>[markdown-preview-enhanced]: <a href="https://atom.io/packages/markdown-preview-enhanced">https://atom.io/packages/markdown-preview-enhanced</a></td>
<td></td>
</tr>
<tr>
<td>[markdown-table-editor]: <a href="https://atom.io/packages/markdown-table-editor">https://atom.io/packages/markdown-table-editor</a></td>
<td></td>
</tr>
</tbody></table>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/language-vue">language-vue</a></td>
<td>语法支持</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/vue2-autocomplete">vue2-autocomplete</a></td>
<td>自动补全</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/vuejs2-snippets">vuejs2-snippets</a></td>
<td>自动补全</td>
</tr>
</tbody></table>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/language-babel">language-babel</a></td>
<td>支持 JSX、ES201x、Flow、GraphQL 语法等</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/react-snippets">react-snippets</a></td>
<td>自动补全</td>
</tr>
</tbody></table>
<p>注意不要使用插件 <a href="https://atom.io/packages/react-snippets">react</a> ，因为它和 <a href="https://atom.io/packages/language-babel">language-babel</a> 冲突，而后者支持的范围更广</p>
<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/atom-react-native-style">atom-react-native-style</a></td>
<td>样式辅助</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/language-babel">language-babel</a></td>
<td>支持 JSX、ES201x、Flow、GraphQL 语法等</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/react-native-components">react-native-components</a></td>
<td>组件辅助</td>
</tr>
</tbody></table>
<p>不推荐 facebook 官方的 <a href="https://atom.io/packages/nuclide">nuclide</a>，因为它会改变整个 atom 编辑器的界面，并且和语法检查的 lint 工具冲突<br>不利于其他项目和语言的代码编写</p>
<h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><table>
<thead>
<tr>
<th>package</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://atom.io/packages/atom-wx">atom-wx</a></td>
<td>语法高亮</td>
</tr>
<tr>
<td><a href="https://atom.io/packages/wxapp">wxapp</a></td>
<td>微信小程序自动补全</td>
</tr>
</tbody></table>
<blockquote>
<p>图片来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=63967458">https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=63967458</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>atom</tag>
      </tags>
  </entry>
  <entry>
    <title>h5 视频解决方案 videojs</title>
    <url>/art/2018/20180108-videojs/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180108.jpg"></p>
<blockquote>
<p>html5 video 标签在不同的浏览器里，解析有差异，所以使用 videojs 来处理兼容性问题</p>
</blockquote>
<span id="more"></span>

<p><a href="http://videojs.com/">videojs 官网</a><br><a href="https://github.com/videojs">videojs Github</a></p>
<h3 id="1-引入"><a href="#1-引入" class="headerlink" title="1. 引入"></a>1. 引入</h3><h4 id="1-1-全局引入"><a href="#1-1-全局引入" class="headerlink" title="1.1 全局引入"></a>1.1 全局引入</h4><p>页面里全局引入 videojs 即可，js文件建议放在 body 底部位置</p>
<p>如果在 PC 端使用，还需要引入 videojs-flash.js（flash模式播放）、videojs-contrib-hls.js（解析流媒体 m3u8）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/video.js/dist/video-js.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/video.js/dist/video.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/videojs-flash/dist/videojs-flash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-构建工具内局部引入"><a href="#1-2-构建工具内局部引入" class="headerlink" title="1.2 构建工具内局部引入"></a>1.2 构建工具内局部引入</h4><p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install video.js --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">&#x27;video.js&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.videojs = videojs || videojs.default;</span><br></pre></td></tr></table></figure>

<p>注意 <code>videojs-contrib-hls</code> 依赖包并不支持 import 模块方式引入，所以想兼容 PC 时需要按上小节方式全局引入</p>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><p>以下场景为，正方形流媒体视频 m3u8 格式，点击开始，再次点击暂停</p>
<p>videojs初始化完毕后，.vjs-tech 为DOM结构里的实际的video标签</p>
<p>src 为父组件传过来的视频地址，poster 为视频未加载时显示的图片</p>
<p>videojs 的初始化参数有多重配置方式，建议以标签属性的方式来配置</p>
<h4 id="2-1-标签属性的说明"><a href="#2-1-标签属性的说明" class="headerlink" title="2.1 标签属性的说明"></a>2.1 标签属性的说明</h4><p>注意 html 行内的属性，写了就生效了，<code>controls=&quot;true&quot;</code>、<code>controls=&quot;false&quot;</code> 都是错误地写法，写完整必须写为<code>controls=&quot;controls&quot;</code></p>
<p>x5 开头的标签只对腾讯 x5 内核的浏览器有效，即微信、QQ浏览器，所有的属性见 <a href="https://x5.tencent.com/tbs/guide/video.html">H5同层播放器接入规范</a></p>
<p>显示控制条 controls<br>行内播放（不自动全屏播放）webkit-playsinline playsinline x5-playsinline</p>
<p>【安卓】启用H5同层播放器 x5-video-player-type=”h5”<br>启用后微信、QQ浏览器里，不会使用腾讯的默认播放器<br>这里如果不启用，则使用腾讯的播放器，videojs 控制不了，会显示播放控件<br>如果启用了，则使用 html5 默认行为来播放，videojs 可以控制，但一定会全屏播放</p>
<h4 id="2-2-一般页面的使用"><a href="#2-2-一般页面的使用" class="headerlink" title="2.2 一般页面的使用"></a>2.2 一般页面的使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;my-video&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-default-skin only-play-button&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">webkit-playsinline</span> <span class="attr">playsinline</span> <span class="attr">x5-playsinline</span> <span class="attr">controls</span></span></span><br><span class="line"><span class="tag">  <span class="attr">poster</span>=<span class="string">&quot;https://testec.ghs.net/public/images/8d/69/0e/0bf26ca05396e726ad05540d582580bc322c20b9.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-setup</span>=<span class="string">&quot;&#123;&#125;&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.ghs-tv.readtv.cn/video/ebeefe116c9aa4835e18b53b15a8cd26/stream.m3u8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-mpegURL&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;source src=&quot;http://www.streambox.fr/playlists/test_001/stream.m3u8&quot; type=&quot;application/x-mpegURL&quot;/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;play-btn&quot;</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pause-btn&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> player = videojs(<span class="built_in">window</span>.document.querySelector(<span class="string">&#x27;#my-video&#x27;</span>),&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> v = <span class="built_in">this</span>.el_.querySelector(<span class="string">&#x27;.vjs-tech&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      v.removeAttribute(<span class="string">&#x27;z-index&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当暂停时，点击开始播放</span></span></span><br><span class="line"><span class="javascript">      v.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.paused()) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.play();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当播放时，触摸暂停。注意这里只有 touchstart 有效，其他事件不能被触发</span></span></span><br><span class="line"><span class="javascript">      v.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">this</span>.paused()) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.pause();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.document.querySelector(<span class="string">&#x27;#play-btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">     player.play();</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.document.querySelector(<span class="string">&#x27;#pause-btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">     player.pause();</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-vuejs组件内的使用"><a href="#2-3-vuejs组件内的使用" class="headerlink" title="2.3 vuejs组件内的使用"></a>2.3 vuejs组件内的使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;my-video&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-default-skin only-play-button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">controls</span> <span class="attr">webkit-playsinline</span> <span class="attr">playsinline</span> <span class="attr">style</span>=<span class="string">&quot;object-fit:fill&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">x5-playsinline</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:poster</span>=<span class="string">&quot;poster&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">data-setup</span>=<span class="string">&#x27;&#123;&#125;&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">&quot;src&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-mpegURL&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">&#x27;video.js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">window</span>.videojs = videojs || videojs.default;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: [<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;poster&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (!<span class="built_in">this</span>.player) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.player = videojs(<span class="built_in">this</span>.$el, &#123;&#125;, <span class="function"><span class="keyword">function</span> <span class="title">playerReady</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> v = <span class="built_in">this</span>.el_.querySelector(<span class="string">&#x27;.vjs-tech&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        v.removeAttribute(<span class="string">&#x27;z-index&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 当暂停时，点击开始播放</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        v.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span> (<span class="built_in">this</span>.paused()) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.play();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 当播放时，触摸暂停。注意这里只有 touchstart 有效，其他事件不能被触发</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        v.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span> (!<span class="built_in">this</span>.paused()) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.pause();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> (<span class="built_in">this</span>.player) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.player.dispose();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">@<span class="keyword">import</span> url(<span class="string">&#x27;/static/css/video-js.min.css&#x27;</span>);</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure>
<p>父组件中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video-player</span> <span class="attr">:src</span>=<span class="string">&quot;m3u8视频地址&quot;</span> <span class="attr">:poster</span>=<span class="string">&quot;视频预览图&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video-player</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-样式优化"><a href="#3-样式优化" class="headerlink" title="3.样式优化"></a>3.样式优化</h3><p>只在视频中央显示一个圆按钮</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss/less */</span></span><br><span class="line"><span class="selector-class">.video-js</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.only-play-button</span> &#123;</span><br><span class="line">  <span class="selector-class">.vjs-big-play-button</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.vjs-icon-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.vjs-paused</span> <span class="selector-class">.vjs-big-play-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1.5em</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.vjs-controls-disabled</span><span class="selector-class">.vjs-paused</span> <span class="selector-class">.vjs-big-play-button</span>,</span><br><span class="line">  &amp;<span class="selector-class">.vjs-using-native-controls</span><span class="selector-class">.vjs-paused</span> <span class="selector-class">.vjs-big-play-button</span>,</span><br><span class="line">  &amp;<span class="selector-class">.vjs-error</span><span class="selector-class">.vjs-paused</span> <span class="selector-class">.vjs-big-play-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.vjs-control-bar</span>,</span><br><span class="line">  <span class="selector-class">.vjs-error-display</span>,</span><br><span class="line">  <span class="selector-class">.vjs-text-track-display</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-自动播放"><a href="#4-自动播放" class="headerlink" title="4. 自动播放"></a>4. 自动播放</h3><p>只有 iOS 微信里，可以调用微信客户端的 <a href="https://github.com/Tencent/weui/wiki/%E5%BE%AE%E4%BF%A1JSAPI">JSBridge 方法</a>，实现自动播放</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  player.play();</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-部分浏览器兼容问题"><a href="#5-部分浏览器兼容问题" class="headerlink" title="5. 部分浏览器兼容问题"></a>5. 部分浏览器兼容问题</h3><p>360浏览器，它会自动给video标签加z-index值，导致点击不到videojs播放控件</p>
<p>解决方式：移除 video 标签的 style 属性，使 z-index 修正为正常。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;video&quot;</span>).on(<span class="string">&quot;play&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="built_in">this</span>).attr(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>baidu浏览器，播放时loading图闪烁</p>
<p>解决方式：判断是百度浏览器时，不显示 loading 图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.navigator &amp;&amp; (<span class="built_in">window</span>.navigator.userAgent).match(<span class="regexp">/baidu/i</span>)) &#123;</span><br><span class="line">   $(<span class="string">&quot;.vjs-loading-spinner&quot;</span>).hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>php 学习笔记</title>
    <url>/art/2018/20180124-php-primer-note/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180124.jpg"></p>
<blockquote>
<p>一直想做点自己的小东西，所以开始学习后端知识了<br>目前是一些基础的语法速学记录，还在更新中，以后有时间会整理归纳</p>
</blockquote>
<span id="more"></span>

<p>php 代码块 <?php   ?><br>php 连接符 .<br>多行时，每行结尾必须加 ;<br>单行注释 //<br>多行注释 <code>/*   */</code><br>变量 $开头 变量名必须以字母或下划线开始，如<code>”$_name”,”$name” ,”$name2”</code>等，但是”$9name”是不对的。<br>下划线命名法  <code>$my_apple</code>、驼峰命名法 <code>$myApple</code><br>获取当前PHP消耗的内存 memory_get_usage()<br>在PHP中，支持8种原始类型，其中包括四种标量类型、两种复合类型和两种特殊类型<br>echo 打印<br>var_dump 输出类型和值<br>var_export 打印数组</p>
<p>布尔类型 不区分大小写 echo true;得到值1，echo false; 不输出值<br>== 比较运算符优先于 = 赋值运算符</p>
<p>整型 123<br>负数 -123<br>八进制数 0123<br>十六进制数 0x1a</p>
<p>浮点型 1.234<br>科学计数法，小写e或大写E  1.2e3 //1200  7.0e-10  //0.007</p>
<p>字符串<br>字符串型可以用三种方法定义：单引号形式、双引号形式和Heredoc结构形式。<br>字符串中包含引号的时候，1 单引号中嵌入双引号 2 双引号中嵌入单引号 3 里面的引号前使用转义符 \</p>
<p>当双引号中包含变量时，变量会与双引号中的内容连接在一起；<br>当单引号中包含变量时，变量会被当做字符串输出。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$love</span> = <span class="string">&quot;I love you!&quot;</span>;</span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;hi,<span class="subst">$love</span>&quot;</span>;<span class="comment">// hi,I love you!</span></span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&#x27;hi,$love&#x27;</span>;<span class="comment">// hi,$love</span></span><br></pre></td></tr></table></figure>

<p>当我的字符串很长怎么办？</p>
<p>我们可以使用Heredoc结构形式的方法来解决该问题，首先使用定界符表示字符串（&lt;&lt;&lt;），接着在“&lt;&lt;&lt;“之后提供一个标识符GOD，然后是字符串，最后以提供的这个标识符结束字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$string1</span> = <span class="string">&lt;&lt;&lt;GOD</span></span><br><span class="line"><span class="string">A</span></span><br><span class="line"><span class="string">B</span></span><br><span class="line"><span class="string">C</span></span><br><span class="line"><span class="string">GOD</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$string1</span>;<span class="comment">//A B C</span></span><br></pre></td></tr></table></figure>
<p>在赋值符号后，输入定界符“&lt;&lt;&lt;”,接着是标识符，你可以用你的女神作为标识符“GOD”，如第1行，也可以使用你喜欢的狗狗，“DOG”作为标识符，但是，结尾处的标识符也必须是一样的。此外，在结尾的一行，如第4行，一定要另起一行，并且此行除了“GOD”，并以“；”号结束之外，不能有任何其他字符，前后都不能有，包括空格，否则会出现错误的哦。</p>
<p>特殊类型1—资源 1.txt<br>特殊类型2—空类型 null 大写NULL也可以</p>
<p>echo NULL，输出无结果</p>
<p>$var3 = “节日快乐！”;<br>unset($var3);//NULL</p>
<p>常量 不允许重复定义、修改值<br>定义 define(‘name’,value)  注意第三个参数写 true，可以大小写不敏感<br>还有一种定义方式，const PI = 3.14; 大小写敏感</p>
<p>取值 可以直接取值，也可以使用 constant(‘name’)</p>
<p><a href="https://stackoverflow.com/questions/2447791/define-vs-const">dinfine 和 const 的区别</a><br>注意<br>define() 必须在 class 外使用，在全局生效，运行时执行<br>const 在条件表达式内部不能使用，在当前命名空间生效，编译时执行，定义的速度更快<br>一般不用条件表达式时，尽量用 const</p>
<p>系统常量<br><strong>FILE</strong> 文件名和路径<br><strong>LINE</strong> 当前代码在第几行<br>PHP_VERSION 当前解析器的版本号<br>PHP_OS 执行当前PHP版本的操作系统名称</p>
<p>defined(‘常量名’) 检测常量是否定义，返回 true 或 false</p>
<p>PHP运算符一般分为算术运算符、赋值运算符、比较运算符、三元运算符、逻辑运算符、字符串连接运算符、错误控制运算符。</p>
<p>赋值运算符 一般赋值 =   引用赋值 &amp;，例如 $c = &amp;$a;<br>“&amp;”：引用赋值，意味着两个变量都指向同一个数据。它将使两个变量共享一块内存，如果这个内存存储的数据变了，那么两个变量的值都会发生变化。</p>
<p>逻辑运算符<br>与 &amp;&amp;、或 ||、非！、异或 xor (注意 and or xor 运算优先级很低，需要小括号括住)</p>
<p>字符串连接运算符 <code>.</code> 、 <code>.=</code></p>
<p>错误控制运算符 @，可以放在变量和函数执行语句之前<br>开启了 track_errors 后，可以使用变量 $php_errormsg 输出错误信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini_set(<span class="string">&#x27;track_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$conn</span> = @mysql_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;出错了，错误原因是：&quot;</span>.<span class="variable">$php_errormsg</span>;</span><br></pre></td></tr></table></figure>

<p>算术运算符 <code>+ 、- 、* 、/ 、% 、+= 、-= 、*= 、/= 、%=</code><br>向下取整 floor(4.25); //4<br>向上取整 ceil(4.25); //5</p>
<p>条件结构  if、switch<br>循环结构  while、do while、for、foreach</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (数组 <span class="keyword">as</span> 值)&#123;</span><br><span class="line"><span class="comment">//执行的任务</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (数组 <span class="keyword">as</span> 下标 =&gt; 值)&#123;</span><br><span class="line"> <span class="comment">//执行的任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数组<br>//设置某个变量为一个空数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$fruit</span> = <span class="keyword">array</span>(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;菠萝&quot;</span>);</span><br><span class="line">var_export(<span class="variable">$fruit</span>);<span class="comment">//打印数组</span></span><br></pre></td></tr></table></figure>

<p>索引数组赋值有三种方式:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span>[<span class="number">0</span>]=<span class="string">&#x27;苹果&#x27;</span>;</span><br><span class="line"><span class="keyword">array</span>(<span class="string">&#x27;0&#x27;</span>=&gt;<span class="string">&#x27;苹果&#x27;</span>);</span><br><span class="line"><span class="keyword">array</span>(<span class="string">&#x27;苹果&#x27;</span>);<span class="comment">//自动产生索引 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span>[] = <span class="string">&#x27;梨&#x27;</span>;<span class="comment">//末尾插入新值</span></span><br></pre></td></tr></table></figure>

<p>访问某个数组中索引的值<br>$arr[0] 或 $arr[‘0’];</p>
<p>获取数组长度 count($array);</p>
<p>php类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个类，类名必须是字母或下划线开头</span></span><br><span class="line"><span class="comment">//$this 指向实例化后的类，来访问该类里的其他变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span> = <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个car对象</span></span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car();<span class="comment">//这里括号不传参数时，可以省略</span></span><br><span class="line"><span class="variable">$car</span>-&gt;name = <span class="string">&#x27;奥迪A6&#x27;</span>; <span class="comment">//设置对象的属性值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;getName();  <span class="comment">//调用对象的方法 输出对象的名字</span></span><br></pre></td></tr></table></figure>

<p>类的的属性和 fuction 前面有关键字public（公有），protected（受保护）或 private（私有），var 视为公有<br>类的 function 可以不写关键字，视为公有。属性必须写，否则报错。<br>受保护的不可以被外部调用，私有的只能被自己内部调用</p>
<p>使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">​&#125;</span><br><span class="line"><span class="keyword">echo</span> Car::getName(); <span class="comment">//结果为“汽车</span></span><br></pre></td></tr></table></figure>
<p>注意静态方法，可以像普通方法一样调用，但静态属性不可以<br>静态方法内不可以使用 $this</p>
<p>静态属性 可以使用 static::$属性名，或者 self::$属性名 访问<br>静态方法 使用 static::方法名() 执行<br>访问父类时，使用 parent，例如 parent::方法名();</p>
<p>注意下面代码，写不写 static 输出结果是一样的。但属性这么玩会报错。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> b();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>-&gt;show();<span class="comment">//123</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>::show();<span class="comment">//123</span></span><br></pre></td></tr></table></figure>

<p>类的构造函数，实例化 new 类时，这个函数会被执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure>

<p>在子类中如果定义了__construct则不会调用父类的__construct，如果需要同时调用父类的构造函数，需要使用<code>parent::__construct()</code>显式的调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;父类的构造函数被调用\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;子类的构造函数被调用\n&quot;</span>;</span><br><span class="line">    <span class="built_in">parent</span>::__construct();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Truck();</span><br></pre></td></tr></table></figure>

<p>类的析构函数，类被销毁时会调用 <code>__destruct</code></p>
<p>类继承<br>子类可以继承<br>父类的属性和方法<br>但当子类有同名的属性和方法时，父类的会不执行，可以静态方法的方式来访问。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$speed</span> = <span class="number">0</span>; <span class="comment">//汽车的起始速度是0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;speed += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义继承于Car的Truck类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::speedUp();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;speed += <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Truck();</span><br><span class="line"><span class="variable">$car</span>-&gt;speedUp();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;speed;</span><br></pre></td></tr></table></figure>

<p>Cookie<br>设置 cookie</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">setcookie(<span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;哈&#x27;</span>, time() + <span class="number">10</span>, <span class="string">&#x27;/&#x27;</span>);<span class="comment">//存入的值为 %E5%93%88</span></span><br><span class="line">setrawcookie(<span class="string">&#x27;test3&#x27;</span>, <span class="string">&#x27;哈&#x27;</span>);<span class="comment">//存入的值为 哈</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>图片来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=59688723">https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=59688723</a><br>参考资料：<br><a href="https://www.imooc.com/learn/54">慕课 PHP 入门篇</a><br><a href="https://www.imooc.com/learn/26">慕课 PHP 进阶篇</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序 wepy 框架</title>
    <url>/art/2018/20180222-wechat-app-wepy/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180222.jpg"></p>
<blockquote>
<p>微信小程序踩坑记<br>考虑到业务的复杂性需要 redux 状态管理，以及原有 vue 项目的可移植性，选用 wepy 来开发小程序</p>
</blockquote>
<span id="more"></span>


<h2 id="1-相关资料"><a href="#1-相关资料" class="headerlink" title="1. 相关资料"></a>1. 相关资料</h2><p>网上有很多现成的资料，可以直接参考，本文不再赘述<br>由于官方文档不够详尽，后文列举一些文档中没有的常见功能及排坑</p>
<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/">小程序文档</a><br><a href="https://github.com/Tencent/wepy">wepy github</a><br><a href="https://tencent.github.io/wepy/document.html">wepy 文档</a><br><a href="https://segmentfault.com/a/1190000007580866">wepy 特性介绍</a><br><a href="https://www.npmjs.com/package/wepy-redux">wepy-redux</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html">redux 入门</a><br><a href="https://github.com/Tencent/weui">weui</a><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000">Promise</a><br><a href="https://segmentfault.com/a/1190000007535316">async/await</a><br><a href="https://zhuanlan.zhihu.com/p/24860332">小程序部分坑</a><br><a href="https://juejin.im/post/5a4f5280f265da3e2b16393c">微信小程序开发之webview组件内网页实现微信原生支付</a><br><a href="https://www.jianshu.com/p/c9a196d0455e">微信小程序与内嵌网页交互实现支付功能</a></p>
<p>todo<br><a href="https://www.jianshu.com/p/78dfb38ac3d7?winzoom=1">await 错误捕获</a><br><a href="http://www.wxapp-union.com/portal.php?mod=view&aid=3362">小程序 webview 交互</a></p>
<h2 id="2-快速开始"><a href="#2-快速开始" class="headerlink" title="2. 快速开始"></a>2. 快速开始</h2><ul>
<li>安装 node 最新稳定版</li>
<li>npm install wepy-cli -g</li>
<li>wepy init standard myproject 创建标准项目</li>
<li>cd myproject 进入项目目录</li>
<li>wepy upgrade 更新依赖</li>
<li>npm install 安装依赖</li>
<li>wepy build -w 实时编译</li>
<li>运行微信开发者工具，并且设置：<br>不勾选 “ES6 转 ES5”<br>不勾选 “上传代码自动样式补全”<br>不勾选 “代码上传时自动压缩”<br>勾选 “不校验安全域名、web-view 域名、TLS 版本以及 HTTPS 证书”</li>
</ul>
<h3 id="2-1-引入-weui"><a href="#2-1-引入-weui" class="headerlink" title="2.1 引入 weui"></a>2.1 引入 weui</h3><p>使用 wepy 创建 weui 项目模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wepy init wepyjs/wepy-wechat-demo myproject</span><br></pre></td></tr></table></figure>
<p>将 style 文件夹拷贝到自己的项目，然后在 app.wpy 的 style 标签里添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./style/weui.less&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>如需部分引入，修改 weui.less 注释掉不需要的组件即可</p>
<h3 id="2-2-引入第三方组件"><a href="#2-2-引入第三方组件" class="headerlink" title="2.2 引入第三方组件"></a>2.2 引入第三方组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">toast</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">&#x27;wepy&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">&#x27;wepy-com-toast&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  components = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">toast</span>: Toast</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  methods = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">go</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> promise = <span class="built_in">this</span>.$invoke(<span class="string">&#x27;toast&#x27;</span>, <span class="string">&#x27;show&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">title</span>: <span class="string">&#x27;自定义标题&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">img</span>: <span class="string">&#x27;https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      promise.then(<span class="function">(<span class="params">d</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;toast done&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-wepy-语法"><a href="#3-wepy-语法" class="headerlink" title="3. wepy 语法"></a>3. wepy 语法</h2><h3 id="3-1-组件通讯"><a href="#3-1-组件通讯" class="headerlink" title="3.1 组件通讯"></a>3.1 组件通讯</h3><p>组件命名 驼峰式 childCom</p>
<h4 id="3-1-1-父子组件通讯-props-方式"><a href="#3-1-1-父子组件通讯-props-方式" class="headerlink" title="3.1.1 父子组件通讯 props 方式"></a>3.1.1 父子组件通讯 props 方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// parent.wpy</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:title</span>=<span class="string">&quot;parentTitle&quot;</span> <span class="attr">:syncTitle.sync</span>=<span class="string">&quot;parentTitle&quot;</span> <span class="attr">:twoWayTitle</span>=<span class="string">&quot;parentTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    parentTitle: &#x27;p-title&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// child.wpy</span><br><span class="line"></span><br><span class="line">props = &#123;</span><br><span class="line">    // 静态传值</span><br><span class="line">    title: String,</span><br><span class="line"></span><br><span class="line">    // 父向子单向动态传值</span><br><span class="line">    syncTitle: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#x27;null&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 父子 props 双向绑定</span><br><span class="line">    twoWayTitle: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: &#x27;nothing&#x27;,</span><br><span class="line">        twoWay: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>父组件在变更传递给子组件 props 后要执行 <code>this.$apply()</code> 方法才能更新</p>
<p>注意要写成成对的 <code>&lt;child&gt;&lt;/child&gt;</code></p>
<h4 id="3-1-2-父子组件通讯-事件传递方式"><a href="#3-1-2-父子组件通讯-事件传递方式" class="headerlink" title="3.1.2 父子组件通讯 事件传递方式"></a>3.1.2 父子组件通讯 事件传递方式</h4><p>父组件可以使用 invoke 来给特定的子组件发事件，这个组件必须在此模块里注册过</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$invoke(<span class="string">&#x27;com&#x27;</span>,<span class="string">&#x27;myevent&#x27;</span>,<span class="string">&#x27;myparam&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>注意目前wepy 1.7.0版本，和官方文档不同的是，event 里的事件不能被 invoke 触发<br>（但可以被 emit boardcast 触发），所以需要类似 onLoad 的写法，直接写在 class 里。</p>
<p>wepy中的methods仅可用于页面事件绑定，其他自定义方法都要放在外层</p>
<h3 id="3-2-页面交互"><a href="#3-2-页面交互" class="headerlink" title="3.2 页面交互"></a>3.2 页面交互</h3><p>页面间可以用 url 的 qruey 参数的方式来传参<br>onLoad 事件里有 options 参数，是包含当前页面路径的 query</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// source page</span></span><br><span class="line">wepy.navigateTo(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;test?a=123&amp;b=456&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// target page</span></span><br><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(options.a) <span class="comment">// 123</span></span><br><span class="line">   <span class="built_in">console</span>.log(options.b) <span class="comment">// 456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，注册在 app.wpy 的 tabBar 里的目标页面，只能用 switchTab 来跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wepy.switchTab(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;test?a=123&amp;b=456&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>web-view 页面可以通过调用微信 jssdk 的 wx.miniProgram.xxx 系列方法，来控制跳转到小程序页面，同样可以传 query 参数</p>
<h3 id="3-3-wepy-请求"><a href="#3-3-wepy-请求" class="headerlink" title="3.3 wepy 请求"></a>3.3 wepy 请求</h3><p>可以直接按原生小程序的语法<br>或者按官方文档的方式 使用Promise的 then 方式回调，还需要配置<br><a href="https://github.com/Tencent/wepy/wiki/wepy%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8async-await">wepy项目中使用async await</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wepy.request(url).then(<span class="function">(<span class="params">d</span>) =&gt;</span> <span class="built_in">console</span>.log(d))</span><br></pre></td></tr></table></figure>
<p>二者混合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wepy.request(&#123;</span><br><span class="line">  <span class="attr">url</span>: url,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> <span class="comment">// OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT</span></span><br><span class="line">  <span class="comment">// header: &#123;&#125;, // 设置请求的 header</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d))</span><br></pre></td></tr></table></figure>
<p>使用 async/await 方式</p>
<h4 id="3-4-async-await-错误捕获"><a href="#3-4-async-await-错误捕获" class="headerlink" title="3.4 async/await 错误捕获"></a>3.4 async/await 错误捕获</h4><p>使用 try…catch 语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">boom (s) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;promise rejected&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">onLaunch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.boom()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;CATCH&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-css"><a href="#4-css" class="headerlink" title="4. css"></a>4. css</h2><h3 id="4-1-css-预编译语言"><a href="#4-1-css-预编译语言" class="headerlink" title="4.1 css 预编译语言"></a>4.1 css 预编译语言</h3><p>默认为 less，还可以使用 css、sass、scss、stylus<br>只需要 npm 安装对应包，并且在 style 标签声明，例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install wepy-compiler-sass --save-dev</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意 wepy 和普通引用不同的是，scss 的 function 以及 $ 变量，必须在使用它的文件 style 中引入<br>全局样式中声明是无效的，可以写成单独的 scss 文件，通过 import 引入。</p>
<p>另外 style 的样式会影响到子组件，可以类似 vue 使用 scope 关键字来去除影响</p>
<p>用到多种编译语言时，可以出现多个不同的 style 标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sytle</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sytle</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line">  @import &#x27;../style/common.scss&#x27;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后请注意，wepy css 编译报错后，需要重启微信开发者工具。</p>
<h2 id="5-webview"><a href="#5-webview" class="headerlink" title="5. webview"></a>5. webview</h2><p>todo 需要验证</p>
<h3 id="5-1-在内嵌页里判断当前是否是小程序"><a href="#5-1-在内嵌页里判断当前是否是小程序" class="headerlink" title="5.1 在内嵌页里判断当前是否是小程序"></a>5.1 在内嵌页里判断当前是否是小程序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    isWxMini = <span class="built_in">window</span>.__wxjs_environment === <span class="string">&#x27;miniprogram&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><blockquote>
<p>图片来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=59474391">https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=59474391</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>wepy</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>React 简介</title>
    <url>/art/2018/20180315-react-introduce/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20171205.jpg"></p>
<span id="more"></span>

<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p>官方文档 <a href="https://reactjs.org/">reactjs.org</a><br>相关资源 <a href="https://github.com/enaqx/awesome-react">awesome-react</a><br>cli 构建 <a href="https://github.com/facebook/create-react-app">create-react-app</a><br>样式组件 <a href="https://github.com/styled-components/styled-components">styled-components</a><br>路由 <a href="https://reacttraining.com/react-router/web/guides/quick-start">react-router</a><br>路由匹配测试工具 <a href="https://pshrmn.github.io/route-tester/#/">route-tester</a></p>
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><p>使用 <a href="https://github.com/facebook/create-react-app">create-react-app</a>，相关的资料 <a href="https://github.com/tuchk4/awesome-create-react-app">awesome-create-react-app</a></p>
<p>它是由 facebook 官方出品的项目生成工具，适合单页应用，预先配好了常用的配置，并且在 readme 里，常用的功能的使用都有介绍</p>
<p>如果需要自定义配置 webpack，必须弃用它，使用 <code>npm run eject</code> 命令可以转换为 webpack 构建（这个操作不可逆）</p>
<p>安装好 node 后，在命令行中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure>

<p>就可以创建好项目 my-app，项目结构为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-app</span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   └── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    └── App.css</span><br><span class="line">    └── App.js</span><br><span class="line">    └── App.test.js</span><br><span class="line">    └── index.css</span><br><span class="line">    └── index.js</span><br><span class="line">    └── logo.svg</span><br><span class="line">    └── registerServiceWorker.js</span><br></pre></td></tr></table></figure>

<p>进入项目目录后，使用命令 <code>npm run start</code> 来启动开发环境，浏览器打开 <code>http://localhost:3000</code> 就可以看到效果了</p>
<p>可以在 App.js 中或者 index.js 修改代码</p>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>react 通常使用 JSX 语法，JSX 是一种 javascript 的语法扩展。</p>
<p>一个元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="comment">// 必须是有根节点包裹的元素</span></span><br><span class="line"><span class="keyword">const</span> element2 = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> element3 = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;<span class="comment">// 错误</span></span><br></pre></td></tr></table></figure>

<p>元素里，大括号里可以写表达式（一句 js 代码，两句不可以）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="string">&#x27;xiawei&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user&#125; &#123;console.log(111)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件的声明方式有以下两种，首字母必须大写，驼峰式命名</p>
<p>使用 state 时，必须使用对象式声明的写法</p>
<p>如果不想使用 ES6 对象语法，可以使用 <code>create-react-class</code> 创建，用法请参考 <a href="https://reactjs.org/docs/react-without-es6.html">react-without-es6</a></p>
<p>组件的标签是否使用成对的都可以，注意 <code>/</code> 不可以省略。标签名和组件名一致</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数式声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComponentA</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Component A<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象式声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComponentB</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Component B<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ComponentB</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentB</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>放在不同文件里时，可以使用 import 和 export 导入导出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/C.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用 jsx 的语法时必须引入 react。否则语法检查工具 eslint 会报错</span></span><br><span class="line"><span class="comment">// 实际编译时不会重复引入 react</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComponentC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Component C<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ComponentC;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ComponentC <span class="keyword">from</span> <span class="string">&#x27;./components/C&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ComponentC</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="props-传递"><a href="#props-传递" class="headerlink" title="props 传递"></a>props 传递</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.name&#125;_&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Me</span> <span class="attr">name</span>=<span class="string">&quot;xiawei&quot;</span> <span class="attr">age</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>还可以通过对象方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> me_info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiawei&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.me.name&#125;_&#123;this.props.me.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Me2</span> <span class="attr">me</span>=<span class="string">&#123;me_info&#125;/</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>还可以使用 ES6 解构对象语法，传递props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me3</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.name&#125;_&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Me3</span> &#123;<span class="attr">...me_info</span>&#125; /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>注意 props 只可以传递值，不可以直接修改 props<br>下面这个 input 组件，输入框里的 value 值目前不可以被修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.props.text&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">text</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>React 元素中使用的事件是经过处理的，语法为小写字母开头的驼峰式写法，例如点击事件 onClick<br>阻止默认事件时，必须使用 <code>e.preventDefault()</code>，使用 <code>return false</code> 是不起作用的<br>原生写法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick()&quot;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>react 写法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>组件中写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.target.innerHTML);<span class="comment">// click me</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);<span class="comment">// undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>注意上面的写法，在 handleClick 函数内部中 this 的值为 undefined，但我们期望它可以指向组件 Button，<br>有以下几种处理方式</p>
<ol>
<li><p>使用 bind 方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者在 class 的构造器中声明也可以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用箭头函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.handleClick()&#125;&gt;click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面这个语法会 return ，对性能有影响。所以建议写上大括号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.handleClick()&#125;&#125;&gt;click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用处于实验阶段的语法 <a href="https://babeljs.io/docs/plugins/transform-class-properties/">public class fields syntax</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.target.innerHTML);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>props 值不可以被改变，但 state 可以，它通过 setState 方法来改写 state 并且更新组件</p>
<p>使用时，必须用 class 方式声明组件，而且需要声明构造器 constructor<br>在构造器里，可以设置 state 的初始值、给事件方法绑定 this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;<span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    <span class="built_in">this</span>.handleChange = <span class="built_in">this</span>.handleChange.bind(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 input 值改变时，这个方法会调用 setState 来更新 state，然后触发 render 更新组件</span></span><br><span class="line">  <span class="function"><span class="title">handleChange</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">text</span>: event.target.value&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 也可以手动更改 state，然后调用 forceUpdate 方法来触发 render 更新组件</span></span><br><span class="line">  <span class="comment">// handleChange(event) &#123;</span></span><br><span class="line">  <span class="comment">//   this.state.text = event.target.value;</span></span><br><span class="line">  <span class="comment">//   this.forceUpdate();</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Input2</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>需要注意的是，setState 可以认为是异步的操作，react 可能会收集好几个 setState 一并处理只触发一次 render<br>setState 的第二个参数是回调函数，render 之后会触发，异步之后的业务放在它里面</p>
<p>第一个参数也可以接收函数，return 出更改后的对象即可，适用于对更改前 state 值有依赖的情况</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleChange</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">text</span>: event.target.value&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>和 vue 类似，react 组件的<a href="https://reactjs.org/docs/react-component.html">生命周期</a>方法执行的顺序是</p>
<p>挂载时：</p>
<ol>
<li>constructor()</li>
<li>componentWillMount() 一般用于页面渲染前的 ajax 数据请求</li>
<li>render()</li>
<li>componentDidMount()</li>
</ol>
<p>更新时</p>
<ol>
<li><p>componentWillReceiveProps(nextProps)</p>
<blockquote>
<p>① 当传入的props值变化时，触发。常用于子组件接收到 props 值时，根据该值去 ajax 查询同步数据</p>
</blockquote>
</li>
<li><p>shouldComponentUpdate(nextProps, nextState)</p>
<blockquote>
<p>② 控制组件是否渲染，return false（默认）时，阻止 render 执行</p>
</blockquote>
</li>
<li><p>componentWillUpdate()</p>
</li>
<li><p>render()</p>
</li>
<li><p>componentDidUpdate()</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentWillReceiveProps</span>(<span class="params">nextProps</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  alert(<span class="string">&quot;原有的&quot;</span>+<span class="built_in">this</span>.props.agreeNum+<span class="string">&quot;，新的&quot;</span>+nextProps.agreeNum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps,nextState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.props.agreeNum!=nextProps.agreeNum) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>卸载时</p>
<ol>
<li>componentWillUnmount()</li>
</ol>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>react 的条件渲染，使用 js 来控制。当不要输出组件时，可以 return null。<br>可以在组件内使用 if else 也可以直接使用三目运算符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isLogin = <span class="literal">true</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conditional</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(isLogin) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>logged in<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>logged out<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Conditional</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;isLogin ? (<span class="tag">&lt;<span class="name">div</span>&gt;</span>logged IN<span class="tag">&lt;/<span class="name">div</span>&gt;</span>) : (<span class="tag">&lt;<span class="name">div</span>&gt;</span>logged OUT<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>react 有个特性，它会把数组，依次渲染到页面。于是利用 map 方法，就可以循环渲染列表或者多个组件了</p>
<p>注意每个循环的组件必须有 key 属性来作为索引，key 的值在本组件中是唯一的</p>
<p>还有 key 在渲染后不会显示在 dom 中，所以通过 props 是取不到的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listDom = [<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>,<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>]</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;listDom&#125;</span></span><br><span class="line"><span class="xml">    &#123;list.map((value, index)=&gt;&#123;</span></span><br><span class="line"><span class="xml">      return (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      )</span></span><br><span class="line"><span class="xml">    &#125;)&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="组件代码分割"><a href="#组件代码分割" class="headerlink" title="组件代码分割"></a>组件代码分割</h2><p>使用库 <a href="https://github.com/jamiebuilds/react-loadable">react-loadable</a> 可以很方便地异步加载代码分割后的组件，并且可以设置 loading 的状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save react-loadable</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">&#x27;react-loadable&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> LoadableOtherComponent = Loadable(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./OtherComponent&#x27;</span>),</span><br><span class="line">  <span class="attr">loading</span>: <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LoadableOtherComponent</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果不使用库，可以使用 异步函数 配合 import() 语法加载组件，参考此文设置 <a href="https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html">acync-component</a></p>
<p>样式和其他方法，可以直接使用 import() 来导入，会自动分割</p>
<h2 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h2><p>props.children 表示所有的子组件、子元素</p>
<p><a href="https://codeburst.io/a-quick-intro-to-reacts-props-children-cb3d2fce4891"><code>&#123;props.children&#125;</code></a> 类似 vue 语法中的 slot，会把组件标签中的内容，渲染到子组件内部</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me4</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.props.children.length);<span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Age</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.myage&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Me4</span>&gt;</span></span></span><br><span class="line"><span class="xml">    people</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>xiawei<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Age</span> <span class="attr">myage</span>=<span class="string">&quot;26&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Me4</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>第一类是是依旧使用 css，但使用 js 来管理样式依赖，例如 <a href="https://github.com/css-modules/css-modules">css-modules</a>，需要简单的自定义配置 webpack 即可。<br>参考资料<a href="https://github.com/camsong/blog/issues/5">《CSS Modules 详解及 React 中实践》</a>、<a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html">CSS Modules 用法教程</a>、<a href="https://github.com/css-modules/css-modules/blob/master/docs/get-started.md">CSS Modules - get started</a></p>
<p>第二类是使用 js 或 json 来写 css，即 <a href="https://github.com/MicheleBertoli/css-in-js">CSS in js</a>，例如 <a href="https://github.com/styled-components/styled-components">styled-components</a></p>
<p>使用 create-react-app 构建的项目，无法配置 webpack，所以只适合使用第二类</p>
<p>react 项目，推荐使用 <a href="https://github.com/styled-components/styled-components">styled-components</a></p>
<p>当然，也可以使用 react 默认的方式，使用 import 来导入外部样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="styled-components-初步使用"><a href="#styled-components-初步使用" class="headerlink" title="styled-components 初步使用"></a>styled-components 初步使用</h3><p><a href="https://github.com/styled-components/styled-components">styled-components</a> 是把基础的元素设置单独样式，来给与每个组件独立的样式，相当于一个 wrap</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save styled-components</span><br></pre></td></tr></table></figure>
<p>使用时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> H1 = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">  color: red</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">H1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">H1</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>注意，使用 styled-components 声明的样式相比 import 进来的样式权重较高，<br>下面的代码最终生效的是 <code>blue</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* abc.css */</span></span><br><span class="line"><span class="selector-class">.abc</span> &#123;<span class="attribute">color</span>: red&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Div = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  .abc &#123;color: bule&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./abc.css&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由 Router"></a>路由 Router</h2><p>react 路由一般使用 <a href="https://reacttraining.com/react-router/web/guides/quick-start">react-router</a><br>路由匹配的测试器 <a href="https://pshrmn.github.io/route-tester/#/">Route Tester</a></p>
<h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>安装（写此文时，使用最新版 4.2.2）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure>

<p>最简单的路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Route,</span><br><span class="line">  Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Link 和 Route 必须写在 Router 里，Router 里必须有一个根元素来包裹 Link、Route 等<br>Link 相当于 a 标签，负责跳转<br>Route 来匹配路由，然后把组件放置在此处</p>
<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>BrowserRouter 是 history 模式<br>如果需要 hash 模式，只要把单词 BrowserRouter 换为 HashRouter 即可</p>
<h3 id="跳转-Link"><a href="#跳转-Link" class="headerlink" title="跳转 Link"></a>跳转 Link</h3><p>路由的跳转 使用 Link，可以传字符串、对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/courses?sort=name&quot;</span>&gt;</span>Courses<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">pathname:</span> &#x27;/<span class="attr">courses</span>&#x27;,</span></span><br><span class="line"><span class="tag">  <span class="attr">search:</span> &#x27;?<span class="attr">sort</span>=<span class="string">name</span>&#x27;,</span></span><br><span class="line"><span class="tag">  <span class="attr">hash:</span> &#x27;#<span class="attr">the-hash</span>&#x27;,</span></span><br><span class="line"><span class="tag">  <span class="attr">state:</span> &#123; <span class="attr">fromDashboard:</span> <span class="attr">true</span> &#125;</span></span><br><span class="line"><span class="tag">&#125;&#125;&gt;</span>Courses<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中 state 可以用来传参，在 Route 的 props 里可以通过 props.location.state 取到</p>
<p>类似的还有 NavLink，用法，它可以使用 activeStyle、activeClassName，当前导航项激活时，给予样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">activeClassName</span>=<span class="string">&quot;selected&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">activeStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">green</span>&#x27;, <span class="attr">fontWeight:</span> &#x27;<span class="attr">bold</span>&#x27; &#125;&#125;</span></span><br><span class="line"><span class="tag">&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 js 跳转：<br>在 Route 的渲染的组件里，通过 props 里可以获取到 history、location、match<br>可以通过 history 的 push、go 等方法来跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.push(<span class="string">&#x27;/otherRoute&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><p>路由的匹配 使用 Route，路由匹配规则是从上到下执行，一旦发现某一个 Route 匹配了，下面的 Route 就不执行了</p>
<p>路由匹配测试工具 <a href="https://pshrmn.github.io/route-tester/#/">route-tester</a></p>
<p>通配符规则</p>
<ol>
<li>:paramName<br>:paramName 匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出。</li>
<li>()<br>()表示URL的这个部分是可选的</li>
<li><code>*</code><br><code>*</code> 匹配任意字符，直到模式里面的下一个字符为止。</li>
</ol>
<p>Route 里的几个 props 配置，值为 true 或 false</p>
<p>exact 完全匹配<br>strict 严格匹配斜杠（含末尾的）<br>sensitive 大小写敏感（区分大小写）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">// 匹配 /</span><br><span class="line">// 匹配 /about</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">// 写了 exact，相当于 exact=&quot;true&quot;，表示完全匹配</span><br><span class="line">// 只匹配 /</span><br><span class="line">// 不匹配 /about</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">strict</span> <span class="attr">path</span>=<span class="string">&quot;/abc/&quot;</span>&gt;</span></span><br><span class="line">// 匹配 /abc/</span><br><span class="line">// 不匹配 /abc</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/hello/:name&quot;</span>&gt;</span></span><br><span class="line">// 匹配 /hello/michael</span><br><span class="line">// 匹配 /hello/ryan</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/hello(/:name)&quot;</span>&gt;</span></span><br><span class="line">// 匹配 /hello</span><br><span class="line">// 匹配 /hello/michael</span><br><span class="line">// 匹配 /hello/ryan</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/files/*.*&quot;</span>&gt;</span></span><br><span class="line">// 匹配 /files/hello.jpg</span><br><span class="line">// 匹配 /files/hello.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/files/*&quot;</span>&gt;</span></span><br><span class="line">// 匹配 /files/</span><br><span class="line">// 匹配 /files/a</span><br><span class="line">// 匹配 /files/a/b</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/*/*.jpg&quot;</span>&gt;</span></span><br><span class="line">// 匹配 /files/hello.jpg</span><br><span class="line">// 匹配 /files/path/to/file.jpg</span><br></pre></td></tr></table></figure>

<h3 id="路由的多种加载方式："><a href="#路由的多种加载方式：" class="headerlink" title="路由的多种加载方式："></a>路由的多种加载方式：</h3><p>component 组件<br>render 匹配到时渲染，可以用于动态的路由，在 render 里可以进行判断<br>children 一定会渲染，可以通过函数中的参数 match 的值 true、false 来控制，适合做动画</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;MyComponent&#125;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> &#123;</span><br><span class="line">  return <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Render<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>;</span><br><span class="line">&#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/children&quot;</span> <span class="attr">children</span>=<span class="string">&#123;(props)</span> =&gt;</span> &#123;</span><br><span class="line">  return <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Children is &#123;props.match ? &#x27;matched&#x27; : &#x27;unmatched&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>;</span><br><span class="line">&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者简写为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/children&quot;</span> <span class="attr">children</span>=<span class="string">&#123;(&#123;match&#125;)</span> =&gt;</span> (</span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Children is &#123;match ? &#x27;matched&#x27; : &#x27;unmatched&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">)&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><h3 id="start-1"><a href="#start-1" class="headerlink" title="start"></a>start</h3><p>Reducers 定义数据的变化过程，是个计算的纯函数<br>State 存储数据，它的 store.getState() 来获取数据 state<br>Action 定义请求类型<br>store.dispath() 来提交 action</p>
<p>大致流程<br>reducers -&gt; 产生新的 store</p>
<p>我们的组件 -&gt; action -&gt; store.dispatch 提交 -&gt; 触发 store.subscribe 监听器 -&gt;<br> -&gt; store.getState 得到更新后的数据 -&gt; setState 更新组件</p>
<h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>一个新闻点击量增加的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始值</span></span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;测试新闻标题&#x27;</span>,</span><br><span class="line">  <span class="attr">clickNum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 reducers</span></span><br><span class="line"><span class="comment">// Reduce 里存放处理的过程，state = info 是给参数设置默认值</span></span><br><span class="line"><span class="keyword">const</span> infoReduce = <span class="function">(<span class="params">state = info, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 必须有 type，值可以是自定义的</span></span><br><span class="line">  <span class="keyword">if</span>(action.type === <span class="string">&#x27;INFO_ADDCLICK&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> oldNum = state.clickNum;</span><br><span class="line">    <span class="keyword">let</span> newNum = oldNum + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 处理后，不改写原来的数据对象 state，而是生成一个新的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;<span class="attr">clickNum</span>: newNum&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依据 Reducers 来创建 store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(infoReduce);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="comment">// 通过 store.getState() 来获取数据，得到初始值</span></span><br><span class="line">      <span class="attr">infoData</span>: store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义 action，必须有 type，值可以是自定义的</span></span><br><span class="line">    <span class="keyword">const</span> action = &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;INFO_ADDCLICK&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 dispath 提交 action</span></span><br><span class="line">    store.dispatch(action);</span><br><span class="line">    <span class="comment">// 获取数据更新组件</span></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">infoData</span>: store.getState()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>新闻标题：&#123;this.state.infoData.title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>点击量：&#123;this.state.infoData.clickNum&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addClick.bind(this)&#125;</span>&gt;</span>修改点击量<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取数据更新组件的 setState 也可以使用 redux 的监听来写，当 dispatch 后会触发回调</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">infoData</span>: store.getState()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 dispatch 时只接收一个 action 对象，异步调用时需要做些处理</p>
<p>redux 可以使用相关的中间件，来对 action 进行处理，增强它的功能和易用性</p>
<h2 id="redux-thunk-中间件"><a href="#redux-thunk-中间件" class="headerlink" title="redux-thunk 中间件"></a>redux-thunk 中间件</h2><p><a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html">thunk函数</a> 的形式见下面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 1 + 2会立即执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 就是 thunk 函数</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">参数</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">参数</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">参数</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> + <span class="number">2</span>;<span class="comment">// 1 + 2被延迟执行了</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redux 里 dispatch 的参数只能是对象</p>
<p>而 <a href="https://github.com/gaearon/redux-thunk">redux-thunk 中间件</a>，使传入 dispatch 的参数可以是 thunk 函数，通过 thunk 函数来对 dispatch 进行异步的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save redux-thunk</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;<span class="comment">// 需要引入 applyMiddleware</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始值</span></span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;测试新闻标题&#x27;</span>,</span><br><span class="line">  <span class="attr">clickNum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟异步请求</span></span><br><span class="line"><span class="keyword">let</span> ajaxData = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> ajax = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ajaxData+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> resolve(ajaxData);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reduce 里存放处理的过程，state = info 是给参数设置默认值</span></span><br><span class="line"><span class="keyword">const</span> infoReduce = <span class="function">(<span class="params">state = info, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 必须有 type，值可以是自定义的</span></span><br><span class="line">  <span class="keyword">if</span>(action.type === <span class="string">&#x27;INFO_ADDCLICK&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理后，不改写原来的数据对象 state，而是生成一个新的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;<span class="attr">clickNum</span>: action.clickNum&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依据 Reduce 来创建 store</span></span><br><span class="line"><span class="comment">// 这里如果设置了 preloadedState 参数，applyMiddleware 在第三个参数传入，否则在第二个参数传入</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(infoReduce, <span class="comment">/*preloadedState,*/</span> applyMiddleware(thunk));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="comment">// 通过 store.getState() 来获取数据</span></span><br><span class="line">      <span class="attr">infoData</span>: store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取数据后更新组件</span></span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">infoData</span>: store.getState()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    store.dispatch(<span class="function"><span class="keyword">function</span>(<span class="params">dispatch, getState</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 异步请求</span></span><br><span class="line">      ajax().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>: <span class="string">&quot;INFO_ADDCLICK&quot;</span>, <span class="attr">clickNum</span>: data&#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>新闻标题：&#123;this.state.infoData.title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>点赞数：&#123;this.state.infoData.clickNum&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addClick.bind(this)&#125;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，异步的请求部分，还可以进一步封装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">API</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里使用了 static 静态方法，静态方法可以直接调用，实例化后 new API().getAgree() 调用不到静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">getAgree</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dispatch, getState</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 异步请求</span></span><br><span class="line">      ajax().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>: <span class="string">&quot;INFO_ADDCLICK&quot;</span>, <span class="attr">clickNum</span>: data&#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时 addClick 里</span></span><br><span class="line">store.dispatch(API.getAgree());</span><br></pre></td></tr></table></figure>

<h2 id="redux-saga-中间件"><a href="#redux-saga-中间件" class="headerlink" title="redux-saga 中间件"></a>redux-saga 中间件</h2><h3 id="es6-生成器-Generator"><a href="#es6-生成器-Generator" class="headerlink" title="es6 生成器 Generator"></a>es6 生成器 Generator</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">Me</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;xiawei&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me = Me()</span><br><span class="line">me.next() <span class="comment">// &#123;value: &quot;xiawei&quot;, done: false&#125;</span></span><br><span class="line">me.next() <span class="comment">// &#123;value: 26, done: false&#125;</span></span><br><span class="line">me.next() <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-takeEvery-、takeLatest"><a href="#使用-takeEvery-、takeLatest" class="headerlink" title="使用 takeEvery 、takeLatest"></a>使用 takeEvery 、takeLatest</h3><p><a href="https://redux-saga.js.org/">redux-saga</a> 是利用 es6 的生成器语法，来对异步函数进行拦截处理</p>
<p>store.dispatch 会触发 saga 的函数，然后 saga 使用 call 方法异步请求后，再 put 触发真正的 dispatch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save redux-saga</span><br></pre></td></tr></table></figure>

<p>call 调用的函数返回一个 Promise，则阻塞 saga 直至成功被处理<br>Put 好比是正常的 dispatch，会进入 reduce 进行处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createSaga <span class="keyword">from</span> <span class="string">&#x27;redux-saga&#x27;</span>;<span class="comment">// 需要引入 redux-saga</span></span><br><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery, takeLatest &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span>; <span class="comment">// saga 里需要引入相关方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始值</span></span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;测试新闻标题&#x27;</span>,</span><br><span class="line">  <span class="attr">clickNum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟异步请求</span></span><br><span class="line"><span class="keyword">let</span> ajaxData = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> ajax = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ajaxData+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> resolve(ajaxData);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reduce 里存放处理的过程，state = info 是给参数设置默认值</span></span><br><span class="line"><span class="keyword">const</span> infoReduce = <span class="function">(<span class="params">state = info, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 必须有 type，值可以是自定义的</span></span><br><span class="line">  <span class="keyword">if</span>(action.type === <span class="string">&#x27;INFO_ADDCLICK&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理后，不改写原来的数据对象 state，而是生成一个新的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;<span class="attr">clickNum</span>: action.agree&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 saga</span></span><br><span class="line"><span class="keyword">const</span> saga = createSaga();</span><br><span class="line"><span class="comment">// 依据 Reduce 来创建 store</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"><span class="keyword">const</span> store = createStore(infoReduce, <span class="comment">/*preloadedState,*/</span> composeEnhancers(</span><br><span class="line">  applyMiddleware(saga)</span><br><span class="line">));</span><br><span class="line"><span class="comment">// 启动 saga</span></span><br><span class="line">saga.run(mySaga)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="comment">// 通过 store.getState() 来获取数据</span></span><br><span class="line">      <span class="attr">infoData</span>: store.getState()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">infoData</span>: store.getState()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newsid = <span class="number">101</span>;</span><br><span class="line">    store.dispatch(&#123;<span class="attr">type</span>: <span class="string">&#x27;SET_AGREE&#x27;</span>, <span class="attr">newsid</span>: newsid&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addTest</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    store.dispatch(&#123;<span class="attr">type</span>: <span class="string">&#x27;TEST&#x27;</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>新闻标题：&#123;this.state.infoData.title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>点赞量：&#123;this.state.infoData.clickNum&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addClick.bind(this)&#125;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addTest.bind(this)&#125;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// API</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoApi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">setAgreeAjax</span>(<span class="params">newsid</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ajax(newsid).then(<span class="function">(<span class="params">agree</span>) =&gt;</span> agree);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// saga，一般会放在单独的文件里</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">ajaxFunc</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">yield</span> call(InfoApi.setAgreeAjax, action.newsid);</span><br><span class="line">  <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">&#x27;INFO_ADDCLICK&#x27;</span>, <span class="attr">agree</span>: data&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">testFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般最终导出它，在初始化时 saga.run(mySaga)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// yield takeEvery(&#x27;SET_AGREE&#x27;, ajaxFunc);// takeEvery，每次点击都会起作用</span></span><br><span class="line">  <span class="keyword">yield</span> takeLatest(<span class="string">&#x27;SET_AGREE&#x27;</span>, ajaxFunc); <span class="comment">// takeLatest，如果之前的请求还处于 pending，则会取消它，只有最后一次的生效</span></span><br><span class="line">  <span class="keyword">yield</span> takeEvery(<span class="string">&#x27;TEST&#x27;</span>,testFunc);<span class="comment">// 点击测试按钮时，只有 testFunc 会被触发，其他并不会</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意 takeLatest 并不会取消发出的 ajax 请求，只是会取消还未发出的 dispatch，只提交最后一次的 dispatch</p>
<p>mySaga 里，初始化 saga.use(mySaga) 时，会将函数执行一次，然后触发某个 action 时，拦截并执行其他函数</p>
<h3 id="使用-take-控制流程"><a href="#使用-take-控制流程" class="headerlink" title="使用 take 控制流程"></a>使用 take 控制流程</h3><p>除了使用 takeEvery 来是触发真正的 dispatch 外，还可以使用 take 来控制流程</p>
<p>导入相关方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, cancel, cancelled, fork, put, take, takeEvery, takeLatest, select &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span></span><br></pre></td></tr></table></figure>

<p>mySaga 里，初始化 saga.use(mySaga) 时，会将函数执行一次，但与 takeEvery 不同的是</p>
<p>执行到 take 时，程序会暂停，直到接收到这个 action 才会继续运行下面的语句</p>
<p>所以如果 mySaga 里的逻辑需要多次使用，必须用 while 语句来包裹</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> action = <span class="keyword">yield</span> take(<span class="string">&#x27;USER_LOGIN&#x27;</span>);<span class="comment">// 登录，执行完 take 后会返回它的 action</span></span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: <span class="string">&#x27;ACTIVE_CHANGE&#x27;</span>, <span class="attr">btnDisabled</span>: <span class="literal">true</span>&#125;);<span class="comment">// 触发真正的 dispatch，禁用登录按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// call 语句阻塞调用，执行完才接着执行后面的其他语句，直到登录完成，才可以执行注销</span></span><br><span class="line">    <span class="comment">// yield call(userLogin);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fork 是非阻塞调用（异步），会接着执行后面的语句，在下一个 take 停住，登录未完成时，也可以执行注销</span></span><br><span class="line">    <span class="keyword">const</span> task = <span class="keyword">yield</span> fork(userLogin);<span class="comment">// 执行完成后返回 task</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> take(<span class="string">&#x27;LOGIN_OUT&#x27;</span>);<span class="comment">// 注销</span></span><br><span class="line">    <span class="keyword">if</span>(task) &#123;</span><br><span class="line">      <span class="keyword">yield</span> cancel(task); <span class="comment">// cancel 可以取消还在执行的 task，登录未完成时，点注销，会取消登录的 saga 的 dispatch</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: <span class="string">&#x27;LOGIN_OUT_DONE&#x27;</span>&#125;);<span class="comment">// 注销完成，触发真正的 dispatch</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: <span class="string">&#x27;ACTIVE_CHANGE&#x27;</span>, <span class="attr">btnDisabled</span>: <span class="literal">false</span>&#125;);<span class="comment">// 触发真正的 dispatch，启用登录按钮</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刚刚使用了 cancel 取消了登录非阻塞调用的 dispatch。cancel 必须是和 fork 配合使用的</p>
<p>取消时，如果需要触发取消的相关业务逻辑，可以这样实现：</p>
<p>取消的是 USER_LOGIN 事件 userLogin 的执行，所以按照官方文档在它里面使用 <a href="http://www.runoob.com/jsref/jsref-try-catch.html">try/catch/finally</a></p>
<p>yield cancelled() 可以判断取消事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">userLogin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 登录的业务逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">     <span class="comment">// 出错后，执行的业务逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">yield</span> cancelled()) &#123;</span><br><span class="line">      <span class="comment">// 取消后，执行的业务逻辑</span></span><br><span class="line">      <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: <span class="string">&#x27;UPDATE_USERLEVEL&#x27;</span>, <span class="attr">level</span>: <span class="string">&#x27;获取等级取消&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有 select 方法会返回当前 store 里的 state 对象，类似 store.getState() 的作用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="keyword">yield</span> select();</span><br></pre></td></tr></table></figure>

<h2 id="redux-dev-tool"><a href="#redux-dev-tool" class="headerlink" title="redux-dev-tool"></a>redux-dev-tool</h2><p>redux 调试工具，有多种使用方式，具体见官方文档<a href="https://github.com/gaearon/redux-devtools">Redux DevTools</a></p>
<p>这里推荐使用 浏览器扩展插件 <a href="https://github.com/zalmoxisus/redux-devtools-extension">Redux DevTools Extension</a></p>
<p>redux 的基本使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">   reducer, <span class="comment">/* preloadedState, */</span></span><br><span class="line">   <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">   <span class="comment">// 加入这个 window 参数即可，注意有第二个参数 preloadedState 时，放在第三个参数位置上</span></span><br><span class="line"> );</span><br></pre></td></tr></table></figure>

<p>使用中间件时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意还需要引入 compose</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, <span class="comment">/* preloadedState, */</span> composeEnhancers(</span><br><span class="line">  applyMiddleware(...middleware)</span><br><span class="line">))</span><br></pre></td></tr></table></figure>

<p>eslint 禁用下划线时，可以在 window 的前面行和后面行加上代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-underscore-dangle */</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">   reducer, <span class="comment">/* preloadedState, */</span></span><br><span class="line">   <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">  );</span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br></pre></td></tr></table></figure>

<h2 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h2><!-- 参考资料 -->
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 代码格式化</title>
    <url>/art/2018/20180726-javascript-code-format/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180726.jpg" alt="20180726"></p>
<blockquote>
<p>每个人都可能有自己的代码风格和格式，但如果一个项目中的所有人都遵循同一风格的话，这个项目就能更顺利地进行。每个人未必能同意每一处格式规则，而且其中的不少规则需要一定时间的适应，但整个项目服从统一的编程风格是很重要的，只有这样才能让所有人轻松地阅读和理解代码。</p>
</blockquote>
<span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>关于代码格式化，有3个相关的概念，比较容易混淆</p>
<ol>
<li>代码格式：人工自定义的、或者遵循某种通用规范<br>例如 <a href="https://standardjs.com/">JavaScript Standard Style</a>，<a href="https://github.com/airbnb/javascript">Airbnb JavaScript Style</a>，<a href="https://google.github.io/styleguide/jsguide.html">Google JavaScript Style</a> 等）</li>
<li>代码检查：依据一种  指定的代码格式，用提示出不符合格式的代码（<a href="https://eslint.org/">ESLint</a>、<a href="https://palantir.github.io/tslint/">TSLint</a>、<a href="https://stylelint.io/">stylelint</a> 等）</li>
<li>代码格式化（code format）：依据一种  指定的代码格式，修正  不符合格式的代码（<a href="https://eslint.org/">ESLint</a>、<a href="https://prettier.io/">Prettier</a> 等）</li>
</ol>
<p>格式化工具支持 CLI 模式，可以在 <code>package.json</code> 中配置命令<br>（CLI 模式其他参数请参考各官方文档）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;standard&quot;</span>: <span class="string">&quot;standard --fix&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;prettier --write &#x27;*.js&#x27;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;eslint --fix &#x27;*.js&#x27;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>设定 JavaScript 代码格式，从简单到严格依次有下面的方式，选一种即可</p>
<ol>
<li>使用 EditorConfig，添加配置文件<code>.editorconfig</code>即可， 可以设置部分的基本格式，然后使用编辑器默认的格式化</li>
<li>使用 Prettier，不做代码检测，直接格式化。也可以添加配置文件 <code>.prettierrc</code> 自定义格式</li>
<li>使用标准的 JavaScript Standard Style，直接安装即可 <code>npm install standard --save-dev</code>, 不需要任何配置文件。 然后使用 standard 插件格式化（ 可以不安装 ESlint 代码检查 ）</li>
<li>使用 ESLint, 执行命令行 <code>npx eslint --init</code> 初始化即可，然后可以自己选择配置规则，之后会自动生成配置文件，并安装相关依赖。并且可以自定义规则。然后使用插件格式化（ ESLint 插件，或者 Pretter + ESLint 同时使用）</li>
</ol>
<p><code>.editorconfig</code> 文件示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">root</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*</span>]                             <span class="comment"># [] 内是正则表达式，匹配文件</span></span><br><span class="line"><span class="string">charset</span> <span class="string">=</span> <span class="string">utf-8</span>                 <span class="comment"># 文本格式</span></span><br><span class="line"><span class="string">end_of_line</span> <span class="string">=</span> <span class="string">lf</span>                <span class="comment"># 配置结尾符号</span></span><br><span class="line"><span class="string">insert_final_newline</span> <span class="string">=</span> <span class="literal">true</span>     <span class="comment"># 文件末尾空行</span></span><br><span class="line"><span class="string">indent_style</span> <span class="string">=</span> <span class="string">space</span>            <span class="comment"># 缩进使用空格</span></span><br><span class="line"><span class="string">indent_size</span> <span class="string">=</span> <span class="number">2</span>                 <span class="comment"># 缩进长度</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 去掉行尾多余的空格</span></span><br></pre></td></tr></table></figure>

<p>关于 CSS 的代码检查，可以使用工具 stylelint<br>安装<code>npm install stylelint --save-dev</code><br>安装代码格式 <code>npm install stylelint-config-standard --save-dev</code><br>Vue 文件还需要安装预处理器 <code>npm install @mapbox/stylelint-processor-arbitrary-tags --save-dev</code></p>
<p>添加配置文件 <code>.stylelintrc</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;defaultSeverity&quot;</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;processors&quot;</span>: [<span class="string">&quot;@mapbox/stylelint-processor-arbitrary-tags&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;stylelint-config-standard&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 rules 里可以写自定义的规则，自定义的规则优先级最高<br>想要自己生成自定义规则的话，可以访问网站 <a href="https://maximgatilin.github.io/stylelint-config/">https://maximgatilin.github.io/stylelint-config/</a></p>
<p>stylelint 的编辑器插件，可以使用 <a href="https://github.com/morishitter/stylefmt">stylefmt</a>, 也可以使用 Prettier 格式化</p>
<p>下面是各种编辑器插件的配置</p>
<h2 id="Webstorm-配置"><a href="#Webstorm-配置" class="headerlink" title="Webstorm 配置"></a>Webstorm 配置</h2><h3 id="启用-EditorConfig"><a href="#启用-EditorConfig" class="headerlink" title="启用 EditorConfig"></a>启用 EditorConfig</h3><p>安装插件 EditorConfig，在设置 Editor -&gt; Code Style 中<br>勾选 Enable EditorConfig support<br>创建 <code>.editorconfig</code> 文件，重启编辑器即可</p>
<h3 id="编辑器默认格式化"><a href="#编辑器默认格式化" class="headerlink" title="编辑器默认格式化"></a>编辑器默认格式化</h3><p>菜单栏 Code -&gt; Reformat Code<br>快捷键 Alt + Cmd + L</p>
<h3 id="Prettier-插件格式化"><a href="#Prettier-插件格式化" class="headerlink" title="Prettier 插件格式化"></a>Prettier 插件格式化</h3><p>1.安装插件 Prettier<br>Webstorm 内置了  Prettier 插件不需要安装，Phpstorm 等在设置中心里 Plugins插件选项里安装即可</p>
<p>2.全局安装或项目安装 prettier 的 npm 依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install prettier --save-dev</span><br></pre></td></tr></table></figure>

<p>3.使用 Prettier 格式化文件<br>Alt + Shift + Cmd + P</p>
<p>设置保存时自动格式化：<br>手工配置设置里的 Tools -&gt; File Watchers 即可<br>可以按照官方教程 <a href="https://prettier.io/docs/en/webstorm.html">https://prettier.io/docs/en/webstorm.html</a></p>
<p>打开设置，搜索 Prettier，然后复制 Prettier package 里的路径</p>
<p><img data-src="https://xiawei.cc/images/20180726-pretter-path.png" alt="20180726-pretter-path"></p>
<p>清空搜索栏，打开设置里 Tools -&gt; File Watchers<br>点击右侧左下角的 ➕ 加号，选择 <code>&lt;custom&gt;</code> 新建自定义模板</p>
<p><img data-src="https://xiawei.cc/images/20180726-filewatcher-new.png" alt="20180726-filewatcher-new"></p>
<p>然后可以看到（注意点击三角箭头，展开全部的选项）</p>
<p><img data-src="https://xiawei.cc/images/20180726-filewatcher-config.png" alt="20180726-filewatcher-config"></p>
<p>按上图来配置，并且填入下面内容，注意取消勾选 Auto-save 选项<br>最后点右下角 ok 结束配置<br>（使用 Vue 时请再创建一个，文件类型请选择 Vue Template）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ProjectFileDir$/node_modules/.bin/prettier</span><br><span class="line">--write $FilePathRelativeToProjectRoot$</span><br><span class="line">$FilePathRelativeToProjectRoot$</span><br><span class="line">$ProjectFileDir$</span><br></pre></td></tr></table></figure>

<p>Windows 系统必须包含 cmd 后缀，Programs 请填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ProjectFileDir$/node_modules/.bin/prettier.cmd</span><br></pre></td></tr></table></figure>

<p>重启编辑器，之后只要 Ctrl + S 保存时，就可以自动格式化代码</p>
<h3 id="ESLint-格式化"><a href="#ESLint-格式化" class="headerlink" title="ESLint 格式化"></a>ESLint 格式化</h3><p>1.全局或项目内安装 eslint 的 npm 依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br></pre></td></tr></table></figure>

<p>2.打开编辑器配置，如下图，找到 ESLint 配置项，路径系统会自动检测到，只要勾选 Enable 即可<br>（如果没有路径，需要重启编辑器，或手动指定 eslint 的 npm 包路径）</p>
<p><img data-src="https://xiawei.cc/images/20180726-webstrom-eslint.png" alt="20180726-webstrom-eslint"></p>
<p>3.重启编辑器<br>4.设置快捷键</p>
<p><img data-src="https://xiawei.cc/images/20180726-webstorm-keymap.png" alt="20180726-webstorm-keymap"><br>建议设为 Ctrl + Alt + F</p>
<p>设置保存时自动格式化：<br>和 Prettier 配置相同，同样新建一个 File Watcher 即可<br> 参数请填写为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ProjectFileDir$/node_modules/.bin/eslint</span><br><span class="line">--fix $FilePathRelativeToProjectRoot$</span><br><span class="line">$FilePathRelativeToProjectRoot$</span><br><span class="line">$ProjectFileDir$</span><br></pre></td></tr></table></figure>

<p>Windows 系统必须包含 cmd 后缀，Programs 请填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ProjectFileDir$/node_modules/.bin/prettier.cmd</span><br></pre></td></tr></table></figure>

<p>重启编辑器，之后只要 Ctrl + S 保存时，就可以自动格式化代码</p>
<p>（使用 Vue 时请再创建一个，文件类型请选择 Vue Template）</p>
<h3 id="standard-标准格式化"><a href="#standard-标准格式化" class="headerlink" title="standard 标准格式化"></a>standard 标准格式化</h3><p>安装 npm 依赖，注意必须安装到开发依赖里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install standard --save-dev</span><br></pre></td></tr></table></figure>

<p>设置 JS 代码风格为 standard（Webstorm 默认为 Google 风格），出处点<a href="https://blog.jetbrains.com/webstorm/2017/01/webstorm-2017-1-eap-171-2272/">这里</a><br>设置的位置见下图，为 Editor -&gt; Code Style -&gt; JavaScript -&gt; Warping and Braces -&gt; Set from…<br>-&gt; Predefined Style -&gt; JavaScript Standard Style<br><img data-src="https://xiawei.cc/images/20180726-webstorm-codestyle.jpg" alt="20180726-webstorm-codestyle"></p>
<p>然后使用编辑器默认的格式化功能即可, Alt + Cmd + L</p>
<p>开启代码检查(可选，不设置时不会提示格式错误)：<br>打开上图配置 ESlint 的界面, 勾选 Enable，并且将 ESLint package 选为 standard 的 npm 路径即可<br><img data-src="https://xiawei.cc/images/20180726-webstorm-standard.png" alt="20180726-webstorm-standard"></p>
<h3 id="Prettier-ESLint-同时使用"><a href="#Prettier-ESLint-同时使用" class="headerlink" title="Prettier + ESLint 同时使用"></a>Prettier + ESLint 同时使用</h3><p>按前文配置 Prettier 和 ESLint，并且都设置保存时自动格式化即可<br>WebStorm 会自动先运行 Pretter，再运行 ESLint 格式化代码</p>
<h2 id="VSCode-配置"><a href="#VSCode-配置" class="headerlink" title="VSCode 配置"></a>VSCode 配置</h2><h3 id="启用-EditorConfig-1"><a href="#启用-EditorConfig-1" class="headerlink" title="启用 EditorConfig"></a>启用 EditorConfig</h3><p>安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig for VS Code</a>, 重启编辑器<br>创建 <code>.editorconfig</code> 文件</p>
<h3 id="编辑器默认格式化-1"><a href="#编辑器默认格式化-1" class="headerlink" title="编辑器默认格式化"></a>编辑器默认格式化</h3><p>快捷键 Shift + Alt + F<br>或者 Cmd + Shift + P 调出命令面板，输入 format，选择 Format Document</p>
<h3 id="Prettier-插件格式化-1"><a href="#Prettier-插件格式化-1" class="headerlink" title="Prettier 插件格式化"></a>Prettier 插件格式化</h3><p>安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a><br>依旧使用 Shift + Alt + F</p>
<p>设置自动格式化开关：<br>安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle">Formatting Toggle</a>，右下角会出现按钮 Formatting，点击可以一键开关 format 功能<br>点击时它会自动修改用户设置文件，配置 <code>&quot;editor.formatOnPaste&quot;: true, &quot;editor.formatOnSave&quot;: true,</code></p>
<p>如果没有设置开关，保存时自动格式化需要设置:<br>编辑器中设置中添加配置 <code>&quot;editor.formatOnSave&quot;: true,</code> 即可</p>
<h3 id="ESlint-格式化"><a href="#ESlint-格式化" class="headerlink" title="ESlint 格式化"></a>ESlint 格式化</h3><p>安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a><br>双击红色波浪线，会出现黄色小灯泡，点击灯泡，再点击 Fix，就可以完成格式化</p>
<p><img data-src="https://xiawei.cc/images/20180726-vscode-eslint.png" alt="20180726-vscode-eslint"></p>
<p>或者 输入 Cmd + Shift+P(win: Ctrl+Shift+P) 调出命令面板，输入指令 fix</p>
<p><img data-src="https://xiawei.cc/images/20180726-vscode-eslintfix.png" alt="20180726-vscode-eslintfix"></p>
<p>也可以添加自定义配置, 设置保存时自动格式化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;eslint.autoFixOnSave&quot;: true,</span><br></pre></td></tr></table></figure>

<h3 id="standard-标准格式化-1"><a href="#standard-标准格式化-1" class="headerlink" title="standard 标准格式化"></a>standard 标准格式化</h3><p>安装 npm 依赖，建议安装到开发依赖里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install standard --save-dev</span><br></pre></td></tr></table></figure>

<p>安装插件<a href="https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs">JavaScript Standard Style</a></p>
<p>输入 Cmd + Shift+P(win: Ctrl+Shift+P) 调出命令面板，输入指令 fix<br>选择 fix all auto-fixable problems 即可<br><img data-src="https://xiawei.cc/images/20180726-vscode-standard.png" alt="20180726-vscode-standard"></p>
<p>建议添加自定义配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;standard.usePackageJson&quot;: true, // 基于项目的 package.json 设置中来配置</span><br><span class="line">&quot;standard.autoFixOnSave&quot;: true, // 保存时自动格式化</span><br></pre></td></tr></table></figure>

<h3 id="Prettier-standard-同时使用"><a href="#Prettier-standard-同时使用" class="headerlink" title="Prettier + standard 同时使用"></a>Prettier + standard 同时使用</h3><p>同时配置 Prettier 和 standard，并且设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;editor.formatOnSave&quot;: true,</span><br><span class="line">&quot;standard.autoFixOnSave&quot;: true,</span><br></pre></td></tr></table></figure>

<p>保存文件时，会先执行 Prettier 格式化，再执行 standard 格式化</p>
<h3 id="Prettier-ESLint-同时使用-1"><a href="#Prettier-ESLint-同时使用-1" class="headerlink" title="Prettier + ESLint 同时使用"></a>Prettier + ESLint 同时使用</h3><p>按前文同时配置 Prettier 和 standard，并且设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;editor.formatOnSave&quot;: true,</span><br><span class="line">&quot;eslint.autoFixOnSave&quot;: true,</span><br></pre></td></tr></table></figure>

<p>或者只配置 Prettier，设置为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;editor.formatOnSave&quot;: true,</span><br><span class="line">&quot;prettier.eslintIntegration&quot;: false, // 使用 Prettier-eslint 功能</span><br></pre></td></tr></table></figure>

<p>此时不需要配置 <code>&quot;eslint.autoFixOnSave&quot;: true,</code></p>
<p>如果不需要格式检查提示，不用安装 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a> 插件</p>
<h2 id="Atom-配置"><a href="#Atom-配置" class="headerlink" title="Atom 配置"></a>Atom 配置</h2><p>编辑器默认未集成格式化插件</p>
<h3 id="启用-EditorConfig-2"><a href="#启用-EditorConfig-2" class="headerlink" title="启用 EditorConfig"></a>启用 EditorConfig</h3><p>安装插件 <a href="https://atom.io/packages/editorconfig">editorconfig</a>, 重启编辑器<br>创建 <code>.editorconfig</code> 文件</p>
<h3 id="Prettier-插件格式化-2"><a href="#Prettier-插件格式化-2" class="headerlink" title="Prettier 插件格式化"></a>Prettier 插件格式化</h3><p>安装插件 <a href="https://atom.io/packages/prettier-atom">prettier-atom</a>, 重启编辑器<br>使用 Crtl + Alt + F 格式化</p>
<p>设置自动格式化开关：<br>在插件设置里  Format on Save 选项下，勾选 Show in Status Bar<br>编辑器底部就会出现保存时自动格式化的开关</p>
<h3 id="ESLint-格式化-1"><a href="#ESLint-格式化-1" class="headerlink" title="ESLint 格式化"></a>ESLint 格式化</h3><p>安装插件 <a href="https://atom.io/packages/linter-eslint">liner-eslint</a>, 重启编辑器<br> 点击有问题的部分，再点击 fix 即可格式化<br><img data-src="https://xiawei.cc/images/20180726-atom-eslint.png" alt="20180726-atom-eslint"></p>
<p>设置保存时自动格式化：<br>在 linter-eslint 插件配置中，勾选<br><img data-src="https://xiawei.cc/images/20180726-atom-eslint-autofix.png" alt="20180726-atom-eslint-autofix"></p>
<h3 id="standard-标准格式化-2"><a href="#standard-标准格式化-2" class="headerlink" title="standard 标准格式化"></a>standard 标准格式化</h3><p>安装 npm 依赖，建议安装到开发依赖里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install standard --save-dev</span><br></pre></td></tr></table></figure>

<p>格式化<br>安装插件 <a href="https://atom.io/packages/standard-formatter">standard-formatter</a><br>使用快捷键 Ctrl + Alt + F 格式化代码</p>
<p>开启代码检查(可选，不安装时不会提示格式错误)：<br>安装插件 <a href="https://atom.io/packages/linter-js-standard">linter-js-standard</a></p>
<h3 id="Prettier-ESLint-同时使用-2"><a href="#Prettier-ESLint-同时使用-2" class="headerlink" title="Prettier + ESLint 同时使用"></a>Prettier + ESLint 同时使用</h3><p>按前文同时配置 Prettier + ESLint, 并且都开启保存时自动格式化即可</p>
<p>或者只配置 Prettier，然后在 Prettier 设置里勾选<br><img data-src="https://xiawei.cc/images/20180726-atom-pretter-eslint.png" alt="20180726-atom-pretter-eslint"></p>
<p>这时不需要安装 ESLint 格式化插件 <a href="https://atom.io/packages/standard-formatter">standard-formatter</a><br>如果不需要格式检查提示，也不用安装格式检查插件 <a href="https://atom.io/packages/linter-js-standard">linter-js-standard</a></p>
<h2 id="Stylelint-编辑器配置"><a href="#Stylelint-编辑器配置" class="headerlink" title="Stylelint 编辑器配置"></a>Stylelint 编辑器配置</h2><p>安装 npm 依赖，建议安装到开发依赖里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install stylelint --save-dev</span><br></pre></td></tr></table></figure>

<p>设置配置文件 <code>.stylelintrc</code> 见上文</p>
<p>安装插件（与上述配置类似，参考插件的介绍文档，不一一赘述了）</p>
<p>Atom：插件 <a href="https://atom.io/packages/stylefmt">stylefmt</a> 或 <a href="https://atom.io/packages/vue-stylefmt">vue-stylefmt</a> 或 <a href="https://atom.io/packages/prettier-atom">pretter-atom</a>(设置中勾选Stylelint Integration)<br>VScode： 插件<a href="https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-stylefmt">stylefmt</a><br>WebStorm： 设置 -&gt; Language and FrameWorks -&gt; Stylesheets -&gt; stylelint -&gt; 勾选 enable 并设置stylelint npm 包路径</p>
<blockquote>
<p>封面图片来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=54808053">https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=54808053</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>lint</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 文件管理利器 TotalFinder 安装教程</title>
    <url>/art/2018/20180724-install-totalfinder/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180724.png" alt="20180724"></p>
<blockquote>
<p>TotalFinder 作为第三方的软件，可以增强 Mac 自带的 finder，并且增强Tab切换、预览界面、颜色标签，尤其可以像浏览器一样操作切换多窗口，特别方便</p>
</blockquote>
<span id="more"></span>

<p>请进入官网下载最新版本 <a href="https://totalfinder.binaryage.com/">https://totalfinder.binaryage.com/</a></p>
<p>然后打开安装包，看到如下界面</p>
<p><img data-src="https://xiawei.cc/images/20180724-pkg.png" alt="20180724-pkg"></p>
<p>继续点击运行 TotalFinder.pkg, 然后依次点击 next 安装，最后点 close</p>
<p><img data-src="https://xiawei.cc/images/20180724-process.png" alt="20180724- process"></p>
<p>接下来会看到提示 TotalFinder 没有完整安装，需要系统授权。也就是暂时关闭系统完整性保护就好</p>
<p><img data-src="https://xiawei.cc/images/20180724-sip-tip.png" alt="20180724-sip-tip"></p>
<p>点击显示详情 Show instructions，可以看到具体步骤。</p>
<p><img data-src="https://xiawei.cc/images/20180724-step.png" alt="20180724-step"></p>
<p>那么就开始这几个简单的步骤吧。<br>点击重启 Reboot Now , 然后屏幕黑屏后，一直按住键盘 command 键 和 R 键</p>
<p>接下来电脑启动了，看到这个界面，可以松手了</p>
<p><img data-src="https://xiawei.cc/images/20180724-recover.png" alt="20180724-recover"></p>
<p>如果是中文系统，则是这样的</p>
<p><img data-src="https://xiawei.cc/images/20180724-recover-zh.jpg" alt="20180724-recover-zh"></p>
<p>点击顶部的实用工具 Utilities, 再点终端 Terminal，可以看到弹出一个白色窗口。直接输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure>
<p>按然后回车 enter 键即可</p>
<p><img data-src="https://xiawei.cc/images/20180724-terminal.jpg" alt="20180724-terminal"></p>
<p>然后点击左上 MacOS 实用工具，再点击重启电脑即可</p>
<p>电脑启动后，就可以看到 finder 已经装好了</p>
<p>最后为了安全起见，再次重启电脑，重复上面的步骤<br>不同的是输入命令时，这时候请输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">csrutil enable</span><br></pre></td></tr></table></figure>

<p>最后是关于激活的问题，当试用期为15天，结束后提示需要激活时，请去官网付费购买。可以选择 alipay 支付宝或 Visa 信用卡方式付款</p>
<p>也许有同学会问怎么破解。我拒绝回答这样的问题，请支持正版</p>
<p>如果不喜欢需要卸载的话，不要直接把软件移除<br>请点击顶部的文件夹图标，然后点击卸载 Uninstall TotalFinder</p>
<p><img data-src="https://xiawei.cc/images/20180724-uninstall.png" alt="20180724-uninstall"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG 的使用</title>
    <url>/art/2018/20180729-svg/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20180729.jpg" alt="20180729"></p>
<blockquote>
<p>SVG 图标是矢量图，可以很方便的转换颜色，修改文字，画质无损进行缩放，而且文件非常小，相比同样的 png 图片，大小仅为一成<br>SVG 通过可配置颜色和配置文字的方式，有效减少了图标文件的个数。从而使设计师和前端工程师工作量都减少，还能提升了加载速度</p>
</blockquote>
<span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>说到性能优化，常见的一种方式就是压缩图片，通常图片最多压缩到原文件的 50%。而且如果一个图标有 7 种颜色呢？那么设计就得给出 7 种颜色的图片，前端代码也得引用不同的 7 个路径。。。想想都觉得复杂。</p>
<p>SVG 图完美地解决了这一痛点，大小仅为原文件 10% 左右。还可以通过改写代码来任意改变颜色，甚至支持在代码中动态地传入颜色。动态地传入颜色时，即便有 1万种颜色，也仅仅一个文件。</p>
<p>而生成 SVG 文件也非常简单，设计师可以使用 矢量图 绘图软件直接导出 svg 格式的文件，如 Adobe Illustrator（简称 AI）、sketch</p>
<p>当然对于 Adobe Photoshop 中绘制的图片，手工转换矢量图比较困难耗时，在线工具解决了这一难题</p>
<p>其中目前免费在线转换工具里，这款是最好的 <a href="https://www.vectorizer.io/">https://www.vectorizer.io/</a></p>
<p>转换后，可能会有一些冗余的代码，可以使用命令行工具 <a href="https://github.com/svg/svgo">svgo</a> 进行批量压缩。当然如果文件数量不多，直接使用在线工具 <a href="https://jakearchibald.github.io/svgomg/">https://jakearchibald.github.io/svgomg/</a> 即可。</p>
<p>这些个 SVG 压缩工具只是静态工具，不会被上传到网络上去，不需要担心被盗图，有兴趣的同学可以研究下源码，以及那个<a href="https://github.com/jakearchibald/svgomg">web 压缩工具的源码</a></p>
<h2 id="SVG-图标示例"><a href="#SVG-图标示例" class="headerlink" title="SVG 图标示例"></a>SVG 图标示例</h2><p>首先 svg 在浏览器里和手机上，与图片一样的，可以正常显示出来<br>下面这个就是一个完整的 SVG 图，包括文字</p>
<p><img data-src="https://xiawei.cc/images/20180729-buttonFollow.svg" alt="20180729-buttonFollow"></p>
<p>下面将它改写为为 400px 宽度的 SVG 图，仍然可以看到很清晰</p>
<p><img data-src="https://xiawei.cc/images/20180729-buttonFollow-big.svg" alt="20180729-buttonFollow-big"></p>
<p>接下来，使用微信屏幕截图，看看同样 400px 宽度的 png 图，并且使用<a href="http://zhitu.isux.us/">智图</a> 压缩图片</p>
<p><img data-src="https://xiawei.cc/images/20180729-png.png" alt="20180729-png"></p>
<p>接下来看看这三个文件的大小</p>
<p><img data-src="https://xiawei.cc/images/20180729-filesize.png" alt="20180729-filesize"></p>
<p>可以看出 SVG 图可以任意改变尺寸，不损失清晰度<br>相比 png 图体积小很多的情况下，仍然比 png 图更清晰</p>
<p>接下来使用代码编辑器打开 SVG 文件，可以看到如下代码</p>
<p>也许看到这一堆代码要头晕了。别担心，实际应用时，并不需要自己手写 SVG 代码，只是改改就足够了<br>仔细看很类似前端常用的 html 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;60px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24px&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 60 24&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Generator: Sketch 51 (57462) - http://www.bohemiancoding.com/sketch --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>按钮/关注-红色底<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">desc</span>&gt;</span>Created with Sketch.<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;按钮/关注-红色底&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;Rectangle-3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF4C6A&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;icon/关注加号&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(3.000000, 0.000000)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;Group&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(8.000000, 8.000000)&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFFFFF&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3,3 L3,1 C3,0.44771525 3.44771525,1.01453063e-16 4,0 C4.55228475,-1.01453063e-16 5,0.44771525 5,1 L5,3 L7,3 C7.55228475,3 8,3.44771525 8,4 C8,4.55228475 7.55228475,5 7,5 L5,5 L5,7 C5,7.55228475 4.55228475,8 4,8 C3.44771525,8 3,7.55228475 3,7 L3,5 L1,5 C0.44771525,5 6.76353751e-17,4.55228475 0,4 C-6.76353751e-17,3.44771525 0.44771525,3 1,3 L3,3 Z&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Combined-Shape&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;Rectangle-10&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#D8D8D8&quot;</span> <span class="attr">opacity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;哈哈&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;PingFangSC-Regular, PingFang SC&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;12&quot;</span> <span class="attr">font-weight</span>=<span class="string">&quot;normal&quot;</span> <span class="attr">line-spacing</span>=<span class="string">&quot;18&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFFFFF&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tspan</span> <span class="attr">x</span>=<span class="string">&quot;24&quot;</span> <span class="attr">y</span>=<span class="string">&quot;16&quot;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SVG-代码说明"><a href="#SVG-代码说明" class="headerlink" title="SVG 代码说明"></a>SVG 代码说明</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;60px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24px&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 60 24&quot;</span> <span class="attr">...</span> &gt;</span> ... <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>svg 标签来控制宽高，width，height 是实际显示的宽高，可以修改为你想要显示的大小<br>而 viewBox 里的大小，则是原始大小，可以理解为画纸的大小位置，其中左上角坐标为 0 0，右下角坐标为 60 24（方向分别为 x, y）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;Group&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(8.000000, 8.000000)&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFFFFF&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>g 标签表示分组，也就是绘图软件中的图层。类似代码中的继承，它的属性，如果子标签里没有规定，就会使用它的属性设置<br>例如下面这两段代码是同样的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">g</span> <span class="attr">fill</span>=<span class="string">&quot;#FF4C6A&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">g</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;#FF4C6A&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>path 表示线条， reat 表示方形，text 表示文字<br>代码 <code>d=&quot;M3,3 L3,1 ...&#39;</code> 是绘制线条的代码，也称作路径（path）</p>
<p>fill 表示填充色，类似于 css 里的背景色（background-color）</p>
<p>stroke 表示描边，类似于 css 的边框颜色（border-color）</p>
<p>所以修改色值时，只需要修改这两个颜色即可<br>色值与 css 相同，可以使用透明色 transparent，以及 rgba(0,0,0,0.5)<br>也可以添加属性 <code>opacity=&#39;0.5&#39;</code> 来控制透明度，值为 0 ~ 1</p>
<p>至于修改文字，找到对应的文字，直接替换即可</p>
<h3 id="动态渲染-SVG"><a href="#动态渲染-SVG" class="headerlink" title="动态渲染 SVG"></a>动态渲染 SVG</h3><p>由于最近正在做 react-native， SVG 的配置难度较大，就用它来示例一下</p>
<p>这里使用 react-native-svg 库来渲染 SVG 图片</p>
<p><span style="color:red">注意设计师导出 SVG 图标前，请清除掉蒙层（mask）、颜色叠加和滤镜（filter）、阴影（shadow），目前 react-native 是不支持的</span></p>
<p>可以使用 [SVGR: The SVG to JSX transformer][]</p>
<blockquote>
<p>首先使用 msvgc 库来一键把 SVG 文件转换为 React 组件<br>nodejs 环境里安装 msvgc，源文件放置到 App/Svg/目录下，配置脚本运行即可<br>导出的组件位于 <code>./App/Components/Svg/svg</code> 目录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"> <span class="attr">&quot;svg&quot;</span>: <span class="string">&quot;msvgc --react-native -f ./App/Svg/ -o ./App/Components/Svg  &amp;&amp; standard &gt; &gt; --fix &#x27;./App/Components/Svg/svg/*.js&#x27;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>再把修正属性的语法，全部改为驼峰写法，例如 <code>fill-rule</code> 改为 <code>fillRule</code><br>修正后将文件移动到 <code>App/Components/Svg</code>(其他目录也昆虫，因为每次新转换时，会覆盖<code>App/Components/Svg/svg/</code> 目录)</p>
</blockquote>
<blockquote>
<p>接下来，进一步修改代码，就可以通过组件的 props 值里动态传参了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Svg, &#123; G, Rect, Path, Text &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; path &#125; <span class="keyword">from</span> <span class="string">&#x27;ramda&#x27;</span> <span class="comment">// 根据键名取值，取不到或错误时，返回 undefined</span></span><br><span class="line"><span class="comment">// path([键名]，被取值的对象)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ButtonFollow = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> Color = &#123;</span><br><span class="line">    <span class="attr">red</span>: <span class="string">&#x27;#ff4c6a&#x27;</span>,</span><br><span class="line">    <span class="attr">grey</span>: <span class="string">&#x27;#6c6c6c&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> fillColor = path([props.color], Color) || props.color || Color.red</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Svg</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">width</span>=<span class="string">&#123;props.width</span> || <span class="attr">60</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">height</span>=<span class="string">&#123;props.height</span> || <span class="attr">24</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">viewBox</span>=<span class="string">&#x27;0 0 60 24&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">G</span> <span class="attr">stroke</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">strokeWidth</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">fillRule</span>=<span class="string">&#x27;evenodd&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Rect</span> <span class="attr">fill</span>=<span class="string">&#123;fillColor&#125;</span> <span class="attr">x</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">y</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;60&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;24&#x27;</span> <span class="attr">rx</span>=<span class="string">&#x27;12&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">G</span> <span class="attr">strokeWidth</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">transform</span>=<span class="string">&#x27;translate(8, 8)&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;#FFFFFF&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Path</span> <span class="attr">d</span>=<span class="string">&#x27;M3,3 L3,1 C3,0.44771525 3.44771525,1.01453063e-16 4,0 C4.55228475,-1.01453063e-16 5,0.44771525 5,1 L5,3 L7,3 C7.55228475,3 8,3.44771525 8,4 C8,4.55228475 7.55228475,5 7,5 L5,5 L5,7 C5,7.55228475 4.55228475,8 4,8 C3.44771525,8 3,7.55228475 3,7 L3,5 L1,5 C0.44771525,5 6.76353751e-17,4.55228475 0,4 C-6.76353751e-17,3.44771525 0.44771525,3 1,3 L3,3 Z&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">G</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">fontSize</span>=<span class="string">&#x27;12&#x27;</span> <span class="attr">lineSpacing</span>=<span class="string">&#x27;18&#x27;</span> <span class="attr">fill</span>=<span class="string">&#x27;#FFFFFF&#x27;</span> <span class="attr">x</span>=<span class="string">&#x27;24&#x27;</span> <span class="attr">y</span>=<span class="string">&#x27;16&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;props.text || &#x27;关注&#x27;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">G</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Svg</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ButtonFollow</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ButtonFollow</span> <span class="attr">width</span>=<span class="string">&#123;300&#125;</span> <span class="attr">height</span>=<span class="string">&#123;120&#125;</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ButtonFollow</span> /&gt;</span> 取默认值 64，24，默认色 red</span><br><span class="line"><span class="tag">&lt;<span class="name">ButtonFollow</span> <span class="attr">width</span>=<span class="string">&#123;300&#125;</span> <span class="attr">height</span>=<span class="string">&#123;120&#125;</span> <span class="attr">color</span>=<span class="string">&#x27;#ccc&#x27;</span> /&gt;</span> 任意颜色</span><br></pre></td></tr></table></figure>

<h3 id="react-art"><a href="#react-art" class="headerlink" title="react-art"></a>react-art</h3><p>(基于 react-naive 0.55.4 介绍)</p>
<p>facebook 自家也出品了一个库 react-art，并且有 react-native-art，二者大体上使用的同一套 API<br>它支持的元素标签交少，例如没有方形。但更简洁，不需要引入额外库<br>（react-native-svg 压缩后大约 200KB）</p>
<p>相关语法可以看 <a href="http://daguang.me/2016/08/17/react-native-art-%E7%BB%98%E5%9B%BE%E5%85%A5%E9%97%A8/">react-native-art-绘图入门</a> 了解一下<br>源码位于 <code>node_modules/react-native/Libraries/ART/ReactNativeART.js</code><br>缺点是还没有找到现成的转换插件，需要手工转换</p>
<p>首先来封装一个方形组件，width、height 控制宽高，r 控制圆角半径（border-radius）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ART &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Shape &#125; = ART</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractNumber</span> (<span class="params">value, defaultValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> defaultValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> +value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RectART = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> w = extractNumber(props.width, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> h = extractNumber(props.height, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> r = extractNumber(props.r, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (w === <span class="number">0</span> || h === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (r &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    h -= r * <span class="number">2</span></span><br><span class="line">    w -= r * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Shape</span> &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">d</span>=<span class="string">&#123;</span>`<span class="attr">M</span>$&#123;<span class="attr">r</span>&#125;,<span class="attr">0</span> <span class="attr">h</span>$&#123;<span class="attr">w</span>&#125; <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">v</span>$&#123;<span class="attr">h</span>&#125; <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">-r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">h</span>$&#123;<span class="attr">-w</span>&#125;  <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">-r</span>&#125;,$&#123;<span class="attr">-r</span>&#125; <span class="attr">v</span>$&#123;<span class="attr">-h</span>&#125; <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">-r</span>&#125; <span class="attr">z</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Shape</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">d</span>=<span class="string">&#123;</span>`<span class="attr">h</span>$&#123;<span class="attr">w</span>&#125; <span class="attr">v</span>$&#123;<span class="attr">h</span>&#125; <span class="attr">h</span>$&#123;<span class="attr">-w</span>&#125; <span class="attr">z</span>`&#125; /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RectART</span><br></pre></td></tr></table></figure>

<p>接下来转换按钮</p>
<ol>
<li>将 svg 换为 Surface，宽高为显示端宽高，不指定画布大小</li>
<li>Surface 内层写上一层 Group ，添加属性 scale 用于整体缩放，缩放倍数 X 基于画布原始大小来计算</li>
<li>g 转换为 Group， Group 里的属性只支持 fill 和 transform，其他的都写到子标签里去</li>
<li>path 转换为 Shape，d 仍然是路径，复制过来即可（react-art 内置了一套 svg 转换器，源码位于路径 <code>node_modules/art/core/path.js</code>）</li>
<li>transform 转换为这种形式，注意 scale 要放在左边，与 css3 相同还支持 rotate<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform = <span class="keyword">new</span> Transform().scale(<span class="number">2</span>).translate(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li>
<li>text 转换为 Text，直接包裹文字即可，</li>
</ol>
<p>其中 font 指定字体格式（注意必须指定字体）<br>（react-native 里指定多个字体只有第一个字体生效）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">font=<span class="string">&#x27;normal 12 PingFangSC-Regular&#x27;</span></span><br></pre></td></tr></table></figure>
<p>也可以写为（注意必须指定字体）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">font=&#123;<span class="attr">fontFamily</span>: <span class="string">&#x27;PingFangSC-Regular&#x27;</span>,<span class="attr">fontSize</span>: <span class="string">&#x27;12&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>还有两个属性是 fontWeight、fontStyle</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; path &#125; <span class="keyword">from</span> <span class="string">&#x27;ramda&#x27;</span> <span class="comment">// 根据键名取值，取不到或错误时，返回 undefined</span></span><br><span class="line"><span class="comment">// path([键名]，被取值的对象)</span></span><br><span class="line"><span class="keyword">import</span> &#123; ART, View &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Rect <span class="keyword">from</span> <span class="string">&#x27;./RectART.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Group, Shape, Surface, Transform, Text &#125; = ART</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ButtonFollow = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> Color = &#123;</span><br><span class="line">    <span class="attr">red</span>: <span class="string">&#x27;#ff4c6a&#x27;</span>,</span><br><span class="line">    <span class="attr">grey</span>: <span class="string">&#x27;#6c6c6c&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fillColor = path([props.color], Color) || props.color || Color.red</span><br><span class="line">  <span class="keyword">const</span> X = (<span class="built_in">Math</span>.min(props.width / <span class="number">60</span>, props.height / <span class="number">24</span>)) || <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;props.style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Surface</span> <span class="attr">width</span>=<span class="string">&#123;props.width</span> || <span class="attr">60</span>&#125; <span class="attr">height</span>=<span class="string">&#123;props.height</span> || <span class="attr">24</span>&#125; &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Group</span> <span class="attr">scale</span>=<span class="string">&#123;X&#125;</span> &gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Rect</span> <span class="attr">fill</span>=<span class="string">&#123;fillColor&#125;</span> <span class="attr">r</span>=<span class="string">&#x27;12&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;60&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;24&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Shape</span> <span class="attr">fill</span>=<span class="string">&#x27;#FFFFFF&#x27;</span> <span class="attr">transform</span>=<span class="string">&#123;new</span> <span class="attr">Transform</span>()<span class="attr">.translate</span>(<span class="attr">8</span>, <span class="attr">8</span>)&#125; <span class="attr">d</span>=<span class="string">&#x27;M3,3 L3,1 C3,0.44771525 3.44771525,1.01453063e-16 4,0 C4.55228475,-1.01453063e-16 5,0.44771525 5,1 L5,3 L7,3 C7.55228475,3 8,3.44771525 8,4 C8,4.55228475 7.55228475,5 7,5 L5,5 L5,7 C5,7.55228475 4.55228475,8 4,8 C3.44771525,8 3,7.55228475 3,7 L3,5 L1,5 C0.44771525,5 6.76353751e-17,4.55228475 0,4 C-6.76353751e-17,3.44771525 0.44771525,3 1,3 L3,3 Z&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">font</span>=<span class="string">&#123;</span>&#x27;<span class="attr">normal</span> <span class="attr">12</span> <span class="attr">PingFangSC-Regular</span>&#x27;&#125; <span class="attr">fill</span>=<span class="string">&#x27;#FFF&#x27;</span> <span class="attr">transform</span>=<span class="string">&#123;new</span> <span class="attr">Transform</span>()<span class="attr">.translate</span>(<span class="attr">24</span>, <span class="attr">4</span>)&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;props.text || &#x27;关注&#x27;&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Group</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Surface</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ButtonFollow</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ButtonFollow</span> <span class="attr">width</span>=<span class="string">&#123;300&#125;</span> <span class="attr">height</span>=<span class="string">&#123;120&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="react-native-art-API"><a href="#react-native-art-API" class="headerlink" title="react-native-art API"></a>react-native-art API</h2><p>(基于 react-naive 0.55.4 介绍)<br>下面是我看了源码之后罗列的 API，供参考使用</p>
<p>相关语法可以看 <a href="http://daguang.me/2016/08/17/react-native-art-%E7%BB%98%E5%9B%BE%E5%85%A5%E9%97%A8/">react-native-art-绘图入门</a> 了解一下<br>源码位于 <code>node_modules/react-native/Libraries/ART/ReactNativeART.js</code></p>
<h3 id="Surface"><a href="#Surface" class="headerlink" title="Surface"></a>Surface</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>heigh</td>
<td>string</td>
<td>-</td>
</tr>
</tbody></table>
<h3 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>opacity</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scale</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleX</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleY</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>transform</td>
<td>transform</td>
<td></td>
</tr>
<tr>
<td>visible</td>
<td>boolean</td>
<td>false equals opacity 0</td>
</tr>
</tbody></table>
<h3 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>d</td>
<td>path</td>
<td></td>
</tr>
<tr>
<td>fill</td>
<td>string</td>
<td>Color</td>
</tr>
<tr>
<td>opacity</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scale</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleX</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleY</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>stroke</td>
<td>string</td>
<td>Color</td>
</tr>
<tr>
<td>strokeCap</td>
<td>string</td>
<td>butt, square, round(default)</td>
</tr>
<tr>
<td>strokeDash</td>
<td></td>
<td></td>
</tr>
<tr>
<td>strokeJoin</td>
<td>string</td>
<td>miter, bevel, round</td>
</tr>
<tr>
<td>strokeWidth</td>
<td>number</td>
<td>1(default)</td>
</tr>
<tr>
<td>transform</td>
<td>transform</td>
<td></td>
</tr>
<tr>
<td>visible</td>
<td>boolean</td>
<td>false equals opacity 0</td>
</tr>
</tbody></table>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>alignment</td>
<td>string</td>
<td>right, center, left(default)</td>
</tr>
<tr>
<td>fill</td>
<td>string</td>
<td>Color</td>
</tr>
<tr>
<td>font</td>
<td>string</td>
<td>normal 10 PingFangSC-Regular</td>
</tr>
<tr>
<td>font</td>
<td>object</td>
<td>{fontFamily,fontSize,fontWeight,fontStyle}</td>
</tr>
<tr>
<td>opacity</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>path</td>
<td>path</td>
<td></td>
</tr>
<tr>
<td>scale</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scale</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleX</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleX</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleY</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>scaleY</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>strokeCap</td>
<td>string</td>
<td>butt, square, round(default)</td>
</tr>
<tr>
<td>strokeDash</td>
<td></td>
<td></td>
</tr>
<tr>
<td>strokeJoin</td>
<td>string</td>
<td>miter, bevel, round</td>
</tr>
<tr>
<td>strokeWidth</td>
<td>number</td>
<td>1(default)</td>
</tr>
<tr>
<td>transform</td>
<td>transform</td>
<td>-</td>
</tr>
</tbody></table>
<h3 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h3><table>
<thead>
<tr>
<th>Property</th>
<th>params</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>transform</td>
<td>xx, yx, xy, yy, x, y</td>
<td></td>
</tr>
<tr>
<td>translate</td>
<td>x, y</td>
<td></td>
</tr>
<tr>
<td>move</td>
<td>x, y</td>
<td></td>
</tr>
<tr>
<td>moveTo</td>
<td>x, y</td>
<td></td>
</tr>
<tr>
<td>scale</td>
<td>x, y</td>
<td></td>
</tr>
<tr>
<td>scaleTo</td>
<td>x, y</td>
<td></td>
</tr>
<tr>
<td>rotate</td>
<td>deg, x, y</td>
<td></td>
</tr>
<tr>
<td>rotateTo</td>
<td>deg, x, y</td>
<td></td>
</tr>
<tr>
<td>resizeTo</td>
<td>width, height</td>
<td>this.scaleTo(width / w, height / h)</td>
</tr>
<tr>
<td>point</td>
<td>x, y</td>
<td></td>
</tr>
<tr>
<td>inversePoint</td>
<td>x, y</td>
<td>-</td>
</tr>
</tbody></table>
<p>上面表格含 To 的都是绝对坐标，例如 move 是相对坐标，moveTo 是绝对坐标</p>
<p>LinearGradient<br>| params | type   | Description     |<br>| —— | —— | ————— |<br>| stop   | object |                 |<br>| x0     | number | 非必填，默认270 |<br>| y0     | number | 非必填          |<br>| x1     | number | 非必填          |<br>| y1     | number | 非必填          |</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> linearGradient = <span class="keyword">new</span> LinearGradient(&#123;</span><br><span class="line">  <span class="string">&#x27;.1&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="comment">// blue in 1% position</span></span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;rgba(255, 255, 255, 0)&#x27;</span> <span class="comment">// opacity white in 100% position</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;400&quot;</span></span><br><span class="line">)</span><br><span class="line">&lt;Shape fill=&#123;linearGradient&#125;&gt;</span><br></pre></td></tr></table></figure>


<p>其他存在但不常用的 API<br>Path<br>ClippingRectangle<br>LinearGradient<br>Pattern<br>RadialGradient</p>
<h2 id="SVG-path-说明"><a href="#SVG-path-说明" class="headerlink" title="SVG path 说明"></a>SVG path 说明</h2><p>具体可以看 w3c 官方文档 <a href="https://www.w3.org/TR/SVG2/paths.html">https://www.w3.org/TR/SVG2/paths.html</a><br>大写字母都代表绝对坐标<br>小写字母都代表相对坐标</p>
<p>下面这几个写法效果相同<br>M 10 20 M 15 25 v 5<br>M 10,20 M 15,25 v 5<br>M10,20 M15,25 v5<br>M10,20 15,25 v5 (与前一个字母相同时，字母可以省略)</p>
<p>字母主要有以下几种，可以对应到上面的表格</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>M</td>
<td>moveto</td>
<td>x, y</td>
<td>移动</td>
</tr>
<tr>
<td>L</td>
<td>lineto</td>
<td>x, y</td>
<td>画线</td>
</tr>
<tr>
<td>H</td>
<td>horizontal lineto</td>
<td>x</td>
<td>画水平线</td>
</tr>
<tr>
<td>V</td>
<td>vertical lineto</td>
<td>y</td>
<td>画垂直线</td>
</tr>
<tr>
<td>A</td>
<td>elliptical arc</td>
<td></td>
<td>椭圆</td>
</tr>
<tr>
<td>Z</td>
<td>closepath</td>
<td></td>
<td>连接到起始点，只能在最后使用</td>
</tr>
</tbody></table>
<p>椭圆 A 有6个参数 rx ry x-axis-rotation large-arc-flag sweep-flag x y<br>含义分别为</p>
<table>
<thead>
<tr>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>rx</td>
<td>x 轴半径</td>
</tr>
<tr>
<td>ry</td>
<td>y 轴半径</td>
</tr>
<tr>
<td>x-axis-rotation</td>
<td>相对于 x 轴的旋转角度，例如 30 表示 30 度</td>
</tr>
<tr>
<td>large-arc-flag</td>
<td>1 绘制大圆，0 绘制小圆</td>
</tr>
<tr>
<td>sweep-flag</td>
<td>旋转方式： 1 顺时针，0 逆时针</td>
</tr>
<tr>
<td>x</td>
<td>结束点的 x 坐标</td>
</tr>
<tr>
<td>y</td>
<td>结束点的 x 坐标</td>
</tr>
</tbody></table>
<h2 id="ReactNativeSvg-示例"><a href="#ReactNativeSvg-示例" class="headerlink" title="ReactNativeSvg 示例"></a>ReactNativeSvg 示例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; View &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Svg, &#123; G, Path &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-svg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// react-native-svg 8.0.8 版本 svg 内元素有可能过大，导致点击区域超出预期范围</span></span><br><span class="line"><span class="comment">// 包裹 View 设置 &#123;overflow: &#x27;hidden&#x27;&#125; 样式可以解决此问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HeaderBack = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;overflow:</span> &#x27;<span class="attr">hidden</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Svg</span> <span class="attr">viewBox</span>=<span class="string">&#x27;0 0 8 14&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> <span class="attr">8</span>, <span class="attr">height:</span> <span class="attr">14</span>&#125;&#125; &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">G</span> <span class="attr">fill</span>=<span class="string">&#x27;none&#x27;</span> <span class="attr">fillRule</span>=<span class="string">&#x27;evenodd&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Path</span> <span class="attr">d</span>=<span class="string">&#x27;M-18-15h44v44h-44z&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Path</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">stroke</span>=<span class="string">&#123;props.color</span> || &#x27;#<span class="attr">666</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">strokeWidth</span>=<span class="string">&#123;2&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">strokeLinecap</span>=<span class="string">&#x27;round&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">strokeLinejoin</span>=<span class="string">&#x27;round&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">d</span>=<span class="string">&#x27;M7 1L1 7 l6 6&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">G</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Svg</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HeaderBack</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ReactNativeART-示例"><a href="#ReactNativeART-示例" class="headerlink" title="ReactNativeART 示例"></a>ReactNativeART 示例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// &lt;HeaderBack /&gt;</span></span><br><span class="line"><span class="comment">// &lt;HeaderBack color=&#x27;red&#x27; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;ramda/es/path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ART, View &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Group, Shape, Surface, Transform &#125; = ART</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderBack</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> Color = &#123;</span><br><span class="line">      <span class="attr">black</span>: <span class="string">&#x27;#666&#x27;</span>,</span><br><span class="line">      <span class="attr">red</span>: <span class="string">&#x27;rgba(102,102,102,.4)&#x27;</span>,</span><br><span class="line">      <span class="attr">white</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fillColor = path([props.color], Color) || props.color || Color.black</span><br><span class="line">    <span class="keyword">const</span> X = (props.width &amp;&amp; props.height) ? <span class="built_in">Math</span>.min(props.width / <span class="number">11</span>, props.height / <span class="number">17</span>) : props.width / <span class="number">11</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;props.style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Surface</span> <span class="attr">width</span>=<span class="string">&#123;props.width</span> || <span class="attr">11</span>&#125; <span class="attr">height</span>=<span class="string">&#123;props.height</span> || <span class="attr">17</span>&#125; &gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Group</span> <span class="attr">transform</span>=<span class="string">&#123;new</span> <span class="attr">Transform</span>()<span class="attr">.scale</span>(<span class="attr">X</span> || <span class="attr">1</span>)&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Shape</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">strokeWidth</span>=<span class="string">&#123;2&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">stroke</span>=<span class="string">&#123;fillColor&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">transform</span>=<span class="string">&#123;new</span> <span class="attr">Transform</span>()<span class="attr">.translate</span>(<span class="attr">-18</span>, <span class="attr">-15</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">d</span>=<span class="string">&#x27;M25,16 L19,22 L25,28&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Group</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Surface</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自己封装的-RectART"><a href="#自己封装的-RectART" class="headerlink" title="自己封装的 RectART"></a>自己封装的 RectART</h2><p>ReactART 没有提供方形、带圆角的方形，所以自己封装了一个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用（必须在 Surface 标签内使用）</span></span><br><span class="line"><span class="comment">// &lt;RectART width=&#123;100&#125; height=&#123;100&#125; r=&#123;10&#125;&gt;</span></span><br><span class="line"><span class="comment">// r 为圆角半径 border-radius，不写默认为 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ART &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Shape &#125; = ART</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractNumber</span> (<span class="params">value, defaultValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> defaultValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> +value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RectART = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> w = extractNumber(props.width, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> h = extractNumber(props.height, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> r = extractNumber(props.r, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (w === <span class="number">0</span> || h === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (r &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    h -= r * <span class="number">2</span></span><br><span class="line">    w -= r * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Shape</span> &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">d</span>=<span class="string">&#123;</span>`<span class="attr">M</span>$&#123;<span class="attr">r</span>&#125;,<span class="attr">0</span> <span class="attr">h</span>$&#123;<span class="attr">w</span>&#125; <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">v</span>$&#123;<span class="attr">h</span>&#125; <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">-r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">h</span>$&#123;<span class="attr">-w</span>&#125;  <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">-r</span>&#125;,$&#123;<span class="attr">-r</span>&#125; <span class="attr">v</span>$&#123;<span class="attr">-h</span>&#125; <span class="attr">a</span>$&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">r</span>&#125; <span class="attr">0</span> <span class="attr">0</span>,<span class="attr">1</span> $&#123;<span class="attr">r</span>&#125;,$&#123;<span class="attr">-r</span>&#125; <span class="attr">z</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Shape</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">d</span>=<span class="string">&#123;</span>`<span class="attr">h</span>$&#123;<span class="attr">w</span>&#125; <span class="attr">v</span>$&#123;<span class="attr">h</span>&#125; <span class="attr">h</span>$&#123;<span class="attr">-w</span>&#125; <span class="attr">z</span>`&#125; /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RectART</span><br></pre></td></tr></table></figure>



<blockquote>
<p>封面图片来源：<a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=38190692">https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=38190692</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>svg</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 指南学习笔记</title>
    <url>/art/2018/20181225-swift-language-guide/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20181225.jpg" alt="20181225"></p>
<blockquote>
<p>正在学习 Swift 中，简要的笔记~</p>
</blockquote>
<span id="more"></span>
<p><a href="https://www.pixiv.net/member_illust.php?mode=medium&illust_id=41544976">封面图来源</a></p>
<p><a href="https://www.cnswift.org/the-basics">中文翻译 Swift 指南</a>(需要科学上网)<br><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html">官方文档 Swift Language Guide</a><br>推荐使用的划词翻译 Chrome 插件：<a href="https://chrome.google.com/webstore/search/%E7%BF%BB%E8%AF%91%E4%BE%A0">翻译侠</a><br>如果官方版本有问题，请暂时使用这个 <a href="https://github.com/magic-FE/translate-man/issues/60">替代版本</a></p>
<h3 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul>
<li>Int      整数</li>
<li>Double   浮点数 精度15位（不推荐 Float，精度6位）</li>
<li>Bool     布尔值</li>
<li>Tuples   元组, Tuples 不可以直接使用，语法例如(Int, String)</li>
<li>nil      表示没有值</li>
<li>Optional 可选类型，在类型后加上 ？表示。例如Int?，表示值可能为 nil，或者 Int 类型</li>
<li>Array    数组</li>
</ul>
<p>TODO: 获取判断数据类型  type(of: date)</p>
<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><p>所有转换都使用数据类型的函数来转换，即全部都为显式转换<br>例如字符串 Int(“32”)</p>
<h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p>var 声明变量<br>let 声明常量</p>
<p>声明变量时必须指定默认值。<code>var foo: Int = 1</code><br>没有默认值时，也可以指定为可选类型。<code>var foo: Int?</code><br>赋值的情况下类型指定可以省略，系统会自动推断，按住 option 键点击变量，即可看到类型推断的结果</p>
<h4 id="调试输出"><a href="#调试输出" class="headerlink" title="调试输出"></a>调试输出</h4><p>print(foo, bar)</p>
<h4 id="if-语句及强制展开"><a href="#if-语句及强制展开" class="headerlink" title="if 语句及强制展开"></a>if 语句及强制展开</h4><p>给可选类型赋值时，得到的值仍然是可选类型<br>例如声明 <code>var foo: Int? = 1</code>, foo 的值为 <code>Optional(1)</code></p>
<p>使用可选类型内部的值有以下几种方式</p>
<ol>
<li><p>确认变量有值时，使用 <code>!</code> 强制展开（Forced Unwrapping）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> foo <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">  foo<span class="operator">!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 if 语句自带的语法，进行可选项绑定（Optional Binding）<br>即如果 foo 内部的值不为 nil 时，它的内部的值会赋给 bar<br>变量 bar 只能在当前的 if 代码块内使用</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> bar <span class="operator">=</span> foo &#123;</span><br><span class="line">  bar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>隐式展开可选项 Implicitly Unwrapped Optionals<br>把 <code>!</code> 放在类型声明后了，语法更简洁，bar 值是 foo 变量内部的值 或者 nil</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let bar: Int! = foo</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用 合并空值运算符 Nil-Coalescing Operator<br>如果 foo 内部有值，则返回内部值。如果 foo 内部值为 nil，则返回 <code>??</code> 后的默认值<br>默认值的类型必须与 foo 内置值类型相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo ?? nil</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>函数可以把自身的错误传递出去，传递到调用函数的作用域</p>
<p>通过 throws 来标记这种函数</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canThrowErrors</span>()</span> <span class="keyword">throws</span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure>

<p>执行时，要求加上 try 标识符</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> canThrowErrors()</span><br></pre></td></tr></table></figure>

<p>由于有可能抛出错误信息，所以需要对错误进行捕获处理<br>错误会默认在 error 变量里</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> canThrowErrors()</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外还有 try? 和 try! 可以使用</p>
<p>使用 try? 错误时会得到值 nil</p>
<p>以下的 x、y 的处理相同的</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="keyword">try?</span> canThrowErrors()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y: <span class="type">Int</span>?</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    y <span class="operator">=</span> <span class="keyword">try</span> canThrowErrors()</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    y <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己确保不会出错时，可以使用 try! 取消错误传递，例如加载本地图片时<br>但如果出错了，会报运行时错误</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> photo <span class="operator">=</span> <span class="keyword">try!</span> loadImage(<span class="string">&quot;./Resources/John Appleseed.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符 + - * / %  +=  -="></a>算术运算符 + - * / %  +=  -=</h4><h4 id="一元减号运算符-Unary-Plus-Operator，可以取到负值"><a href="#一元减号运算符-Unary-Plus-Operator，可以取到负值" class="headerlink" title="一元减号运算符 Unary Plus Operator，可以取到负值"></a>一元减号运算符 Unary Plus Operator，可以取到负值</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="operator">-</span>foo <span class="comment">// -3</span></span><br><span class="line">foo <span class="operator">=</span> <span class="operator">-</span><span class="number">3</span></span><br><span class="line"><span class="operator">-</span>foo <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h4 id="合并空值运算符-Nil-Coalescing-Operator"><a href="#合并空值运算符-Nil-Coalescing-Operator" class="headerlink" title="合并空值运算符 Nil-Coalescing Operator"></a>合并空值运算符 Nil-Coalescing Operator</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a <span class="operator">??</span> b</span><br></pre></td></tr></table></figure>
<p>如果可选项 a 有值则展开，如果没有值，是 nil ，则返回默认值 b 。表达式 a 必须是一个可选类型。表达式 b 必须与 a 的储存类型相同。</p>
<h4 id="区间运算符-Range-Operators"><a href="#区间运算符-Range-Operators" class="headerlink" title="区间运算符 Range Operators"></a>区间运算符 Range Operators</h4><p>闭区间 ClosedRange 例如 <code>1...5</code> 1,2,3,4,5<br>半开区间 Range 例如 <code>0..&lt;5</code>  0,1,2,3,4</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>isEmpty 判断是否为空<br>字符串插值</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> multiplier <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> message <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(multiplier)</span> times 2.5 is <span class="subst">\(Double(multiplier) <span class="operator">*</span> <span class="number">2.5</span>)</span>&quot;</span></span><br><span class="line"><span class="comment">// message is &quot;3 times 2.5 is 7.5&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><p><img data-src="https://xiawei.cc/images/20181225-collection-types-intro.png" alt="CollectionTypes_intro_2x"><br>数组 Array<br>集合 Set<br>字典 Dictionary</p>
<p>某个集合类型声明后，它内部所有值都是相同的类型</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>Array<Element> 或 [Element], 启动 Element 是内部元素的类型</p>
<p>声明数组</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;() <span class="comment">// 空数组 []</span></span><br><span class="line"><span class="keyword">var</span> b <span class="operator">=</span> [<span class="type">Int</span>]()      <span class="comment">// 空数组 []</span></span><br><span class="line"><span class="keyword">var</span> c <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0.0</span>, count: <span class="number">3</span>) <span class="comment">// [0.0, 0.0, 0.0]</span></span><br><span class="line"><span class="keyword">var</span> shoppingList: [<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;Eggs&quot;</span>, <span class="string">&quot;Milk&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>数组方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">isEmpty</span><br><span class="line">count</span><br><span class="line">append(<span class="keyword">_</span>:)</span><br><span class="line">remove(at:)</span><br><span class="line">insert(<span class="keyword">_</span>:at:)</span><br></pre></td></tr></table></figure>

<p>修改某个范围的值<br><code>shoppingList[4...6] = [&quot;Bananas&quot;, &quot;Apples&quot;]</code></p>
<p>遍历数组</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> shoppingList &#123;</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>shoppingList.count &#123;</span><br><span class="line">    <span class="keyword">let</span> value <span class="operator">=</span> shoppingList[index]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index: <span class="subst">\(index)</span>, value: <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enumerated 方法返回元组</span></span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> shoppingList.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index: <span class="subst">\(index)</span>, value: <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="合集"><a href="#合集" class="headerlink" title="合集"></a>合集</h4><p>合集将不重复的值，无序存放<br>Set<Element></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>合集方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">isEmpty</span><br><span class="line">contains(<span class="keyword">_</span>:)</span><br><span class="line">insert(<span class="keyword">_</span>:)</span><br><span class="line">remove(<span class="keyword">_</span>:)</span><br><span class="line">removeAll()</span><br></pre></td></tr></table></figure>

<p>遍历合集<br>合集是无序的，遍历前使用 sorted 可以排序</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> num.sorted() &#123;</span><br><span class="line">    <span class="built_in">print</span>(value) <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> num.sorted(by: <span class="operator">&gt;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value) <span class="comment">// 3,2,1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>合集操作<br><img data-src="https://xiawei.cc/images/20181225-set-venn-diagram.png" alt="setVennDiagram_2x-1"><br>intersection、symmetricDifference、union、subtracting</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>函数里可以传递函数作为参数，先声明一个接受函数作为参数的函数</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculator</span>(<span class="params">n1</span>: <span class="type">Int</span>, <span class="params">n2</span>: <span class="type">Int</span>, <span class="params">operation</span>: (<span class="type">Int</span>, <span class="type">Int</span>)-&gt;<span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> operation(n1, n2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用声明函数的方式来调用</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span> (<span class="params">num1</span>: <span class="type">Int</span>, <span class="params">num2</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 <span class="operator">+</span> num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">calculator(n1: <span class="number">1</span>, n2: <span class="number">2</span>, operation: add)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用闭包的方式来调用</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">calculator(n1: <span class="number">1</span>, n2: <span class="number">2</span>, operation: &#123;(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> num1 <span class="operator">+</span> num2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>由于 swift 可以类型推断，而且 calculator 函数里声明过类型，可以去掉类型，简化为</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">calculator(n1: <span class="number">1</span>, n2: <span class="number">2</span>, operation: &#123;(num1, num2) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> num1 <span class="operator">+</span> num2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>由于只有一行代码 return xxx，可以去掉 return 简化为</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">calculator(n1: <span class="number">1</span>, n2: <span class="number">2</span>, operation: &#123;(num1, num2) <span class="keyword">in</span> num1 <span class="operator">+</span> num2&#125;)</span><br></pre></td></tr></table></figure>

<p>闭包中，编译器会将参数标识为0、1、2，…，其中0代表第一个参数值，以此类推</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">calculator(n1: <span class="number">1</span>, n2: <span class="number">2</span>, operation: &#123; <span class="variable">$0</span> <span class="operator">+</span> <span class="variable">$1</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>甚至可以进一步简化，如果函数的最后一个参数是闭包，则可以先删除operation参数名称，再将闭包代码移到函数右边小括号的外面</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">calculator(n1: <span class="number">1</span>, n2: <span class="number">2</span>) &#123; <span class="variable">$0</span> <span class="operator">+</span> <span class="variable">$1</span> &#125;</span><br></pre></td></tr></table></figure>

<p>又例如把数组的每项值加一</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">54</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addOne</span> (<span class="params">n1</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array.map(addOne)</span><br></pre></td></tr></table></figure>

<p>使用闭包可以简化为</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">array.map &#123;<span class="variable">$0</span> <span class="operator">+</span> <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h3><p>20190129 添加错误捕获<br>20190213 添加闭包</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>《web 全栈工程师的自我修养》读书笔记</title>
    <url>/art/2019/20190609-book-Web%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20190609.jpg" alt="月色真美截图"></p>
<blockquote>
<p>人的精力有限，有强的地方就必定有弱的地方，全栈工程师可遇不可求，但本书比较全面的介绍了前端工程师向全栈工程师转型的需要。</p>
</blockquote>
<span id="more"></span>

<p>先声明，以下全部是读书笔记加上个人拙见，欢迎讨论交流。</p>
<blockquote>
<p>全栈工程师的定义：一个人包揽整个网站的构建</p>
</blockquote>
<p>今年来看，产品边界越来越模糊，伴随着技术也越发融合。技术岗位也逐渐在融合。交互设计和视觉设计由一位设计师来完成，app 客户端、web 端、小程序等，统一由前端开发来完成。后台开发 docker 部署、分布式微服务也越发常见，提供微服务的 Sass 平台国内也有了。</p>
<p>图：产品开发流程<br><img data-src="https://xiawei.cc/images/20190609-product-development-process.jpg" alt="产品开发流程"></p>
<blockquote>
<p>老板雇佣一个员工，不是因为他能写程序，而是因为他能帮助自己赚钱。<br>赚钱有两种方法：减少成本，或者增加收入。程序员如果能加快内部系统的运行效率，让产品制作流程更加顺畅，就是减少成本。如果能让用户更容易地购买产品，或者提高服务质量吸引更多用户，就能增加收入。在老板看来，程序员只是一个昂贵的劳动力，他会不会写程序都没那么重要，重要是能赚钱。</p>
</blockquote>
<p>上面这段话，我认为就是全书的核心价值观了，技术为赚钱服务，如何赚钱？提高效率，优化用户体验。全栈工程师一专多长，可以胜任小型项目，在大型项目中也能全面思考，沟通效率高。</p>
<p>全栈工程师能力要求可以简化为产品、设计、编程。价值的优先级是 产品 &gt; 设计 &gt; 编程，但入门的顺序确实相反的，先学会编程，然后向设计过渡，最后是产品。当然这三个能力多少也是可以同时成长的。</p>
<p>我想具体的例子是 《时间块》app，作者安妮生活中有个痛点，做了一个 app，然后优化设计，最后这款应用常年稳居 App Store 排行榜，而作者的职业也从程序员转为设计师了。本书的作者，15 年著书，从他的博客来看，目前也是带领微云设计团队。</p>
<p>编程中书中列出了一些前端需要的技能，我这里归纳为不限语言的：<br>HTTP<br>性能优化（关键是缓存）<br>编程语言基础语法和原理的理解<br>对相关库、框架的使用<br>编辑器、插件、调试工具<br>版本工具、构建工具<br>安全<br>自动化测试<br>包管理</p>
<p>设计工具有：<br>Photoshop、Axure、Sketch、Quartz Composer</p>
<p>另外还提到了沟通、管理能力，这里不赘述</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
  </entry>
  <entry>
    <title>Normalizr 使用教程</title>
    <url>/art/2018/20181227-normalizr/</url>
    <content><![CDATA[<p><img data-src="https://xiawei.cc/images/20181227.jpg" alt="20181227"></p>
<blockquote>
<p>Normalizr 前端用于格式化数据结构的 Javascript 工具库。<br>官方文档写的不是很容易理解，这里按我的思路介绍一下，方便快速上手</p>
</blockquote>
<span id="more"></span>
<p><a href="https://www.pixiv.net/member_illust.php?mode=medium&illust_id=55883093">封面图来源</a></p>


<p>可以把后端接口返回的数据格式化为类似数据表的形式，方便在 redux、flux 中进行数据管理</p>
<p>至于是否真的有必要使用，<a href="https://segmentfault.com/q/1010000008816485">这段评论</a>讲的挺好</p>
<blockquote>
<p>部分项目里面有大量的类和对象（这些类和对象都是前端处理），这时候我们其实想要一个前端关系型数据库，而且还得能放进redux里面，该数据库要有索引（加快查询速度），符合数据库范式（增删改查数据不会产生副作用）。此时，normalizr就需要使用了</p>
</blockquote>
<p>官方文档：<a href="https://github.com/paularmstrong/normalizr">https://github.com/paularmstrong/normalizr</a></p>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myData = [ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span> &#125; ]</span><br><span class="line"><span class="keyword">const</span> fruit = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;fruits&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mySchema = [ fruit ]</span><br><span class="line"><span class="keyword">const</span> normalizedData = normalize(myData, mySchema)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(normalizedData)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">entities</span>: &#123; <span class="attr">fruits</span>:</span><br><span class="line">     &#123; <span class="string">&#x27;1&#x27;</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span> &#125;,</span><br><span class="line">       <span class="string">&#x27;2&#x27;</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span> &#125; &#125; &#125;</span><br><span class="line">  <span class="attr">result</span>: &#123; <span class="attr">fruits</span>: [ <span class="number">1</span>, <span class="number">2</span> ] &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用说明：</p>
<ol>
<li><p>首先需要想象预期得到什么样的结果，来定义预期的数据结构</p>
</li>
<li><p>声明需要提取出来的部分 schema.Entity<br>声明 schema<br>schema 共有 5 种方法 Array、Entity、Object、Union、Values</p>
</li>
</ol>
<p>其中 Entity 基础类型用于提取数据，是必须要使用的，其他的看情况</p>
<p>例如 在数据里 <code>[ &#123; id: 1, name: &#39;apple&#39; &#125;, &#123; id: 2, name: &#39;banana&#39; &#125; ]</code>, 预期要把单个的水果信息<code>&#123; id: 1, name: &#39;apple&#39; &#125;</code>提取出来，变为索引 id <code>1</code></p>
<p>那么首先就要定义一下这个 fruit</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;fruits&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时预期的结构就是 <code>&#123; fruits &#125;</code></p>
<ol start="2">
<li>声明数据值的类型<br>接下来需要确认 fruits 的值类型，这个例子里，是个数组<br>所以需要使用 new schema.Array(definition) 方法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySchema = <span class="keyword">new</span> schema.Array(fruit)</span><br></pre></td></tr></table></figure>

<p>这里可以直接使用简写方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySchema = [ fruit ]</span><br></pre></td></tr></table></figure>

<p>此时，预期的结构就是 <code>&#123; fruits: [] &#125;</code></p>
<ol start="3">
<li>最后一步，输入原始数据，和预期的结构，完成格式化</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> normalizedData = normalize(myData, mySchema)</span><br></pre></td></tr></table></figure>

<p>格式化完成</p>
<p>下面再依照上述步骤分析官方文档的 Quick Start 这个例子</p>
<p>先看原始数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Paul&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;My awesome blog post&#x27;</span>,</span><br><span class="line">  <span class="attr">comments</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;324&#x27;</span>,</span><br><span class="line">      <span class="attr">commenter</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Nicole&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预期输出的格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">articles</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;123&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;My awesome blog post&#x27;</span>,</span><br><span class="line">      <span class="attr">comments</span>: [ <span class="string">&#x27;324&#x27;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">users</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: &#123; <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Paul&#x27;</span> &#125;,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: &#123; <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Nicole&#x27;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">comments</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;324&#x27;</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;324&#x27;</span>, <span class="string">&#x27;commenter&#x27;</span>: <span class="string">&#x27;2&#x27;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>声明预期的格式<br>先声明预期的格式 <code>&#123; articles, users, comments &#125;</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> article = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;articles&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> comment = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;comments&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后这里注意到</p>
<ul>
<li>articles: 整个原始数据里 author 字段包含了用户信息、 comments 字段包含了评论信息</li>
<li>comments: 评论信息里 commenter 字段包含了用户信息</li>
<li>users: author 字段没有包含其他信息</li>
</ul>
<p>所以需要明确相互的关系，改成这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> article = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;articles&#x27;</span>, &#123; author, comments &#125;)</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> comment = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;comments&#x27;</span>, &#123; commenter &#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明数据值的类型</li>
</ol>
<p>接下来，进一步进行声明，并且适当调换变量的顺序，将范围大的放在后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> comment = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;comments&#x27;</span>, &#123; <span class="attr">commenter</span>: user &#125;)</span><br><span class="line"><span class="keyword">const</span> article = <span class="keyword">new</span> schema.Entity(<span class="string">&#x27;articles&#x27;</span>, &#123; <span class="attr">author</span>: user, <span class="attr">comments</span>: [comment] &#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>最后一步，输入原始数据，和预期的结构，完成格式化</li>
</ol>
<p>可以看出来，整个输入的数据，就是一个 article，所以这里的 mySchema 就是 article</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySchema = article</span><br><span class="line"><span class="keyword">const</span> normalizedData = normalize(myData, mySchema)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
